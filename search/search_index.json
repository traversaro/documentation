{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to iCub Tech Documentation \u00b6 1\ufe0f\u20e3 First Launch with the Humanoid robot iCub the perfect starter guide to handle and check the overall capabilities of iCub. \u2699 iCub HW home page collecting documentation resources on the iCub HW. \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb iCub SW home page collecting documentation resources on the iCub SW.","title":"Home Page"},{"location":"#welcome-to-icub-tech-documentation","text":"1\ufe0f\u20e3 First Launch with the Humanoid robot iCub the perfect starter guide to handle and check the overall capabilities of iCub. \u2699 iCub HW home page collecting documentation resources on the iCub HW. \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb iCub SW home page collecting documentation resources on the iCub SW.","title":"Welcome to iCub Tech Documentation"},{"location":"icub_hw/","text":"\u2699 iCub HW Documentation \u00b6 First draft of iCub HW documentation. The iCub Versions Table \u00b6 iCub Versions Table is a table containing the current known iCub versions. The iCub Wiring \u00b6 iCub Wiring contains the documentation about the Logic and Harness schematics of iCub iCub Tendons \u00b6 iCub Tendons contains the ultimate step-by-step guide on how to replace broken or out of place tendons of the iCub. It includes also some tutorials on how to build forearms and the overall tendons constituting iCub. The Upgrade Kits \u00b6 The design of our robot evolves in time. We have been asking ourselves how to propagate the mechanical or hardare enhancements we design to older robots. Our solution is to define upgrade kits that can be applied to specific robots. An upgrade kit is a plastic bag with mechanical parts, hardware boards, screws, wires, tendons and whatever it is required to perform a physical upgrade of the robots, including the instructions.","title":"Summary"},{"location":"icub_hw/#icub-hw-documentation","text":"First draft of iCub HW documentation.","title":"\u2699 iCub HW Documentation"},{"location":"icub_hw/#the-icub-versions-table","text":"iCub Versions Table is a table containing the current known iCub versions.","title":"The iCub Versions Table"},{"location":"icub_hw/#the-icub-wiring","text":"iCub Wiring contains the documentation about the Logic and Harness schematics of iCub","title":"The iCub Wiring"},{"location":"icub_hw/#icub-tendons","text":"iCub Tendons contains the ultimate step-by-step guide on how to replace broken or out of place tendons of the iCub. It includes also some tutorials on how to build forearms and the overall tendons constituting iCub.","title":"iCub Tendons"},{"location":"icub_hw/#the-upgrade-kits","text":"The design of our robot evolves in time. We have been asking ourselves how to propagate the mechanical or hardare enhancements we design to older robots. Our solution is to define upgrade kits that can be applied to specific robots. An upgrade kit is a plastic bag with mechanical parts, hardware boards, screws, wires, tendons and whatever it is required to perform a physical upgrade of the robots, including the instructions.","title":"The Upgrade Kits"},{"location":"icub_sw/","text":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb iCub SW Documentation \u00b6 First draft of iCub SW documentation. Software Versioning Table The OS for the iCub enviroment How to set up multiple iCubs on the same network iCub Firmware","title":"Summary"},{"location":"icub_sw/#icub-sw-documentation","text":"First draft of iCub SW documentation. Software Versioning Table The OS for the iCub enviroment How to set up multiple iCubs on the same network iCub Firmware","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb iCub SW Documentation"},{"location":"icub_firmware/","text":"Firmware Documentation \u00b6 Here you can find informations about firmware in the various versions of the robot and some related resources. Firmware Documentation Associated Firmware CanLoader F/T Sensors","title":"Summary"},{"location":"icub_firmware/#firmware-documentation","text":"Here you can find informations about firmware in the various versions of the robot and some related resources. Firmware Documentation Associated Firmware CanLoader F/T Sensors","title":"Firmware Documentation"},{"location":"icub_firmware/associated-firmware/associated-firmware/","text":"Associated Firmware \u00b6 This page reports the association board/address/firmware version either for CAN and ETH based robots CAN based robots \u00b6 CAN Networks \u00b6 The iCub 1.0.0 four can bus network are used (ids range from 0 to 3) 0 head network, device pcan 1 left arm network, device pcan 2 right arm network, device pcan 3 legs network, device pcan On iCub 1.1.0 two ecan devices are added to the existing pcans. 0 head network, device pcan 1 left arm network, device pcan 2 right arm network, device pcan 3 legs network, device pcan left hand: device ecan, variable id right hand: device ecan, variable id On iCub 1.2.0 the cfw2can board is used (ids range from 0 to 8). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand skin network, device cfw2can 8 right hand skin network, device cfw2can On iCub 1.3.0 the cfw2can board is used (ids range from 0 to 8). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand and forearm skin network, device cfw2can 8 right hand and forearm skin network, device cfw2can On iCub 1.3.1 the Head V2.0 is installed on a 1.3.0 robot. On iCub 2 the cfw2can board is used (ids range from 0 to 9). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand, forearm and upperarm skin network, device cfw2can 8 right hand forearm and upperarm skin network, device cfw2can 9 torso skin network, device cfw2can iCub V1.0 \u00b6 We here describe the CAN-bus networks structure of the iCub v1.0. The version 1.0 uses the CFW board which has 4 canbus lines. This version of iCub is no more supported. Firmware versions marked in red have been removed from the main repository. can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm pcan-2 icub_right_arm.ini right_arm pcan-3 icub_legs_leg.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) Details on the control boards connected to each network are given below. PCAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S PCAN1: Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B0 -> 1 (pcan) 1 2BLL.1.50.out.S 1B1 -> 1 (pcan) 2 2BLL.1.53.out.S 1B2 -> 1 (pcan) 3 (4) 4DC.1.19.out.S 1B3 -> 1 (pcan) 5 (6) 4DC.1.18.out.S 1B4 -> 1 (pcan) 7 (8) 4DC.1.20.out.S PCAN2: Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B0 -> 2 (pcan) 1 2BLL.1.50.out.S 2B1 -> 2 (pcan) 2 2BLL.1.53.out.S 2B2 -> 2 (pcan) 3 (4) 4DC.1.19.out.S 2B3 -> 2 (pcan) 5 (6) 4DC.1.18.out.S 2B4 -> 2 (pcan) 7 (8) 4DC.1.20.out.S PCAN3: Legs \u00b6 boardLabel canDeviceNum boardId firmware 3B5 -> 3 (pcan) 5 2BLL.1.51.out.S 3B6 -> 3 (pcan) 6 2BLL.1.51.out.S 3B7 -> 3 (pcan) 7 2BLL.1.51.out.S 3B8 -> 3 (pcan) 8 2BLL.1.51.out.S 3B9 -> 3 (pcan) 9 2BLL.1.51.out.S 3B10 -> 3 (pcan) 10 2BLL.1.51.out.S iCub V1.1.0 \u00b6 We here describe the CAN-bus networks structure of the iCub v1.1. The version 1.1 uses the CFW board which has 4 canbus lines and 2 esd-can device. Overall we have 6 canbus lines: 4 pcan and 2 ecan. Additionaly, the robot is equipped with MAIS and STRAIN analog sensors. can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm (joints 0 to 7) pcan-2 icub_right_arm.ini right_arm (joints 0 to 7) pcan-3 icub_legs.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) ecan-0 or ecan-1 icub_left_hand.ini left_arm (joints 8 to 15) ecan-0 or ecan-1 icub_right_hand.ini right_arm (joints 8 to 15) Details on the control boards connected to each network are given below. PCAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S PCAN1: Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B0 -> 1 (pcan) 1 2BLL.1.50.out.S 1B1 -> 1 (pcan) 2 2BLL.1.57.out.S 1B2 -> 1 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -> 1 (pcan) 12 - - - Strain -> 1 (pcan) 13 strain.hex ECAN1: Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B3 -> 1 (ecan) 5 (6) 4DC.1.28.out.S 1B4 -> 1 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -> 1 (ecan) 12 - - - MAIS -> 1 (ecan) 14 mais.hex PCAN2: Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B0 -> 2 (pcan) 1 2BLL.1.50.out.S 2B1 -> 2 (pcan) 2 2BLL.1.57.out.S 2B2 -> 2 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -> 2 (pcan) 12 - - - Strain -> 2 (pcan) 13 strain.hex ECAN0: Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B3 -> 2 (ecan) 5 (6) 4DC.1.28.out.S 2B4 -> 2 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -> 2 (ecan) 12 - - - MAIS -> 2 (ecan) 14 mais.hex PCAN3: Legs \u00b6 boardLabel canDeviceNum boardId firmware 3B5 -> 3 (pcan) 5 2BLL.1.51.out.S 3B6 -> 3 (pcan) 6 2BLL.1.51.out.S 3B7 -> 3 (pcan) 7 2BLL.1.51.out.S 3B8 -> 3 (pcan) 8 2BLL.1.51.out.S 3B9 -> 3 (pcan) 9 2BLL.1.51.out.S 3B10 -> 3 (pcan) 10 2BLL.1.51.out.S virtual FT joint sensor (left_leg) -> 3 (pcan) 12 - - - Strain (left_leg) -> 3 (pcan) 13 strain.hex virtual FT joint sensor (right_leg) -> 3 (pcan) 11 - - - Strain (right_leg) -> 3 (pcan) 14 strain.hex iCub v1.2.0 \u00b6 We here describe the CAN-bus networks structure of the iCub v1.2.0. The version 1.2.0 uses the CFW2 board which has 10 can-Bus lines available. can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin Details on the control boards connected to each network are given in the following. CFW2CAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S CFW2CAN1: Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex CFW2CAN5: Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex CFW2CAN2: Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex CFW2CAN6: Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex CFW2CAN3: left leg \u00b6 boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex CFW2CAN4: right leg \u00b6 boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex CFW2CAN7: Skin Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B7 -> 7 (cfw2can) 15 skin.hex CFW2CAN8: Skin Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B7 -> 8 (cfw2can) 15 skin.hex iCub v1.3.0 \u00b6 We here describe the CAN-bus networks structure of the iCub v1.3.0. The version 1.3.0 uses the CFW2 board which has 10 can-Bus lines available. can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin Details on the control boards connected to each network are given in the following. CFW2CAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S CFW2CAN1: Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex CFW2CAN5: Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex CFW2CAN2: Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex CFW2CAN6: Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex CFW2CAN3: left leg \u00b6 boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex CFW2CAN4: right leg \u00b6 boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex CFW2CAN7: Skin Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B7 (HAND) -> 7 (cfw2can) 14 skin.hex 1B9 (FOREARM UPPER) -> 7 (cfw2can) 13 skin.hex 1B8 (FOREARM LOWER) -> 7 (cfw2can) 12 skin.hex CFW2CAN8: Skin Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B7 (HAND) -> 8 (cfw2can) 14 skin.hex 2B9 (FOREARM UPPER) -> 8 (cfw2can) 13 skin.hex 2B8 (FOREARM LOWER) -> 8 (cfw2can) 12 skin.hex iCub v1.x.1 ( x>1 ) \u00b6 We here describe the CAN-bus networks structure of the iCub v1.x.1 ( x>1 ). The version 1.x.1 uses the Head V2. For CAN-bus network different from NET0 refer to relative iCub version can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso Details on the control boards connected to network 0 are given in the following. CFW2CAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.1.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.1.54.out.S iCub v2 \u00b6 We here describe the CAN-bus networks structure of the iCub v2 CFW2CAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -> 0 (cfw2can) 14 6sg.hex CFW2CAN1: Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.2.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.2.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -> 1 (cfw2can) 9 6sg.hex CFW2CAN5: Left hand \u00b6 boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.2.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.2.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex CFW2CAN2: Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.2.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.2.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -> 1 (cfw2can) 9 6sg.hex CFW2CAN6: Right hand \u00b6 boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex CFW2CAN3: left leg \u00b6 boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.2.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.2.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.2.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex 6SG Upper Leg (optional) -> 3 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -> 3 (cfw2can) 2 6sg.hex CFW2CAN4: right leg \u00b6 boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.2.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.2.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.2.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex 6SG Upper Leg (optional) -> 4 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -> 4 (cfw2can) 2 6sg.hex CFW2CAN7: Skin Left arm \u00b6 boardLabel canDeviceNum boardId firmware 1B7 (HAND) -> 7 (cfw2can) 14 skin.hex 1B8 (LEFT LOWER FOREARM) -> 7 (cfw2can) 12 skin.hex 1B9 (LEFT UPPER FOREARM) -> 7 (cfw2can) 13 skin.hex 1B10 (LEFT UPPER EXTERNAL) -> 7 (cfw2can) 10 skin.hex 1B11 (LEFT UPPER BOTTOM) -> 7 (cfw2can) 11 skin.hex 1B12 (LEFT UPPER INTERNAL) -> 7 (cfw2can) 9 skin.hex 1B13 (LEFT LOWER UPPERARM) -> 7 (cfw2can) 8 skin.hex CFW2CAN8: Skin Right arm \u00b6 boardLabel canDeviceNum boardId firmware 2B7 (HAND) -> 8 (cfw2can) 14 skin.hex 2B8 (LEFT LOWER FOREARM) -> 8 (cfw2can) 12 skin.hex 2B9 (LEFT UPPER FOREARM) -> 8 (cfw2can) 13 skin.hex 2B10 (RIGHT UPPER EXTERNAL) -> 8 (cfw2can) 10 skin.hex 2B11 (RIGHT UPPER BOTTOM) -> 8 (cfw2can) 11 skin.hex 2B12 (RIGHT UPPER INTERNAL) -> 8 (cfw2can) 9 skin.hex 2B13 (RIGHT LOWER UPPERARM) -> 8 (cfw2can) 8 skin.hex CFW2CAN9: Skin Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B7 -> 9 (cfw2can) 7 skin.hex 0B8 -> 9 (cfw2can) 8 skin.hex 0B9 -> 9 (cfw2can) 9 skin.hex 0B10 -> 9 (cfw2can) 10 skin.hex iCub v2 - Talking Head \u00b6 We here describe the CAN-bus networks structure of the iCub v2 - Talking Head CFW2CAN0: Head and Torso \u00b6 Head \u00b6 boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S 0B7 -> 0 (cfw2can) 7 (8) 4DC.2.15.out.S 0B9 -> 0 (cfw2can) 9 (10) 4DC.1.11.out.S Torso \u00b6 boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -> 0 (cfw2can) 14 6sg.hex iCub 2.5 - Wiring <= 3.2 \u00b6 We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring <= 3.2) IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: left arm joints 0 -> 3 STRAIN 10.0.1.2 EB2 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3 MC4(4DC.2.28.out.S) CAN1:5 MC4(4DC.2.30.out.S) CAN1:7 MAIS(mais.hex) CAN1:14 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 MTB(mtb.hex) CAN2:14 MC: left arm joints 4 -> 11 MAIS left hand SKIN left arm INERTIALS: left arm 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: right arm joints 0 -> 3 STRAIN 10.0.1.4 EB4 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3 MC4(4DC.2.28.out.S) CAN1:5 MC4(4DC.2.30.out.S) CAN1:7 MAIS(mais.hex) CAN1:14 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 MTB(mtb.hex) CAN2:14 MC: right arm joints 4 -> 11 MAIS right hand SKIN right arm INERTIALS: right arm 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 MC: torso joints 0 -> 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: left leg joints 0 -> 3 STRAIN 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 MC: left leg joints 4 -> 5 STRAIN 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: right leg joints 0 -> 3 STRAIN 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 MC: right leg joints 4 -> 5 STRAIN 10.0.1.10 EB10 (ems.hex) MTB(mtb.hex) CAN1:1 MTB(mtb.hex) CAN1:2 MTB(mtb.hex) CAN1:3 MTB(mtb.hex) CAN1:4 MTB(mtb.hex) CAN1:5 MTB(mtb.hex) CAN1:6 MTB(mtb.hex) CAN1:7 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 SKIN: left leg INERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB(mtb.hex) CAN1:1 MTB(mtb.hex) CAN1:2 MTB(mtb.hex) CAN1:3 MTB(mtb.hex) CAN1:4 MTB(mtb.hex) CAN1:5 MTB(mtb.hex) CAN1:6 MTB(mtb.hex) CAN1:7 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 SKIN: right leg INERTIALS: right leg iCub 2.5 - Wiring > 3.2 \u00b6 We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring > 3.2) IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: left arm joints 0 -> 3 STRAIN2 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: right arm joints 0 -> 3 STRAIN2 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 MC: torso joints 0 -> 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 0 -> 3 STRAIN2 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 4 -> 5 STRAIN2 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 0 -> 3 STRAIN2 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 4 -> 5 STRAIN2 10.0.1.10 EB10 (ems.hex) MTB4(mtb4.hex) CAN1:1 MTB4(mtb4.hex) CAN1:2 MTB4(mtb4.hex) CAN1:3 MTB4(mtb4.hex) CAN1:4 MTB4(mtb4.hex) CAN1:5 MTB4(mtb4.hex) CAN1:6 MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN2:8 MTB4(mtb4.hex) CAN2:9 MTB4(mtb4.hex) CAN2:10 MTB4(mtb4.hex) CAN2:11 MTB4(mtb4.hex) CAN2:12 MTB4(mtb4.hex) CAN2:13 SKIN: left leg INERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB4(mtb4.hex) CAN1:1 MTB4(mtb4.hex) CAN1:2 MTB4(mtb4.hex) CAN1:3 MTB4(mtb4.hex) CAN1:4 MTB4(mtb4.hex) CAN1:5 MTB4(mtb4.hex) CAN1:6 MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN2:8 MTB4(mtb4.hex) CAN2:9 MTB4(mtb4.hex) CAN2:10 MTB4(mtb4.hex) CAN2:11 MTB4(mtb4.hex) CAN2:12 MTB4(mtb4.hex) CAN2:13 SKIN: right leg INERTIALS: right leg 10.0.1.20 EB20 (mc4plus.hex) MC4PLUS No CAN boards MC: head joints 0 -> 1 10.0.1.21 EB21 (mc4plus.hex) MC4PLUS RFE(rfe.hex) CAN1:1 MC: head joints 2 -> 5 INERTIALS: head 10.0.1.22 EB22 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 SKIN: torso 10.0.1.24 EB24 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 MTB4(mtb4.hex) CAN1:11 MTB4(mtb4.hex) CAN1:12 MTB4(mtb4.hex) CAN1:13 MTB4(mtb4.hex) CAN1:14 MC: left arm joints 4 -> 7 SKIN: left arm 10.0.1.25 EB25 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 8 -> 11 10.0.1.26 EB26 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 12 -> 15 10.0.1.27 EB27 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 MTB4(mtb4.hex) CAN1:11 MTB4(mtb4.hex) CAN1:12 MTB4(mtb4.hex) CAN1:13 MTB4(mtb4.hex) CAN1:14 MC: right arm joints 4 -> 7 SKIN: right arm 10.0.1.28 EB28 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 8 -> 11 10.0.1.29 EB29 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 12 -> 15","title":"Associated Firmware"},{"location":"icub_firmware/associated-firmware/associated-firmware/#associated-firmware","text":"This page reports the association board/address/firmware version either for CAN and ETH based robots","title":"Associated Firmware"},{"location":"icub_firmware/associated-firmware/associated-firmware/#can-based-robots","text":"","title":"CAN based robots"},{"location":"icub_firmware/associated-firmware/associated-firmware/#can-networks","text":"The iCub 1.0.0 four can bus network are used (ids range from 0 to 3) 0 head network, device pcan 1 left arm network, device pcan 2 right arm network, device pcan 3 legs network, device pcan On iCub 1.1.0 two ecan devices are added to the existing pcans. 0 head network, device pcan 1 left arm network, device pcan 2 right arm network, device pcan 3 legs network, device pcan left hand: device ecan, variable id right hand: device ecan, variable id On iCub 1.2.0 the cfw2can board is used (ids range from 0 to 8). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand skin network, device cfw2can 8 right hand skin network, device cfw2can On iCub 1.3.0 the cfw2can board is used (ids range from 0 to 8). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand and forearm skin network, device cfw2can 8 right hand and forearm skin network, device cfw2can On iCub 1.3.1 the Head V2.0 is installed on a 1.3.0 robot. On iCub 2 the cfw2can board is used (ids range from 0 to 9). 0 head network, device cfw2can 1 left arm network, device cfw2can 2 right arm network, device cfw2can 3 left leg network, device cfw2can 4 right leg network, device cfw2can 5 left hand, device cfw2can 6 right hand, device cfw2can 7 left hand, forearm and upperarm skin network, device cfw2can 8 right hand forearm and upperarm skin network, device cfw2can 9 torso skin network, device cfw2can","title":"CAN Networks"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v10","text":"We here describe the CAN-bus networks structure of the iCub v1.0. The version 1.0 uses the CFW board which has 4 canbus lines. This version of iCub is no more supported. Firmware versions marked in red have been removed from the main repository. can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm pcan-2 icub_right_arm.ini right_arm pcan-3 icub_legs_leg.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) Details on the control boards connected to each network are given below.","title":"iCub V1.0"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan0-head-and-torso","text":"","title":"PCAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan1-left-arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -> 1 (pcan) 1 2BLL.1.50.out.S 1B1 -> 1 (pcan) 2 2BLL.1.53.out.S 1B2 -> 1 (pcan) 3 (4) 4DC.1.19.out.S 1B3 -> 1 (pcan) 5 (6) 4DC.1.18.out.S 1B4 -> 1 (pcan) 7 (8) 4DC.1.20.out.S","title":"PCAN1: Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan2-right-arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -> 2 (pcan) 1 2BLL.1.50.out.S 2B1 -> 2 (pcan) 2 2BLL.1.53.out.S 2B2 -> 2 (pcan) 3 (4) 4DC.1.19.out.S 2B3 -> 2 (pcan) 5 (6) 4DC.1.18.out.S 2B4 -> 2 (pcan) 7 (8) 4DC.1.20.out.S","title":"PCAN2: Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan3-legs","text":"boardLabel canDeviceNum boardId firmware 3B5 -> 3 (pcan) 5 2BLL.1.51.out.S 3B6 -> 3 (pcan) 6 2BLL.1.51.out.S 3B7 -> 3 (pcan) 7 2BLL.1.51.out.S 3B8 -> 3 (pcan) 8 2BLL.1.51.out.S 3B9 -> 3 (pcan) 9 2BLL.1.51.out.S 3B10 -> 3 (pcan) 10 2BLL.1.51.out.S","title":"PCAN3: Legs"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v110","text":"We here describe the CAN-bus networks structure of the iCub v1.1. The version 1.1 uses the CFW board which has 4 canbus lines and 2 esd-can device. Overall we have 6 canbus lines: 4 pcan and 2 ecan. Additionaly, the robot is equipped with MAIS and STRAIN analog sensors. can-bus network configuration file associated robot part pcan-0 icub_head_torso.ini head (entries 0 to 5) and torso (entries 6 to 8) pcan-1 icub_left_arm.ini left_arm (joints 0 to 7) pcan-2 icub_right_arm.ini right_arm (joints 0 to 7) pcan-3 icub_legs.ini left_leg (entries 0 to 5) and right_leg (entries 6 to 11) ecan-0 or ecan-1 icub_left_hand.ini left_arm (joints 8 to 15) ecan-0 or ecan-1 icub_right_hand.ini right_arm (joints 8 to 15) Details on the control boards connected to each network are given below.","title":"iCub V1.1.0"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan0-head-and-torso_1","text":"","title":"PCAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_1","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_1","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan1-left-arm_1","text":"boardLabel canDeviceNum boardId firmware 1B0 -> 1 (pcan) 1 2BLL.1.50.out.S 1B1 -> 1 (pcan) 2 2BLL.1.57.out.S 1B2 -> 1 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -> 1 (pcan) 12 - - - Strain -> 1 (pcan) 13 strain.hex","title":"PCAN1: Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#ecan1-left-hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -> 1 (ecan) 5 (6) 4DC.1.28.out.S 1B4 -> 1 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -> 1 (ecan) 12 - - - MAIS -> 1 (ecan) 14 mais.hex","title":"ECAN1: Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan2-right-arm_1","text":"boardLabel canDeviceNum boardId firmware 2B0 -> 2 (pcan) 1 2BLL.1.50.out.S 2B1 -> 2 (pcan) 2 2BLL.1.57.out.S 2B2 -> 2 (pcan) 3 (4) 4DC.1.19.out.S virtual FT joint sensor -> 2 (pcan) 12 - - - Strain -> 2 (pcan) 13 strain.hex","title":"PCAN2: Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#ecan0-right-hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -> 2 (ecan) 5 (6) 4DC.1.28.out.S 2B4 -> 2 (ecan) 7 (8) 4DC.1.30.out.S virtual FT joint sensor -> 2 (ecan) 12 - - - MAIS -> 2 (ecan) 14 mais.hex","title":"ECAN0: Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#pcan3-legs_1","text":"boardLabel canDeviceNum boardId firmware 3B5 -> 3 (pcan) 5 2BLL.1.51.out.S 3B6 -> 3 (pcan) 6 2BLL.1.51.out.S 3B7 -> 3 (pcan) 7 2BLL.1.51.out.S 3B8 -> 3 (pcan) 8 2BLL.1.51.out.S 3B9 -> 3 (pcan) 9 2BLL.1.51.out.S 3B10 -> 3 (pcan) 10 2BLL.1.51.out.S virtual FT joint sensor (left_leg) -> 3 (pcan) 12 - - - Strain (left_leg) -> 3 (pcan) 13 strain.hex virtual FT joint sensor (right_leg) -> 3 (pcan) 11 - - - Strain (right_leg) -> 3 (pcan) 14 strain.hex","title":"PCAN3: Legs"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v120","text":"We here describe the CAN-bus networks structure of the iCub v1.2.0. The version 1.2.0 uses the CFW2 board which has 10 can-Bus lines available. can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin Details on the control boards connected to each network are given in the following.","title":"iCub v1.2.0"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso","text":"","title":"CFW2CAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_2","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_2","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm","text":"boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex","title":"CFW2CAN1: Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand","text":"boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex","title":"CFW2CAN5: Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm","text":"boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex","title":"CFW2CAN2: Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand","text":"boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex","title":"CFW2CAN6: Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg","text":"boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex","title":"CFW2CAN3: left leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg","text":"boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex","title":"CFW2CAN4: right leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-hand","text":"boardLabel canDeviceNum boardId firmware 1B7 -> 7 (cfw2can) 15 skin.hex","title":"CFW2CAN7: Skin Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-hand","text":"boardLabel canDeviceNum boardId firmware 2B7 -> 8 (cfw2can) 15 skin.hex","title":"CFW2CAN8: Skin Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v130","text":"We here describe the CAN-bus networks structure of the iCub v1.3.0. The version 1.3.0 uses the CFW2 board which has 10 can-Bus lines available. can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso 1 icub_left_arm.ini left_arm (joints 0 to 7) 2 icub_right_arm.ini right_arm (joints 0 to 7) 3 icub_left_leg.ini left_leg 4 icub_right_leg.ini right_leg 5 icub_left_hand.ini left_arm (joints 8 to 15) 6 icub_right_hand.ini right_arm (joints 8 to 15) 7 skinlefthand.ini left_hand skin 8 skinrighthand.ini right_hand skin Details on the control boards connected to each network are given in the following.","title":"iCub v1.3.0"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_1","text":"","title":"CFW2CAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_3","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (pcan) 1 (2) 4DC.1.11.out.S 0B1 -> 0 (pcan) 3 (4) 4DC.1.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_3","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (pcan) 6 2BLL.1.52.out.S 0B4 -> 0 (pcan) 5 2BLL.1.54.out.S","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm_1","text":"boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.1.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.1.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex","title":"CFW2CAN1: Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand_1","text":"boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.1.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex","title":"CFW2CAN5: Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm_1","text":"boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.1.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.1.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.1.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex","title":"CFW2CAN2: Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand_1","text":"boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex","title":"CFW2CAN6: Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg_1","text":"boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.1.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.1.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.1.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex","title":"CFW2CAN3: left leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg_1","text":"boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.1.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.1.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.1.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex","title":"CFW2CAN4: right leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-hand_1","text":"boardLabel canDeviceNum boardId firmware 1B7 (HAND) -> 7 (cfw2can) 14 skin.hex 1B9 (FOREARM UPPER) -> 7 (cfw2can) 13 skin.hex 1B8 (FOREARM LOWER) -> 7 (cfw2can) 12 skin.hex","title":"CFW2CAN7: Skin Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-hand_1","text":"boardLabel canDeviceNum boardId firmware 2B7 (HAND) -> 8 (cfw2can) 14 skin.hex 2B9 (FOREARM UPPER) -> 8 (cfw2can) 13 skin.hex 2B8 (FOREARM LOWER) -> 8 (cfw2can) 12 skin.hex","title":"CFW2CAN8: Skin Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v1x1-x1","text":"We here describe the CAN-bus networks structure of the iCub v1.x.1 ( x>1 ). The version 1.x.1 uses the Head V2. For CAN-bus network different from NET0 refer to relative iCub version can-bus network configuration file associated robot part 0 icub_head_torso.ini head and torso Details on the control boards connected to network 0 are given in the following.","title":"iCub v1.x.1 ( x&gt;1 )"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_2","text":"","title":"CFW2CAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_4","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_4","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.1.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.1.54.out.S","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v2","text":"We here describe the CAN-bus networks structure of the iCub v2","title":"iCub v2"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_3","text":"","title":"CFW2CAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_5","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_5","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -> 0 (cfw2can) 14 6sg.hex","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can1-left-arm_2","text":"boardLabel canDeviceNum boardId firmware 1B0 -> 1 (cfw2can) 1 2BLL.2.50.out.S 1B1 -> 1 (cfw2can) 2 2BLL.2.57.out.S 1B2 -> 1 (cfw2) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -> 1 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 1 (cfw2can) 11 - - - Strain -> 1 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -> 1 (cfw2can) 9 6sg.hex","title":"CFW2CAN1: Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can5-left-hand_2","text":"boardLabel canDeviceNum boardId firmware 1B3 -> 5 (cfw2can) 5 (6) 4DC.2.28.out.S 1B4 -> 5 (cfw2can) 7 (8) 4DC.2.30.out.S MAIS -> 5 (cfw2can) 14 mais.hex","title":"CFW2CAN5: Left hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can2-right-arm_2","text":"boardLabel canDeviceNum boardId firmware 2B0 -> 2 (cfw2can) 1 2BLL.2.50.out.S 2B1 -> 2 (cfw2can) 2 2BLL.2.57.out.S 2B2 -> 2 (cfw2can) 3 (4) 4DC.2.19.out.S virtual FT joint sensor (shoulder) -> 2 (cfw2can) 12 - - - virtual FT joint sensor (wrist) -> 2 (cfw2can) 11 - - - Strain -> 2 (cfw2can) 13 strain.hex 6SG Shoulder (optional) -> 1 (cfw2can) 9 6sg.hex","title":"CFW2CAN2: Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can6-right-hand_2","text":"boardLabel canDeviceNum boardId firmware 2B3 -> 6 (cfw2can) 5 (6) 4DC.1.28.out.S 2B4 -> 6 (cfw2can) 7 (8) 4DC.1.30.out.S MAIS -> 6 (cfw2can) 14 mais.hex","title":"CFW2CAN6: Right hand"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can3-left-leg_2","text":"boardLabel canDeviceNum boardId firmware 3B5 -> 3 (cfw2can) 5 2BLL.2.51.out.S 3B6 -> 3 (cfw2can) 6 2BLL.2.51.out.S 3B7 -> 3 (cfw2can) 7 2BLL.2.51.out.S virtual FT joint sensor -> 3 (cfw2can) 12 - - - Strain -> 3 (cfw2can) 13 strain.hex 6SG Upper Leg (optional) -> 3 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -> 3 (cfw2can) 2 6sg.hex","title":"CFW2CAN3: left leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can4-right-leg_2","text":"boardLabel canDeviceNum boardId firmware 3B8 -> 4 (cfw2can) 8 2BLL.2.51.out.S 3B9 -> 4 (cfw2can) 9 2BLL.2.51.out.S 3B10 -> 4 (cfw2can) 10 2BLL.2.51.out.S virtual FT joint sensor -> 4 (cfw2can) 11 - - - Strain -> 4 (cfw2can) 14 strain.hex 6SG Upper Leg (optional) -> 4 (cfw2can) 1 6sg.hex 6SG Lower Leg (optional) -> 4 (cfw2can) 2 6sg.hex","title":"CFW2CAN4: right leg"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can7-skin-left-arm","text":"boardLabel canDeviceNum boardId firmware 1B7 (HAND) -> 7 (cfw2can) 14 skin.hex 1B8 (LEFT LOWER FOREARM) -> 7 (cfw2can) 12 skin.hex 1B9 (LEFT UPPER FOREARM) -> 7 (cfw2can) 13 skin.hex 1B10 (LEFT UPPER EXTERNAL) -> 7 (cfw2can) 10 skin.hex 1B11 (LEFT UPPER BOTTOM) -> 7 (cfw2can) 11 skin.hex 1B12 (LEFT UPPER INTERNAL) -> 7 (cfw2can) 9 skin.hex 1B13 (LEFT LOWER UPPERARM) -> 7 (cfw2can) 8 skin.hex","title":"CFW2CAN7: Skin Left arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can8-skin-right-arm","text":"boardLabel canDeviceNum boardId firmware 2B7 (HAND) -> 8 (cfw2can) 14 skin.hex 2B8 (LEFT LOWER FOREARM) -> 8 (cfw2can) 12 skin.hex 2B9 (LEFT UPPER FOREARM) -> 8 (cfw2can) 13 skin.hex 2B10 (RIGHT UPPER EXTERNAL) -> 8 (cfw2can) 10 skin.hex 2B11 (RIGHT UPPER BOTTOM) -> 8 (cfw2can) 11 skin.hex 2B12 (RIGHT UPPER INTERNAL) -> 8 (cfw2can) 9 skin.hex 2B13 (RIGHT LOWER UPPERARM) -> 8 (cfw2can) 8 skin.hex","title":"CFW2CAN8: Skin Right arm"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can9-skin-torso","text":"boardLabel canDeviceNum boardId firmware 0B7 -> 9 (cfw2can) 7 skin.hex 0B8 -> 9 (cfw2can) 8 skin.hex 0B9 -> 9 (cfw2can) 9 skin.hex 0B10 -> 9 (cfw2can) 10 skin.hex","title":"CFW2CAN9: Skin Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-v2-talking-head","text":"We here describe the CAN-bus networks structure of the iCub v2 - Talking Head","title":"iCub v2 - Talking Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#cfw2can0-head-and-torso_4","text":"","title":"CFW2CAN0: Head and Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#head_6","text":"boardLabel canDeviceNum boardId firmware 0B0 -> 0 (cfw2can) 1 2BLLDC.1.62.out.S 0B1 -> 0 (cfw2can) 2 (3) 4DC.2.15.out.S 0B7 -> 0 (cfw2can) 7 (8) 4DC.2.15.out.S 0B9 -> 0 (cfw2can) 9 (10) 4DC.1.11.out.S","title":"Head"},{"location":"icub_firmware/associated-firmware/associated-firmware/#torso_6","text":"boardLabel canDeviceNum boardId firmware 0B3 -> 0 (cfw2can) 6 2BLL.2.52.out.S 0B4 -> 0 (cfw2can) 5 2BLL.2.54.out.S 6SG (optional) -> 0 (cfw2can) 14 6sg.hex","title":"Torso"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-25-wiring-32","text":"We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring <= 3.2) IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: left arm joints 0 -> 3 STRAIN 10.0.1.2 EB2 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3 MC4(4DC.2.28.out.S) CAN1:5 MC4(4DC.2.30.out.S) CAN1:7 MAIS(mais.hex) CAN1:14 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 MTB(mtb.hex) CAN2:14 MC: left arm joints 4 -> 11 MAIS left hand SKIN left arm INERTIALS: left arm 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: right arm joints 0 -> 3 STRAIN 10.0.1.4 EB4 (ems.hex) MC4(4DC.2.19.out.S) CAN1:3 MC4(4DC.2.28.out.S) CAN1:5 MC4(4DC.2.30.out.S) CAN1:7 MAIS(mais.hex) CAN1:14 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 MTB(mtb.hex) CAN2:14 MC: right arm joints 4 -> 11 MAIS right hand SKIN right arm INERTIALS: right arm 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 MC: torso joints 0 -> 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: left leg joints 0 -> 3 STRAIN 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 MC: left leg joints 4 -> 5 STRAIN 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN(strain.hex) CAN2:13 MC: right leg joints 0 -> 3 STRAIN 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 MC: right leg joints 4 -> 5 STRAIN 10.0.1.10 EB10 (ems.hex) MTB(mtb.hex) CAN1:1 MTB(mtb.hex) CAN1:2 MTB(mtb.hex) CAN1:3 MTB(mtb.hex) CAN1:4 MTB(mtb.hex) CAN1:5 MTB(mtb.hex) CAN1:6 MTB(mtb.hex) CAN1:7 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 SKIN: left leg INERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB(mtb.hex) CAN1:1 MTB(mtb.hex) CAN1:2 MTB(mtb.hex) CAN1:3 MTB(mtb.hex) CAN1:4 MTB(mtb.hex) CAN1:5 MTB(mtb.hex) CAN1:6 MTB(mtb.hex) CAN1:7 MTB(mtb.hex) CAN2:8 MTB(mtb.hex) CAN2:9 MTB(mtb.hex) CAN2:10 MTB(mtb.hex) CAN2:11 MTB(mtb.hex) CAN2:12 MTB(mtb.hex) CAN2:13 SKIN: right leg INERTIALS: right leg","title":"iCub 2.5 - Wiring &lt;= 3.2"},{"location":"icub_firmware/associated-firmware/associated-firmware/#icub-25-wiring-32_1","text":"We here describe the ETH and CAN-bus firmware association structure of the iCub v2.5 (Wiring > 3.2) IP address Board Name(firmware) Atatched CAN Boards(firmware) Services 10.0.1.1 EB1 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: left arm joints 0 -> 3 STRAIN2 10.0.1.3 EB3 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: right arm joints 0 -> 3 STRAIN2 10.0.1.5 EB5 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 MC: torso joints 0 -> 2 10.0.1.6 EB6 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 0 -> 3 STRAIN2 10.0.1.7 EB7 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 STRAIN2(strain2.hex) CAN2:13 MC: left leg joints 4 -> 5 STRAIN2 10.0.1.8 EB8 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN1:3 2FOC(2foc.hex) CAN1:4 STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 0 -> 3 STRAIN2 10.0.1.9 EB9 (ems.hex) 2FOC(2foc.hex) CAN1:1 2FOC(2foc.hex) CAN1:2 2FOC(2foc.hex) CAN2:1 STRAIN2(strain2.hex) CAN2:13 MC: right leg joints 4 -> 5 STRAIN2 10.0.1.10 EB10 (ems.hex) MTB4(mtb4.hex) CAN1:1 MTB4(mtb4.hex) CAN1:2 MTB4(mtb4.hex) CAN1:3 MTB4(mtb4.hex) CAN1:4 MTB4(mtb4.hex) CAN1:5 MTB4(mtb4.hex) CAN1:6 MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN2:8 MTB4(mtb4.hex) CAN2:9 MTB4(mtb4.hex) CAN2:10 MTB4(mtb4.hex) CAN2:11 MTB4(mtb4.hex) CAN2:12 MTB4(mtb4.hex) CAN2:13 SKIN: left leg INERTIALS: left leg 10.0.1.11 EB11 (ems.hex) MTB4(mtb4.hex) CAN1:1 MTB4(mtb4.hex) CAN1:2 MTB4(mtb4.hex) CAN1:3 MTB4(mtb4.hex) CAN1:4 MTB4(mtb4.hex) CAN1:5 MTB4(mtb4.hex) CAN1:6 MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN2:8 MTB4(mtb4.hex) CAN2:9 MTB4(mtb4.hex) CAN2:10 MTB4(mtb4.hex) CAN2:11 MTB4(mtb4.hex) CAN2:12 MTB4(mtb4.hex) CAN2:13 SKIN: right leg INERTIALS: right leg 10.0.1.20 EB20 (mc4plus.hex) MC4PLUS No CAN boards MC: head joints 0 -> 1 10.0.1.21 EB21 (mc4plus.hex) MC4PLUS RFE(rfe.hex) CAN1:1 MC: head joints 2 -> 5 INERTIALS: head 10.0.1.22 EB22 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:7 MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 SKIN: torso 10.0.1.24 EB24 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 MTB4(mtb4.hex) CAN1:11 MTB4(mtb4.hex) CAN1:12 MTB4(mtb4.hex) CAN1:13 MTB4(mtb4.hex) CAN1:14 MC: left arm joints 4 -> 7 SKIN: left arm 10.0.1.25 EB25 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 8 -> 11 10.0.1.26 EB26 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: left arm joints 12 -> 15 10.0.1.27 EB27 (mc4plus.hex) MC4PLUS MTB4(mtb4.hex) CAN1:8 MTB4(mtb4.hex) CAN1:9 MTB4(mtb4.hex) CAN1:10 MTB4(mtb4.hex) CAN1:11 MTB4(mtb4.hex) CAN1:12 MTB4(mtb4.hex) CAN1:13 MTB4(mtb4.hex) CAN1:14 MC: right arm joints 4 -> 7 SKIN: right arm 10.0.1.28 EB28 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 8 -> 11 10.0.1.29 EB29 (mc4plus.hex) MC4PLUS MAIS(mais.hex) CAN1:14 MC: right arm joints 12 -> 15","title":"iCub 2.5 - Wiring &gt; 3.2"},{"location":"icub_firmware/canLoader/canLoader/","text":"CanLoader \u00b6 Warning Canloader is deprecated since this PR The canLoader application allows to flash the firmware of the dsp boards using the canbus interface. It can be also used to determine which boards are up and running. The canLoader allows to either use plx canbus boards or esd canbus boards (actually any device implementing an ICanBus interface in YARP). Detailed CANLoader protocol . Steps \u00b6 Determine the type of device you want to use. If you are on the pc104 this will probably be the cfw2 device. Make sure you have compiled the appropriate canbus device (pcan,cfw2 or ecan) (read Compilation on the pc104). Make sure the canLoader program has been compiled. In the main iCub project, this is done automatically if you have the gtk/gtkmm libraries. Run the canLoader program. If you ssh into the pc104 make sure you use the -X option to redirect the graphic output to your local machine. Select the device you use (cfw2/pcan/ecan) in the text box (for historical reason default is ecan). Select the can network you want to probe (0 to 9), and hit connect. See below for a list of the can networks. You should see a list of boards that are available in the network you have selected, their id, the version of the firmware, the build number and a text description. If a card is listed here it means that it was able to reply to the broadcast message from the canLoader (a good start). Device Type \u00b6 The device type is the software module that wraps the can bus device you are using. On the first version of iCub the pc104 has a plx can bus device, wrapped by the pcan software module. On iCub 1.1 the pc104 also mounts two esd can bus devices, which are wrapped by the ecan software module. In this case the device module you use depends on - The can bus network (or body part) your want to access. On iCub 1.1.1 (and later) the pc104 mounts up to 9 can bus devices, which are wrapped by the cfw2 software module. Standard firmware update (DSP) \u00b6 The firmware upgrade of the whole robot is performed using a script based on a command line version of the CanLoader module. Before you try to use this script please check that this module is compiled on the pc104. You should also make sure that the hardware modules it needs (controlboard, canmotioncontrol, ecan/pcan/cfw2can) are compiled and liked correctly (this is usually the case on the robot pc104). Please notice that the firmware upgrade is delicate procedure which changes one of the core parts of the iCub robot software (and therefore requires a corresponding update of the yarp and iCub modules). If you decide to perform a firmware upgrade, be aware that this might change the robot motor behaviour quite a lot. Nevertheless, a firmware upgrade is always recommended because it usually corresponds to improvements in the control board performances. Finally, remember to perform the firmware update with your robot in a 'clean' state (i.e. control boards have been just turned on, and iCubinterface has not run yet). Here are the steps to perform the firmware update: Connect to the PC104. Go to the $ICUB_ROOT directory and update it (svn update or git pull, depending on your installation) Go to the $ICUB_DIR directoy and recompile the icub-main repository If the icub-firmware-build directory does not exists, create it with: git clone robotology/icub-firmware-build If it already exists, update it with git pull. Launch the firmware update script (icub-firmware-build/updateRobot.sh): The script will automatically retrieve the robot configuration from the firmwareUpdate.txt file which is located in the robot configuration folder. When the updateRobot.sh script terminates, a brief report about the firmware update operation is shown on the screen. If all the listed boards have the \"ALL OK\" tag, then the update was successful. If one or more boards show errors, you can use the CanLoader application in order to check what went wrong, and retry to download the firmware on that particular boards. The CanLoader GUI allows you to check if all the boards have the updated firmware: simply compare the Build number with the most recent build number reported by the ChangeLog file (icub-firmware/motorControllerDsp56f807/2BLL/ChangeLog for the type=RM BLL(DSP) boards and icub-firmware/motorControllerDsp56f807/4DC/ChangeLog for the type=RM 4DC(DSP) boards). Automatic update of the full robot with the FirmwareUpdater program will soon be possible. For some preliminary details see section (2) of document https://github.com/robotology/icub-firmware-build/blob/master/docs/FirmwareUpdater.readme.fulldetails.txt . Advanced firmware update (DSP) \u00b6 Alternatively to the complete firmware upgrade procedure described above, you can also create your own custom script which update just a part of the robot, for example: icub@pc104:ICUB_ROOT/firmware/build$ ./updateRobot.sh updateLegs.txt The .txt file simply contains a list of board addresses and associated firmware files with the following structure: [canModule] [canDeviceNum] [boardId] [firmware] where: canModule can be either pcan (if you are using the PLX custom board) or ecan (if you are using the commercial usb to can interface produced by ESD ) or cfw2can (if you are using the custom CFW2 board). canDeviceNum is the CAN line identifier (i.e: 0 for the head, 1 for the left arm, 2 for the right arm, etc..) boardID is the board address (0...14) on the selected CAN line. firmware is the firmware binary file (*.s for motorola-based boards, *.hex for DSPIC-based board) Firmware update (Force/Torque Sensors) \u00b6 In this section is described the procedure to update the firmware of the F/T sensors . iCub (version >=1.1) is equipped with four F/T sensors , one for each limb, connected to the CanBus. For a complete reference of the used CAN bus addresses please refer to: list of the CAN bus addresses Procedure for updating the firmware of the F/T Sensors \u00b6 The update of the F/T sensors firmware is performed using the CanLoader module. The procedure is identical to the standard procedure used to update the firmware of a single DSP board: open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex). click 'Start Download'. Note: A command-line procedure is also provided. To update the firmware, run the following command: canLoader20 --canDeviceType --canDeviceNum --boardId --firmware where: parameter is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter is the number of the CAN bus (0-9) parameter is the CAN address of the F/T sensor (0-15) parameter is the firmware binary file (e.g. strain.hex) Reset of the F/T Sensors \u00b6 Note: This procedure completely erases both the flash and the eeprom of the F/T Sensor. You will have to download again the calibration data in the sensor after performing the reset of the F/T sensor. It's most likely that you DO NOT have to follow this procedure, unless some serious problem occurred. Even if you downloaded a wrong firmware file in the F/T sensors, only the standard procedure described above is needed to update it. The procedure to reset a F/T Sensor is the following: open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). check the eeprom box on the right. select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex). click 'Start Download'. After the completion of the firmware download: reboot the F/T sensor (remove the power supply, restart the sensor, reconnect the Can Loader GUI, waiting for the boot time (10 seconds). after the reset, the CAN address of the sensor will be changed to 15. Change it by clicking on the number in the Can Loader GUI. The new address is automatically saved in the sensor eeprom. download a the correspoding sensor calibration data. Note: Remember: do not erase the F/T sensor eeprom, unless you are really sure what you are going to do or you were instructed to do so. Import of the calibration data \u00b6 This procedure is used to download the calibration data in the F/T sensors eeprom. Since iCub mounts calibrated F/T sensors, you don't need to follow this procedure, unless you intentionally erased the sensor eeprom. (even if you flash a new firmware update, you do not need to redownload the calibration data because they are kept in eeprom memory) The procedure to import the calibration data is identical to the standard firmware update, just select a calibration file (calibrationDataSN*.dat) instead of a firmware file (strain.hex). open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). select the calibration file from the file selector on the right (default location: iCub\\app\\ \\conf\\calibration\\ftSensor\\ \\calibrationDataSN*.dat). click 'Start Download'. The software automatically distinguish a calibration data file from a firmware binary file. The calibration data are automatically saved in the eeprom. Note: A command-line procedure is also provided. To update the firmware, run the following command: canLoader20 --canDeviceType <t> --canDeviceNum <x> --boardId <y> --calibration <f> where: parameter is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter is the number of the CAN bus (0-9) parameter is the CAN address of the F/T sensor (0-15) parameter is the calibration data file (e.g calibrationDataSN020.dat)","title":"CanLoader"},{"location":"icub_firmware/canLoader/canLoader/#canloader","text":"Warning Canloader is deprecated since this PR The canLoader application allows to flash the firmware of the dsp boards using the canbus interface. It can be also used to determine which boards are up and running. The canLoader allows to either use plx canbus boards or esd canbus boards (actually any device implementing an ICanBus interface in YARP). Detailed CANLoader protocol .","title":"CanLoader"},{"location":"icub_firmware/canLoader/canLoader/#steps","text":"Determine the type of device you want to use. If you are on the pc104 this will probably be the cfw2 device. Make sure you have compiled the appropriate canbus device (pcan,cfw2 or ecan) (read Compilation on the pc104). Make sure the canLoader program has been compiled. In the main iCub project, this is done automatically if you have the gtk/gtkmm libraries. Run the canLoader program. If you ssh into the pc104 make sure you use the -X option to redirect the graphic output to your local machine. Select the device you use (cfw2/pcan/ecan) in the text box (for historical reason default is ecan). Select the can network you want to probe (0 to 9), and hit connect. See below for a list of the can networks. You should see a list of boards that are available in the network you have selected, their id, the version of the firmware, the build number and a text description. If a card is listed here it means that it was able to reply to the broadcast message from the canLoader (a good start).","title":"Steps"},{"location":"icub_firmware/canLoader/canLoader/#device-type","text":"The device type is the software module that wraps the can bus device you are using. On the first version of iCub the pc104 has a plx can bus device, wrapped by the pcan software module. On iCub 1.1 the pc104 also mounts two esd can bus devices, which are wrapped by the ecan software module. In this case the device module you use depends on - The can bus network (or body part) your want to access. On iCub 1.1.1 (and later) the pc104 mounts up to 9 can bus devices, which are wrapped by the cfw2 software module.","title":"Device Type"},{"location":"icub_firmware/canLoader/canLoader/#standard-firmware-update-dsp","text":"The firmware upgrade of the whole robot is performed using a script based on a command line version of the CanLoader module. Before you try to use this script please check that this module is compiled on the pc104. You should also make sure that the hardware modules it needs (controlboard, canmotioncontrol, ecan/pcan/cfw2can) are compiled and liked correctly (this is usually the case on the robot pc104). Please notice that the firmware upgrade is delicate procedure which changes one of the core parts of the iCub robot software (and therefore requires a corresponding update of the yarp and iCub modules). If you decide to perform a firmware upgrade, be aware that this might change the robot motor behaviour quite a lot. Nevertheless, a firmware upgrade is always recommended because it usually corresponds to improvements in the control board performances. Finally, remember to perform the firmware update with your robot in a 'clean' state (i.e. control boards have been just turned on, and iCubinterface has not run yet). Here are the steps to perform the firmware update: Connect to the PC104. Go to the $ICUB_ROOT directory and update it (svn update or git pull, depending on your installation) Go to the $ICUB_DIR directoy and recompile the icub-main repository If the icub-firmware-build directory does not exists, create it with: git clone robotology/icub-firmware-build If it already exists, update it with git pull. Launch the firmware update script (icub-firmware-build/updateRobot.sh): The script will automatically retrieve the robot configuration from the firmwareUpdate.txt file which is located in the robot configuration folder. When the updateRobot.sh script terminates, a brief report about the firmware update operation is shown on the screen. If all the listed boards have the \"ALL OK\" tag, then the update was successful. If one or more boards show errors, you can use the CanLoader application in order to check what went wrong, and retry to download the firmware on that particular boards. The CanLoader GUI allows you to check if all the boards have the updated firmware: simply compare the Build number with the most recent build number reported by the ChangeLog file (icub-firmware/motorControllerDsp56f807/2BLL/ChangeLog for the type=RM BLL(DSP) boards and icub-firmware/motorControllerDsp56f807/4DC/ChangeLog for the type=RM 4DC(DSP) boards). Automatic update of the full robot with the FirmwareUpdater program will soon be possible. For some preliminary details see section (2) of document https://github.com/robotology/icub-firmware-build/blob/master/docs/FirmwareUpdater.readme.fulldetails.txt .","title":"Standard firmware update (DSP)"},{"location":"icub_firmware/canLoader/canLoader/#advanced-firmware-update-dsp","text":"Alternatively to the complete firmware upgrade procedure described above, you can also create your own custom script which update just a part of the robot, for example: icub@pc104:ICUB_ROOT/firmware/build$ ./updateRobot.sh updateLegs.txt The .txt file simply contains a list of board addresses and associated firmware files with the following structure: [canModule] [canDeviceNum] [boardId] [firmware] where: canModule can be either pcan (if you are using the PLX custom board) or ecan (if you are using the commercial usb to can interface produced by ESD ) or cfw2can (if you are using the custom CFW2 board). canDeviceNum is the CAN line identifier (i.e: 0 for the head, 1 for the left arm, 2 for the right arm, etc..) boardID is the board address (0...14) on the selected CAN line. firmware is the firmware binary file (*.s for motorola-based boards, *.hex for DSPIC-based board)","title":"Advanced firmware update (DSP)"},{"location":"icub_firmware/canLoader/canLoader/#firmware-update-forcetorque-sensors","text":"In this section is described the procedure to update the firmware of the F/T sensors . iCub (version >=1.1) is equipped with four F/T sensors , one for each limb, connected to the CanBus. For a complete reference of the used CAN bus addresses please refer to: list of the CAN bus addresses","title":"Firmware update (Force/Torque Sensors)"},{"location":"icub_firmware/canLoader/canLoader/#procedure-for-updating-the-firmware-of-the-ft-sensors","text":"The update of the F/T sensors firmware is performed using the CanLoader module. The procedure is identical to the standard procedure used to update the firmware of a single DSP board: open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex). click 'Start Download'. Note: A command-line procedure is also provided. To update the firmware, run the following command: canLoader20 --canDeviceType --canDeviceNum --boardId --firmware where: parameter is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter is the number of the CAN bus (0-9) parameter is the CAN address of the F/T sensor (0-15) parameter is the firmware binary file (e.g. strain.hex)","title":"Procedure for updating the firmware of the F/T Sensors"},{"location":"icub_firmware/canLoader/canLoader/#reset-of-the-ft-sensors","text":"Note: This procedure completely erases both the flash and the eeprom of the F/T Sensor. You will have to download again the calibration data in the sensor after performing the reset of the F/T sensor. It's most likely that you DO NOT have to follow this procedure, unless some serious problem occurred. Even if you downloaded a wrong firmware file in the F/T sensors, only the standard procedure described above is needed to update it. The procedure to reset a F/T Sensor is the following: open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). check the eeprom box on the right. select the firmware file from the file selector on the right (default location: iCub\\src\\firmware\\build\\strain.hex). click 'Start Download'. After the completion of the firmware download: reboot the F/T sensor (remove the power supply, restart the sensor, reconnect the Can Loader GUI, waiting for the boot time (10 seconds). after the reset, the CAN address of the sensor will be changed to 15. Change it by clicking on the number in the Can Loader GUI. The new address is automatically saved in the sensor eeprom. download a the correspoding sensor calibration data. Note: Remember: do not erase the F/T sensor eeprom, unless you are really sure what you are going to do or you were instructed to do so.","title":"Reset of the F/T Sensors"},{"location":"icub_firmware/canLoader/canLoader/#import-of-the-calibration-data","text":"This procedure is used to download the calibration data in the F/T sensors eeprom. Since iCub mounts calibrated F/T sensors, you don't need to follow this procedure, unless you intentionally erased the sensor eeprom. (even if you flash a new firmware update, you do not need to redownload the calibration data because they are kept in eeprom memory) The procedure to import the calibration data is identical to the standard firmware update, just select a calibration file (calibrationDataSN*.dat) instead of a firmware file (strain.hex). open the CanLoader GUI. select the can bus number and the can bus device driver from the menus and click 'Connect'. select the F/T sensor (click on the checkbox on the left). select the calibration file from the file selector on the right (default location: iCub\\app\\ \\conf\\calibration\\ftSensor\\ \\calibrationDataSN*.dat). click 'Start Download'. The software automatically distinguish a calibration data file from a firmware binary file. The calibration data are automatically saved in the eeprom. Note: A command-line procedure is also provided. To update the firmware, run the following command: canLoader20 --canDeviceType <t> --canDeviceNum <x> --boardId <y> --calibration <f> where: parameter is the name of the CAN bus driver. It can be ecan or pcan or cfw2can parameter is the number of the CAN bus (0-9) parameter is the CAN address of the F/T sensor (0-15) parameter is the calibration data file (e.g calibrationDataSN020.dat)","title":"Import of the calibration data"},{"location":"icub_firmware/firmware/firmware/","text":"Firmware Documentation \u00b6 Here you can find informations about updating firmware, changing boards properties and firmware revisions in the various versions of the robot. FirmwareUpdater \u00b6 With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots; the commonly used functionalities are: Upload application firmware both on ETH boards and CAN boards Change the IP addrress for ethernet based boards Change the CAN ID for the CAN based boards Update the bootloader (advanced option) Access to the F/T sensors calibration data of the STTRAIN / STRAIN2 Firmware tools \u00b6 With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots. Here you can find quick and detailed instructions. Operations on STRAIN with the FirmwareUpdater \u00b6 The operations on the STRAIN boards described in the above sections can be performed also using the new FirmwareUpdater program. With reference to Figure 2 inside this document you can do as follows. Upload a new FW using the button Upload Application . See also section 6 . Tick the button Erase STRAIN EEPROM and then upload the new FW if you also want to reset the F/T Sensors. Launch the STRAIN Calibration GUI with the button Calibrate STRAIN if you want to import a calibration data file. Firmware versions \u00b6 A complete description of the different firmware versions used by the DSP boards which control the iCub robot can be found here Automatic update of the robot \u00b6 The user can also decide to perform the automatic update of the complete robot (or of some of its parts). Inside folder scripts of repository there are some examples. The user can: retrieve info with scripts/FirmwareUpdater.script.info.all.sh, query the robot with scripts/FirmwareUpdater.script.verify.all.sh. This command also gives an estimate of the time required to perform the firmware update of the boards with old versions. update the firmware of all boards with old versions with scripts/FirmwareUpdater.script.update.all.sh The topology of the robot \u00b6 The robot network is described by the file network.{$YARP_ROBOT_NAME}.xml available for most robots in the repository . In case you cannot find this file, please ask for one here In its inside there is thelist of all boards with their name, drive, address and link relations. You can view some of this information with: scripts/FirmwareUpdater.script.info.all.sh: it prints the list of all boards with all details scripts/FirmwareUpdater.script.topology.all.sh: it prints the list of all ETH boards in link order. Advanced operations \u00b6 The user can also launch FirmwareUpdater in administration mode to perform advance (but also potentially destructive) operations: change IP or CAN address, change bootstrap mode of boards, upload special system processes which helps maintenance and execution of the application, management of strain and strain2 boards. For how to operate in this mode please refer to this . Robot Versions and Firmware \u00b6 Below you'll find a detailed description of the various robot versions, in particular for the board type- id or ip address - firmware associations. and the services offered by each board. Usefull Resources \u00b6 Below a list of usefull links : Low-level boards programming (using degugger/programmer) Firmware sources Firmware binaries FirmwareUpdater sources CanLoader Tool (deprecated) \u00b6 In the past the tool used to deal with firmware update operations was the CanLoader tool that has been removed since this PR","title":"Firmware Documentation"},{"location":"icub_firmware/firmware/firmware/#firmware-documentation","text":"Here you can find informations about updating firmware, changing boards properties and firmware revisions in the various versions of the robot.","title":"Firmware Documentation"},{"location":"icub_firmware/firmware/firmware/#firmwareupdater","text":"With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots; the commonly used functionalities are: Upload application firmware both on ETH boards and CAN boards Change the IP addrress for ethernet based boards Change the CAN ID for the CAN based boards Update the bootloader (advanced option) Access to the F/T sensors calibration data of the STTRAIN / STRAIN2","title":"FirmwareUpdater"},{"location":"icub_firmware/firmware/firmware/#firmware-tools","text":"With the FirmwareUpdater application it is possible to perform GUI-based FW update on both CAN- and ETH-based robots. Here you can find quick and detailed instructions.","title":"Firmware tools"},{"location":"icub_firmware/firmware/firmware/#operations-on-strain-with-the-firmwareupdater","text":"The operations on the STRAIN boards described in the above sections can be performed also using the new FirmwareUpdater program. With reference to Figure 2 inside this document you can do as follows. Upload a new FW using the button Upload Application . See also section 6 . Tick the button Erase STRAIN EEPROM and then upload the new FW if you also want to reset the F/T Sensors. Launch the STRAIN Calibration GUI with the button Calibrate STRAIN if you want to import a calibration data file.","title":"Operations on STRAIN with the FirmwareUpdater"},{"location":"icub_firmware/firmware/firmware/#firmware-versions","text":"A complete description of the different firmware versions used by the DSP boards which control the iCub robot can be found here","title":"Firmware versions"},{"location":"icub_firmware/firmware/firmware/#automatic-update-of-the-robot","text":"The user can also decide to perform the automatic update of the complete robot (or of some of its parts). Inside folder scripts of repository there are some examples. The user can: retrieve info with scripts/FirmwareUpdater.script.info.all.sh, query the robot with scripts/FirmwareUpdater.script.verify.all.sh. This command also gives an estimate of the time required to perform the firmware update of the boards with old versions. update the firmware of all boards with old versions with scripts/FirmwareUpdater.script.update.all.sh","title":"Automatic update of the robot"},{"location":"icub_firmware/firmware/firmware/#the-topology-of-the-robot","text":"The robot network is described by the file network.{$YARP_ROBOT_NAME}.xml available for most robots in the repository . In case you cannot find this file, please ask for one here In its inside there is thelist of all boards with their name, drive, address and link relations. You can view some of this information with: scripts/FirmwareUpdater.script.info.all.sh: it prints the list of all boards with all details scripts/FirmwareUpdater.script.topology.all.sh: it prints the list of all ETH boards in link order.","title":"The topology of the robot"},{"location":"icub_firmware/firmware/firmware/#advanced-operations","text":"The user can also launch FirmwareUpdater in administration mode to perform advance (but also potentially destructive) operations: change IP or CAN address, change bootstrap mode of boards, upload special system processes which helps maintenance and execution of the application, management of strain and strain2 boards. For how to operate in this mode please refer to this .","title":"Advanced operations"},{"location":"icub_firmware/firmware/firmware/#robot-versions-and-firmware","text":"Below you'll find a detailed description of the various robot versions, in particular for the board type- id or ip address - firmware associations. and the services offered by each board.","title":"Robot Versions and Firmware"},{"location":"icub_firmware/firmware/firmware/#usefull-resources","text":"Below a list of usefull links : Low-level boards programming (using degugger/programmer) Firmware sources Firmware binaries FirmwareUpdater sources","title":"Usefull Resources"},{"location":"icub_firmware/firmware/firmware/#canloader-tool-deprecated","text":"In the past the tool used to deal with firmware update operations was the CanLoader tool that has been removed since this PR","title":"CanLoader Tool (deprecated)"},{"location":"icub_firmware/ft-sensors/ft-sensors/","text":"F/T Sensors \u00b6 The F/T sensor (6-dof) has also been specially designed to fit the iCub. However, the size of the sensor has been made compatible with an existing commercial product. On the other hand the signal conditioning electronics has been made to fit the sensor itself, consequently reducing the space required. The F/T sensor is based on a classical Wheatstone bridge design employing 12 semiconductor strain gauges arranged in a 6 half-bridges configuration.ed robots Mechanical specifications \u00b6 Physical specifications \u00b6 The physical specifications of the sensor are reported in Table 1: Weight 0.122[kg] Diameter 45[mm] Height 18.4[mm] Table 1: Physical specifications of the sensor Measurement frame specifications \u00b6 he F/T sensor reference frame. Please notice that key elements to localize the reference frame on the sensor are two: (1) the hole where the CAN exits the sensor and (2) the thick VS the thin sensor cover. The sensor is calibrated to measure the Force/Torque applied by the upper (blue) part of the sensor on the lower (red) part of sensor, and express it on the F/T sensor reference frame. Calibration specifications \u00b6 The sensors are calibrated in order to obtain high resolution in typical operating regions. Typical values of the range and resolution for a sensor after the calibration procedure are reported in Table 2. The resolution is typical for most applications and can be improved with filtering. Resolutions quoted are the effective resolution after dropping three counts of noise. Fx, Fy [N] Fz [N] Tx, Ty [Nm] Tz [Nm] Range 2000 2000 40 30 Resolution 0.25 0.25 0.0049 0.0037 Table 2: typical values after sensor calibration Creo CAD model \u00b6 The CAD model of FTSens is available in the hardware repository of the icub-tech-iit organization on GitHub . In particular the FT sensor assembly name is ic_008_a_001.asm.1 . Additional info \u00b6 Additional specification are reported in this document . For more info on how to load the firmware and the calibration matrix on a FT sensor, check the documentation page on Firmware . Electronics \u00b6 There are three versions of the electronic board of the iCub's FT sensor: STRAIN (also known as STRAIN1), STRAIN1.5 or STRAIN2. All this electronic boards sample the analog strain gauges voltages, and expose the measurements over a CAN interface. Low-level documentation and materials about the STRAIN2 board is available here . Firmware source code: STRAIN STRAIN2 FT45 and FT58 Assembly Variants (Mechanics + Electronics) \u00b6 IITCODE ALIAS REV Description Note 12487 12487 (da cambiare) - FT45 M4 cod. 12191 - IC_008_A_001 + STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0 Strain-gauge code missing 12491 FT45_M1_E2 - FT45 M1 cod. ? - STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0 Mech. assembly (with strain-gauge code) missing 12031 FT45_M1_E1.5 - iCub, assembly - Force/Torque sensor (5x gain), with mechanical parts, strain-gauge, strain board and cabling 12621 FT58_M2_E2 - FT58 M2 cod. 12176.A1 - IC_005_A_001 + STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0 FT45 Mechanical variants \u00b6 FTSENSOR45A IC_001_A_001_ftsensor45 IC_007_A_001 IC_008_A_001 informal name FT45 FT45 v.2 (a.ka. Diego's sensor) - - variant id FT45_M1 FT45_M2 FT45_M3 FT45_M4 first mechanical structure YES NO YES NO second mechanical structure * NO YES NO YES central through hole ** NO NO YES YES obsolete YES YES YES NO * no countersunk screw, with pin assembly ** requires STRAIN2 board FT58 variants \u00b6 ICUB3_005_A_001_ftsensor58 IC_005_A_001 informal name FT58_M1 FT58_M2 variant id FT58_M1 FT58_M2 central through hole ** NO YES ** requires STRAIN2 board FT58 assembly \u00b6 The FT58 sensor is assembled as described hereafter. The assembly of the sensor is a 6 step process: the top part, the sensor part and the bottom part are screwed together the pin holes are enalrged with the proper bore tool the sensor part is gaged the sensor is assembled and wired with the electronic board the three sensor parts are screwed together: the sensor is closed if needed pins are added with the proper strain relieving tool For further details on the assembly refer to the component drawing in the repository folder . The drawing code is depends on the sensor to be assebled (refer to the table in the above section for the code). The top interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm. The bottom interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm. FT58 assembly on iCub3 \u00b6 The FT58 sensor is assembled on iCub3 as represented in th following pictures. The top interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm. The bottom interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm. FT Sensor Electronics Variants \u00b6 There are three cards for reading six axis F/T Sensors: Name IIT Code and .Revision Description Status Compatible with Mechanical variant STRAIN1 832.B STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability end of life FT45_M1,FT45_M2,FT58_M1 STRAIN1.5 832.F STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability, 5X gain end of life FT45_M1,FT45_M2,FT58_M1 STRAIN2 11996.B STRAIN2, IIT - Electronic board, 6 channels strain gauges variable gain interface board with CAN/UART, Temperature sensor, IMU, STM32L4 in production FT45_M1*,FT45_M2*,FT58_M1* FT45_M3**,FT45_M4**,FT58_M2** * if breaking the legs ** if removing the central ring Cable connections \u00b6 STRAIN \u00b6 STRAIN2 \u00b6 Summarized usable codes \u00b6 short description Asm. cod. Wingst Rev. Dwg. Micron Istrumnents code status FTSensor 45 - Strain 1 (mech 1) FTSENSOR45A 3407 A2 150923 only maintenance FTSensor 45 - Strain 1 (mech 2) IC_001_A_001_ftsensor45 not present 0 150923 OBSOLETE FTSensor 45 - Strain 2 (mech 3) IC_007_A_001 12183 A2 151245 OBSOLETE FTSensor 45 - Strain 2 (mech 4) IC_008_A_001 12191 A1 151245 ACTIVE FTSensor 58 - Strain 1 ICUB3_005_A_001_ftsensor58 10308 A1 151351 OBSOLETE FTSensor 58 - Strain 2 IC_005_A_001 12176 A1 151351 ACTIVE Additional material \u00b6 FT45 - without Temp. Compensation FT45 - Temp. Compensation included FT45 - Temp. Compensation included 2 FT58 - without Temp. Compensation FT58 - Temp. Compensation included More information \u00b6 F/T sensors are mounted by Micron Instruments","title":"F/T Sensors"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft-sensors","text":"The F/T sensor (6-dof) has also been specially designed to fit the iCub. However, the size of the sensor has been made compatible with an existing commercial product. On the other hand the signal conditioning electronics has been made to fit the sensor itself, consequently reducing the space required. The F/T sensor is based on a classical Wheatstone bridge design employing 12 semiconductor strain gauges arranged in a 6 half-bridges configuration.ed robots","title":"F/T Sensors"},{"location":"icub_firmware/ft-sensors/ft-sensors/#mechanical-specifications","text":"","title":"Mechanical specifications"},{"location":"icub_firmware/ft-sensors/ft-sensors/#physical-specifications","text":"The physical specifications of the sensor are reported in Table 1: Weight 0.122[kg] Diameter 45[mm] Height 18.4[mm] Table 1: Physical specifications of the sensor","title":"Physical specifications"},{"location":"icub_firmware/ft-sensors/ft-sensors/#measurement-frame-specifications","text":"he F/T sensor reference frame. Please notice that key elements to localize the reference frame on the sensor are two: (1) the hole where the CAN exits the sensor and (2) the thick VS the thin sensor cover. The sensor is calibrated to measure the Force/Torque applied by the upper (blue) part of the sensor on the lower (red) part of sensor, and express it on the F/T sensor reference frame.","title":"Measurement frame specifications"},{"location":"icub_firmware/ft-sensors/ft-sensors/#calibration-specifications","text":"The sensors are calibrated in order to obtain high resolution in typical operating regions. Typical values of the range and resolution for a sensor after the calibration procedure are reported in Table 2. The resolution is typical for most applications and can be improved with filtering. Resolutions quoted are the effective resolution after dropping three counts of noise. Fx, Fy [N] Fz [N] Tx, Ty [Nm] Tz [Nm] Range 2000 2000 40 30 Resolution 0.25 0.25 0.0049 0.0037 Table 2: typical values after sensor calibration","title":"Calibration specifications"},{"location":"icub_firmware/ft-sensors/ft-sensors/#creo-cad-model","text":"The CAD model of FTSens is available in the hardware repository of the icub-tech-iit organization on GitHub . In particular the FT sensor assembly name is ic_008_a_001.asm.1 .","title":"Creo CAD model"},{"location":"icub_firmware/ft-sensors/ft-sensors/#additional-info","text":"Additional specification are reported in this document . For more info on how to load the firmware and the calibration matrix on a FT sensor, check the documentation page on Firmware .","title":"Additional info"},{"location":"icub_firmware/ft-sensors/ft-sensors/#electronics","text":"There are three versions of the electronic board of the iCub's FT sensor: STRAIN (also known as STRAIN1), STRAIN1.5 or STRAIN2. All this electronic boards sample the analog strain gauges voltages, and expose the measurements over a CAN interface. Low-level documentation and materials about the STRAIN2 board is available here . Firmware source code: STRAIN STRAIN2","title":"Electronics"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft45-and-ft58-assembly-variants-mechanics-electronics","text":"IITCODE ALIAS REV Description Note 12487 12487 (da cambiare) - FT45 M4 cod. 12191 - IC_008_A_001 + STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0 Strain-gauge code missing 12491 FT45_M1_E2 - FT45 M1 cod. ? - STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0 Mech. assembly (with strain-gauge code) missing 12031 FT45_M1_E1.5 - iCub, assembly - Force/Torque sensor (5x gain), with mechanical parts, strain-gauge, strain board and cabling 12621 FT58_M2_E2 - FT58 M2 cod. 12176.A1 - IC_005_A_001 + STRAIN2 cod. 11996.B + Wiring materials cod. 12478.0.0","title":"FT45 and FT58 Assembly Variants (Mechanics + Electronics)"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft45-mechanical-variants","text":"FTSENSOR45A IC_001_A_001_ftsensor45 IC_007_A_001 IC_008_A_001 informal name FT45 FT45 v.2 (a.ka. Diego's sensor) - - variant id FT45_M1 FT45_M2 FT45_M3 FT45_M4 first mechanical structure YES NO YES NO second mechanical structure * NO YES NO YES central through hole ** NO NO YES YES obsolete YES YES YES NO * no countersunk screw, with pin assembly ** requires STRAIN2 board","title":"FT45 Mechanical variants"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft58-variants","text":"ICUB3_005_A_001_ftsensor58 IC_005_A_001 informal name FT58_M1 FT58_M2 variant id FT58_M1 FT58_M2 central through hole ** NO YES ** requires STRAIN2 board","title":"FT58 variants"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft58-assembly","text":"The FT58 sensor is assembled as described hereafter. The assembly of the sensor is a 6 step process: the top part, the sensor part and the bottom part are screwed together the pin holes are enalrged with the proper bore tool the sensor part is gaged the sensor is assembled and wired with the electronic board the three sensor parts are screwed together: the sensor is closed if needed pins are added with the proper strain relieving tool For further details on the assembly refer to the component drawing in the repository folder . The drawing code is depends on the sensor to be assebled (refer to the table in the above section for the code). The top interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm. The bottom interface is fixed with 6 M4x10 UNI 5931 counterbore hex. screws (cod. V4-10--_-_U5931_GC). The recommended tightening torque is 2.8Nm.","title":"FT58 assembly"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft58-assembly-on-icub3","text":"The FT58 sensor is assembled on iCub3 as represented in th following pictures. The top interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm. The bottom interface is fixed with 6 M4x12 UNI 5933 countersunk hex. screws (cod. V4-12--_-_U5933_C). The recommended tightening torque is 2Nm.","title":"FT58 assembly on iCub3"},{"location":"icub_firmware/ft-sensors/ft-sensors/#ft-sensor-electronics-variants","text":"There are three cards for reading six axis F/T Sensors: Name IIT Code and .Revision Description Status Compatible with Mechanical variant STRAIN1 832.B STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability end of life FT45_M1,FT45_M2,FT58_M1 STRAIN1.5 832.F STRAIN_01F, IIT - Electronic board, 6-axial strain gauges amplification card with enhanced noise capability, 5X gain end of life FT45_M1,FT45_M2,FT58_M1 STRAIN2 11996.B STRAIN2, IIT - Electronic board, 6 channels strain gauges variable gain interface board with CAN/UART, Temperature sensor, IMU, STM32L4 in production FT45_M1*,FT45_M2*,FT58_M1* FT45_M3**,FT45_M4**,FT58_M2** * if breaking the legs ** if removing the central ring","title":"FT Sensor Electronics Variants"},{"location":"icub_firmware/ft-sensors/ft-sensors/#cable-connections","text":"","title":"Cable connections"},{"location":"icub_firmware/ft-sensors/ft-sensors/#strain","text":"","title":"STRAIN"},{"location":"icub_firmware/ft-sensors/ft-sensors/#strain2","text":"","title":"STRAIN2"},{"location":"icub_firmware/ft-sensors/ft-sensors/#summarized-usable-codes","text":"short description Asm. cod. Wingst Rev. Dwg. Micron Istrumnents code status FTSensor 45 - Strain 1 (mech 1) FTSENSOR45A 3407 A2 150923 only maintenance FTSensor 45 - Strain 1 (mech 2) IC_001_A_001_ftsensor45 not present 0 150923 OBSOLETE FTSensor 45 - Strain 2 (mech 3) IC_007_A_001 12183 A2 151245 OBSOLETE FTSensor 45 - Strain 2 (mech 4) IC_008_A_001 12191 A1 151245 ACTIVE FTSensor 58 - Strain 1 ICUB3_005_A_001_ftsensor58 10308 A1 151351 OBSOLETE FTSensor 58 - Strain 2 IC_005_A_001 12176 A1 151351 ACTIVE","title":"Summarized usable codes"},{"location":"icub_firmware/ft-sensors/ft-sensors/#additional-material","text":"FT45 - without Temp. Compensation FT45 - Temp. Compensation included FT45 - Temp. Compensation included 2 FT58 - without Temp. Compensation FT58 - Temp. Compensation included","title":"Additional material"},{"location":"icub_firmware/ft-sensors/ft-sensors/#more-information","text":"F/T sensors are mounted by Micron Instruments","title":"More information"},{"location":"icub_operating_systems/","text":"Introduction \u00b6 This manual describes how to install and customize the linux operating systems required to run on machines in the iCub enviroment. Robot OS \u00b6 There are two versions of the customized OS that runs on the machine inside iCub head: The iCub LIVE for PC104 - based on Debian LIVE environment, it is for old iCub version with a PC104 board (without onboard Hard Drive) and it is distribuited usign a pre-built image. The iCub OS - based on Ubuntu Server, it is for latest iCub versions with a COM-Express board (with onboard Hard Drive) and can be installed starting from a pre-built image or we provide instructions to install and custommize a standard Ubuntu server installation. Other machines \u00b6 Here you can find instruction needed to custommize a generic machine, such as a laptop or a desktop, making all the changes required to add it to the iCub enviroment, starting from a default Ubuntu or Debian installation. Once you customized your machine, you can proceed with further setup for special machines, such as: CUDA workstation The iCub Server (Workstation) The iCub Server (laptop)","title":"Summary"},{"location":"icub_operating_systems/#introduction","text":"This manual describes how to install and customize the linux operating systems required to run on machines in the iCub enviroment.","title":"Introduction"},{"location":"icub_operating_systems/#robot-os","text":"There are two versions of the customized OS that runs on the machine inside iCub head: The iCub LIVE for PC104 - based on Debian LIVE environment, it is for old iCub version with a PC104 board (without onboard Hard Drive) and it is distribuited usign a pre-built image. The iCub OS - based on Ubuntu Server, it is for latest iCub versions with a COM-Express board (with onboard Hard Drive) and can be installed starting from a pre-built image or we provide instructions to install and custommize a standard Ubuntu server installation.","title":"Robot OS"},{"location":"icub_operating_systems/#other-machines","text":"Here you can find instruction needed to custommize a generic machine, such as a laptop or a desktop, making all the changes required to add it to the iCub enviroment, starting from a default Ubuntu or Debian installation. Once you customized your machine, you can proceed with further setup for special machines, such as: CUDA workstation The iCub Server (Workstation) The iCub Server (laptop)","title":"Other machines"},{"location":"icub_operating_systems/icubos/bios/","text":"Introduction \u00b6 Some tweaks to the bios are necessary to setup the icub-head board ( Kontron COMe-cKL6 ). They are directly realted to icubOS installation and it's necessary to perform the tweaks below only once, regadless if the operating systems is reinstalled. How to access BIOS \u00b6 In Order to modify BIOS parameters it is ncessary to connect a monitor (with Display Port connector) and an USB keyboard to the icub-head board. Then, power on the board and press a key (it is different on each model of the icub-head board, usually F2 or DEL) to enter BIOS settings. How to set the max power (TDP) of the processor \u00b6 Set the TDP to 10000 (10w). See page 65 of the user manual of the board for more details https://www.kontron.com/downloads/manuals/c/come-ckl6_user-guide_rev-1.5_2020-07-23.pdf?product=146491 USB Legacy support \u00b6 On boot tab, please disable the USB legacy support (where available). Save Settings! \u00b6 Before leaving the BIOS and rebooting, please remember to save your update setting with the option SAVE SETTINGS AND EXIT .","title":"BIOS Tweaks"},{"location":"icub_operating_systems/icubos/bios/#introduction","text":"Some tweaks to the bios are necessary to setup the icub-head board ( Kontron COMe-cKL6 ). They are directly realted to icubOS installation and it's necessary to perform the tweaks below only once, regadless if the operating systems is reinstalled.","title":"Introduction"},{"location":"icub_operating_systems/icubos/bios/#how-to-access-bios","text":"In Order to modify BIOS parameters it is ncessary to connect a monitor (with Display Port connector) and an USB keyboard to the icub-head board. Then, power on the board and press a key (it is different on each model of the icub-head board, usually F2 or DEL) to enter BIOS settings.","title":"How to access BIOS"},{"location":"icub_operating_systems/icubos/bios/#how-to-set-the-max-power-tdp-of-the-processor","text":"Set the TDP to 10000 (10w). See page 65 of the user manual of the board for more details https://www.kontron.com/downloads/manuals/c/come-ckl6_user-guide_rev-1.5_2020-07-23.pdf?product=146491","title":"How to set the max power (TDP) of the processor"},{"location":"icub_operating_systems/icubos/bios/#usb-legacy-support","text":"On boot tab, please disable the USB legacy support (where available).","title":"USB Legacy support"},{"location":"icub_operating_systems/icubos/bios/#save-settings","text":"Before leaving the BIOS and rebooting, please remember to save your update setting with the option SAVE SETTINGS AND EXIT .","title":"Save Settings!"},{"location":"icub_operating_systems/icubos/icubos/","text":"Introduction \u00b6 The iCubOS operating system is a customized version of Ubuntu GNU/Linux in the Server flavour . Latest version \u00b6 The latest version is 18.04_20200114 based on Ubuntu 18.04 LTS (Bionic Beaver) . Users and Passwords \u00b6 The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su -","title":"Introduction"},{"location":"icub_operating_systems/icubos/icubos/#introduction","text":"The iCubOS operating system is a customized version of Ubuntu GNU/Linux in the Server flavour .","title":"Introduction"},{"location":"icub_operating_systems/icubos/icubos/#latest-version","text":"The latest version is 18.04_20200114 based on Ubuntu 18.04 LTS (Bionic Beaver) .","title":"Latest version"},{"location":"icub_operating_systems/icubos/icubos/#users-and-passwords","text":"The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su -","title":"Users and Passwords"},{"location":"icub_operating_systems/icubos/installation-from-image/","text":"Introduction \u00b6 This method uses a pre-built disk image to install the icub-head, this image is a 1:1 copy of a working system: once the image is written on the icub-head disk ( erasing any data currently on the disk! ) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide . Installation procedure \u00b6 This procedure involves the following steps: Create the bootable USB with the imaging tool (CloneZilla) Download the latest iCubOS image Connect the icub-head Boot the USB disk Write the image Reboot icub-head Customize the system Create the bootable USB with the imaging tool (CloneZilla) \u00b6 The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE . Download clonezilla from this link Get a USB 3 USB drive (at least 4 GB of size) Create the live USB following this guide Download the latest iCubOS image \u00b6 Get the lastest iCubOS image and put it on a external USB drive (not the same were is CloneZilla LIVE) Connect the icub-head \u00b6 You need: USB 3 hub USB keyboard The Bootlabe USB with the imaging tool (see above) The external USB drive with the iCubOS disk image A monitor with DisplayPort input Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head. Boot the USB disk \u00b6 Power on the icub-head and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive. Write the image \u00b6 Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ). _Please note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6) In boot menu, select the option Clonezilla live (Defaut, To RAM) choose your language choose your keyboard layout select the Start_clonezilla option select the device-image option select the local_dev option remove the USB drive with Clonezilla live form the USB hub ensure that the USB with the disk image is connected to the USB hub wait for the USB drive (as in step 8) is shown and press CTRL-C select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1) Restart icub-head \u00b6 Power down the icub-head and unplug the USB hub, then restart. Customize the system \u00b6 What now you need to do is to customize the installation with your hardware and enviroment (see the \" Required configuration \" paragraph in both Networking and User Environment chapters)","title":"Installation from pre-built image"},{"location":"icub_operating_systems/icubos/installation-from-image/#introduction","text":"This method uses a pre-built disk image to install the icub-head, this image is a 1:1 copy of a working system: once the image is written on the icub-head disk ( erasing any data currently on the disk! ) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide .","title":"Introduction"},{"location":"icub_operating_systems/icubos/installation-from-image/#installation-procedure","text":"This procedure involves the following steps: Create the bootable USB with the imaging tool (CloneZilla) Download the latest iCubOS image Connect the icub-head Boot the USB disk Write the image Reboot icub-head Customize the system","title":"Installation procedure"},{"location":"icub_operating_systems/icubos/installation-from-image/#create-the-bootable-usb-with-the-imaging-tool-clonezilla","text":"The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE . Download clonezilla from this link Get a USB 3 USB drive (at least 4 GB of size) Create the live USB following this guide","title":"Create the bootable USB with the imaging tool (CloneZilla)"},{"location":"icub_operating_systems/icubos/installation-from-image/#download-the-latest-icubos-image","text":"Get the lastest iCubOS image and put it on a external USB drive (not the same were is CloneZilla LIVE)","title":"Download the latest iCubOS image"},{"location":"icub_operating_systems/icubos/installation-from-image/#connect-the-icub-head","text":"You need: USB 3 hub USB keyboard The Bootlabe USB with the imaging tool (see above) The external USB drive with the iCubOS disk image A monitor with DisplayPort input Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head.","title":"Connect the icub-head"},{"location":"icub_operating_systems/icubos/installation-from-image/#boot-the-usb-disk","text":"Power on the icub-head and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive.","title":"Boot the USB disk"},{"location":"icub_operating_systems/icubos/installation-from-image/#write-the-image","text":"Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ). _Please note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6) In boot menu, select the option Clonezilla live (Defaut, To RAM) choose your language choose your keyboard layout select the Start_clonezilla option select the device-image option select the local_dev option remove the USB drive with Clonezilla live form the USB hub ensure that the USB with the disk image is connected to the USB hub wait for the USB drive (as in step 8) is shown and press CTRL-C select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1)","title":"Write the image"},{"location":"icub_operating_systems/icubos/installation-from-image/#restart-icub-head","text":"Power down the icub-head and unplug the USB hub, then restart.","title":"Restart icub-head"},{"location":"icub_operating_systems/icubos/installation-from-image/#customize-the-system","text":"What now you need to do is to customize the installation with your hardware and enviroment (see the \" Required configuration \" paragraph in both Networking and User Environment chapters)","title":"Customize the system"},{"location":"icub_operating_systems/icubos/installation-from-scratch/","text":"Introductrion \u00b6 Since iCubOS is based on Ubuntu server, we will install Ubuntu server from the default installer and the we manually costimize it Latest versions \u00b6 Latest version is based on Ubuntu Server 18.04.4 Create the USB installer \u00b6 The first step is to download the official Ubuntu 18.04 LTS Server install media from the release page Then please create the USB installer using an USB memory and a tool like Balena Etcher . On Ubuntu website, you can find further informations about creating a bootable USB stick on Windows , Ubuntu or macOS Install Ubuntu \u00b6 Follow the below steps to install Ubuntu server on icub-head. Please note that the installation procedure can be slight different in each release, you can see the Ubuntu server official install guide Required Packages \u00b6 Install the following packages nfs-common python-tk libopencv-dev ntpdate vim ssh cmake-curses-gui iperf libportaudio2 portaudio19-dev linux-sound-base alsa-base alsa-utils gdb meld bmon i2c-dev expect libgfortran3 qml-module-qt-labs-folderlistmodel qml-module-qt-labs-settings Low Latency kernel \u00b6 Install the following packages linux-image-lowlatency linux-headers-lowlatency iCub repository and package \u00b6 Add the file /etc/apt/sources.list.d/icub.list Edit as follows deb http://www.icub.org/ubuntu xenial contrib/science Import the icub SSH key sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 Install the package icub-common Further installation steps and configuration \u00b6 SSH configuration \u00b6 Configure passwordless ssh: see this link Disable reverse DNS lookup in SSH server: add the following line to the file /etc/ssh/sshd_config UseDNS no Network performances tweaks \u00b6 Install the following packages : sudo apt install linux-image-lowlatency linux-headers-lowlatency Modify the real time priority of process, add the file /etc/security/limits.d/icub.conf as follows icub soft rtprio 99 icub hard rtprio 99 Set the max OS receive buffer size for all types of connections, by adding the file /etc/sysctl.d/20-net-rbuffer.conf as follows # This sets the max OS receive buffer size for all types of connections net.core.rmem_max=8388608 Bluetooth configuration \u00b6 Install the following packages bluetooth bluez bluez-tools Scan for available devices and search for the battery device hcitool scan | grep RNBT Open Bluetooth control and search for the Battery device bluetoothctl scan on Wait that the above ADDR shows then stop scanning scan off Pair the battery device with address ADDR pair ADDR Check status devices If everything is ok quit Bluetooth control quit NTP \u00b6 Edit the file /etc/default/ntpdate by adding the folowing line NTPSERVERS=\"10.0.0.1\" IMU Bosch \u00b6 Installation \u00b6 To use the IMU Bosch BNO055 through the i2c bus these additional steps are required: Install libraries for i2c: sudo apt install libi2c-dev i2c-tools Unzip kempld-drivers.20.tar.gz Compile the custom kernel modules: cd kempld-drivers.20/kempld-modules-{ver} make sudo make install {ver} is the linux version (see uname -r). Ignore ssl errors during installation. Load the required kernel module(the best should be add them at the startup): sudo insmod kempld-core.ko sudo insmod i2c-kempld.ko Finally add icub user to i2c group: usermod -a -G i2c icub Test the configuration of i2c and BNO055 \u00b6 To test the installation with the python script BNO055: python BNO055.py Note that to make it work you might change script at line 195: # Open I2C bus self._bus = smbus.SMBus(1) specifing the right number instead of 1 the correct number that can be found throught: i2cdetect -l Another possible troubleshooting could be change in the script BNO055.py (line 187) the default address from 0x28 to 0x29 fixed USB resources names \u00b6 In order to get a fixed device name for some USB resources such as IMU and USB2SERIAL, you have to create the following UDEV rules IMU BOSH : adde the file /etc/udev/rules.d/88-bosch-i2c-imu.rules as follows # iCub Bosch i2c IMU SUBSYSTEM==\"i2c-dev\", ATTRS{name}==\"i2c-kempld\", SYMLINK+=\"bosch-i2c-imu\", MODE=\"0660\", GROUP=\"i2c\" USB to Serial interface : add the file /etc/udev/rules.d/99-usb-serial.rules as follows # tty Xsens SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"2639\", SYMLINK+=\"ttyXsens\", MODE=\"0660\", GROUP=\"tty\" Tweaks \u00b6 Mount via SSH \u00b6 On the icub-head, graphics-based tools have not been installed (except the ones required for firmware interfaces) and it is better not to install them. Anyway, to use graphic tools (like editors, files managers, etc..) is very useful and sometimes essential. Instead of running remotely a tool and displaying it locally (like we did in old PC104), we can mount locally via SSH the icub-head filesystem and run locally all the tools we need. In order to mount locally the icub-head filesystem on your client: install the sshfs package sudo apt-get install sshfs create a mount point for the remote filesystem (eg.) mkdir /home/icub/icub-head_fs mount the remote /usr/local/src/robot via SSH sudo sshfs -o allow_other icub@10.0.0.2:/usr/local/src/robot/ /home/icub/icub-head_fs If you already setup the passwordless SSH login, you can skip the password: sudo sshfs -o allow_other,IdentityFile=/home/icub/.ssh/id_rsa icub@10.0.0.2:/usr/local/src/robot/ /home/icub/icub-head_fs","title":"Installation from scratch"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#introductrion","text":"Since iCubOS is based on Ubuntu server, we will install Ubuntu server from the default installer and the we manually costimize it","title":"Introductrion"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#latest-versions","text":"Latest version is based on Ubuntu Server 18.04.4","title":"Latest versions"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#create-the-usb-installer","text":"The first step is to download the official Ubuntu 18.04 LTS Server install media from the release page Then please create the USB installer using an USB memory and a tool like Balena Etcher . On Ubuntu website, you can find further informations about creating a bootable USB stick on Windows , Ubuntu or macOS","title":"Create the USB installer"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#install-ubuntu","text":"Follow the below steps to install Ubuntu server on icub-head. Please note that the installation procedure can be slight different in each release, you can see the Ubuntu server official install guide","title":"Install Ubuntu"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#required-packages","text":"Install the following packages nfs-common python-tk libopencv-dev ntpdate vim ssh cmake-curses-gui iperf libportaudio2 portaudio19-dev linux-sound-base alsa-base alsa-utils gdb meld bmon i2c-dev expect libgfortran3 qml-module-qt-labs-folderlistmodel qml-module-qt-labs-settings","title":"Required Packages"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#low-latency-kernel","text":"Install the following packages linux-image-lowlatency linux-headers-lowlatency","title":"Low Latency kernel"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#icub-repository-and-package","text":"Add the file /etc/apt/sources.list.d/icub.list Edit as follows deb http://www.icub.org/ubuntu xenial contrib/science Import the icub SSH key sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 Install the package icub-common","title":"iCub repository and package"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#further-installation-steps-and-configuration","text":"","title":"Further installation steps and configuration"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#ssh-configuration","text":"Configure passwordless ssh: see this link Disable reverse DNS lookup in SSH server: add the following line to the file /etc/ssh/sshd_config UseDNS no","title":"SSH configuration"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#network-performances-tweaks","text":"Install the following packages : sudo apt install linux-image-lowlatency linux-headers-lowlatency Modify the real time priority of process, add the file /etc/security/limits.d/icub.conf as follows icub soft rtprio 99 icub hard rtprio 99 Set the max OS receive buffer size for all types of connections, by adding the file /etc/sysctl.d/20-net-rbuffer.conf as follows # This sets the max OS receive buffer size for all types of connections net.core.rmem_max=8388608","title":"Network performances tweaks"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#bluetooth-configuration","text":"Install the following packages bluetooth bluez bluez-tools Scan for available devices and search for the battery device hcitool scan | grep RNBT Open Bluetooth control and search for the Battery device bluetoothctl scan on Wait that the above ADDR shows then stop scanning scan off Pair the battery device with address ADDR pair ADDR Check status devices If everything is ok quit Bluetooth control quit","title":"Bluetooth configuration"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#ntp","text":"Edit the file /etc/default/ntpdate by adding the folowing line NTPSERVERS=\"10.0.0.1\"","title":"NTP"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#imu-bosch","text":"","title":"IMU Bosch"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#installation","text":"To use the IMU Bosch BNO055 through the i2c bus these additional steps are required: Install libraries for i2c: sudo apt install libi2c-dev i2c-tools Unzip kempld-drivers.20.tar.gz Compile the custom kernel modules: cd kempld-drivers.20/kempld-modules-{ver} make sudo make install {ver} is the linux version (see uname -r). Ignore ssl errors during installation. Load the required kernel module(the best should be add them at the startup): sudo insmod kempld-core.ko sudo insmod i2c-kempld.ko Finally add icub user to i2c group: usermod -a -G i2c icub","title":"Installation"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#test-the-configuration-of-i2c-and-bno055","text":"To test the installation with the python script BNO055: python BNO055.py Note that to make it work you might change script at line 195: # Open I2C bus self._bus = smbus.SMBus(1) specifing the right number instead of 1 the correct number that can be found throught: i2cdetect -l Another possible troubleshooting could be change in the script BNO055.py (line 187) the default address from 0x28 to 0x29","title":"Test the configuration of i2c and BNO055"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#fixed-usb-resources-names","text":"In order to get a fixed device name for some USB resources such as IMU and USB2SERIAL, you have to create the following UDEV rules IMU BOSH : adde the file /etc/udev/rules.d/88-bosch-i2c-imu.rules as follows # iCub Bosch i2c IMU SUBSYSTEM==\"i2c-dev\", ATTRS{name}==\"i2c-kempld\", SYMLINK+=\"bosch-i2c-imu\", MODE=\"0660\", GROUP=\"i2c\" USB to Serial interface : add the file /etc/udev/rules.d/99-usb-serial.rules as follows # tty Xsens SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"2639\", SYMLINK+=\"ttyXsens\", MODE=\"0660\", GROUP=\"tty\"","title":"fixed USB resources names"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#tweaks","text":"","title":"Tweaks"},{"location":"icub_operating_systems/icubos/installation-from-scratch/#mount-via-ssh","text":"On the icub-head, graphics-based tools have not been installed (except the ones required for firmware interfaces) and it is better not to install them. Anyway, to use graphic tools (like editors, files managers, etc..) is very useful and sometimes essential. Instead of running remotely a tool and displaying it locally (like we did in old PC104), we can mount locally via SSH the icub-head filesystem and run locally all the tools we need. In order to mount locally the icub-head filesystem on your client: install the sshfs package sudo apt-get install sshfs create a mount point for the remote filesystem (eg.) mkdir /home/icub/icub-head_fs mount the remote /usr/local/src/robot via SSH sudo sshfs -o allow_other icub@10.0.0.2:/usr/local/src/robot/ /home/icub/icub-head_fs If you already setup the passwordless SSH login, you can skip the password: sudo sshfs -o allow_other,IdentityFile=/home/icub/.ssh/id_rsa icub@10.0.0.2:/usr/local/src/robot/ /home/icub/icub-head_fs","title":"Mount via SSH"},{"location":"icub_operating_systems/icubos/networking/","text":"iCub networking \u00b6 The networking on icub can be divided in two parts: internal (motor) networking : it is a network that connects to icub-head and all the motor controller boards on the robot, it is a segregated network (there is no connection from the nodes on its subnet and the ouside world) and it is used to send motor commands from icub-head to motor control boards extenal networking : it is the network connection that connects icub-head to the robot private subnet; it is used to connect the robot to the other machines in its enviroments, to the icub-server and to internet; this connection cam wired or wireless It isa also available a bluetooth connection on the icub-head, but it currently used only to read data from the battery controller in the robot backpack. The iCub private subnet \u00b6 The icub private subnet is the subnnet that connects all the machines in the robot enmviroment, see the schema below icub-head network interfaces \u00b6 On recent icub-head hardware there are 4 network interfaces: external cabled network - used to connect the icub-head to other machines in its enviroment, wired internal motor network - used to connect the icub-head to the onboard motor controllers external wireless network - used to connect the icub-head to other machines in its enviroment, wireless bluetooth interface - used to connect the icub-head to the battery controller IP addresses and other network configurations \u00b6 Below you can find the default network paramenters of the the main icub-head network (external and motor). Motor network configurations \u00b6 This configuration depends deeply from the motor control board firware and thus it can't be changed IP address : 10.0.1.104 - STATIC Netmask : 255.255.255.0 since this is a segregated network, there is no default gateway. External network configurations \u00b6 Usually it is a static configuration, but it works also in DHCP mode. This configuration can be changed but it is not recommended IP address : 10.0.0.2 Netmask : 255.255.255.0 Default Gateway : 10.0.0.1 DNS server : 10.0.0.1 Networking implementation in iCubOS \u00b6 Basic principles \u00b6 The basic idea is that to setup a network bonding in active-passive mode with network and wifi connections, and the network has the role of master connection. So, if the network cable is connected to the robot, the traffic to icub-head passes through the cabled connection otherwise the system uses the wifi, but the connection keeps the same IP address. The switch is generally quite fast (couple of seconds), so we don't lose ssh connections to icub-head Netplan \u00b6 Latest ubuntu uses NETPLAN to configure the network, so I setup netplan to create the above network bonding: netplan uses the configuration files it founds in the path /etc/netplan/ on startup, netplan load all files in the above path with the .yaml extension this behavior can be used to create several different configurations to choose from. In icub-head we have many files in the /etc/netplan path 50-icub-static.yaml.notload - a configuration file that uses STATIC IP for cabled network configuration ( no bonding, no wifi ) 50-icub-dhcp.yaml.notload - a configuration file that get IP for cabled network configuration from DHCP server ( no bonding, no wifi ) 50-icub-bonding-static.yaml.notload - a configuration that creates a bonding with cabled network and WiFi and uses a static IP for the bonded connection ( THIS IS THE DEFAULT ) 50-icub-bonding-dhcp.yaml.notload - a configuration that creates a bonding with cabled network and WiFi and gets the IP for the bonded connection from DHCP server 50-icub.yaml - a symbolic link that points to the active configuration Required configuration \u00b6 There are some parameters that must be configured on each icub-head installation because they are hardware dependant (network interfaces names) or user-dependant (Wifi configuration) Network interfaces names \u00b6 The names assigned to the network interfaces by the OS are hardware dependant, so on each new installation you must check that the name of the interfaces (internal, motor and wifi) written in the file /etc/netplan\\50-icub.yaml corresponds to the actual ones, shown by the commmand ip link WiFi \u00b6 If wifi is used (see above), please change the Wifi configuration in the file /etc/netplan\\50-icub.yaml with youR ESSID and WiFi password in the lines below wifis: ... access-points: \"please-put-your-ESSID-here\": password: \"please-put-your-wifi-password-here\"","title":"Networking"},{"location":"icub_operating_systems/icubos/networking/#icub-networking","text":"The networking on icub can be divided in two parts: internal (motor) networking : it is a network that connects to icub-head and all the motor controller boards on the robot, it is a segregated network (there is no connection from the nodes on its subnet and the ouside world) and it is used to send motor commands from icub-head to motor control boards extenal networking : it is the network connection that connects icub-head to the robot private subnet; it is used to connect the robot to the other machines in its enviroments, to the icub-server and to internet; this connection cam wired or wireless It isa also available a bluetooth connection on the icub-head, but it currently used only to read data from the battery controller in the robot backpack.","title":"iCub networking"},{"location":"icub_operating_systems/icubos/networking/#the-icub-private-subnet","text":"The icub private subnet is the subnnet that connects all the machines in the robot enmviroment, see the schema below","title":"The iCub private subnet"},{"location":"icub_operating_systems/icubos/networking/#icub-head-network-interfaces","text":"On recent icub-head hardware there are 4 network interfaces: external cabled network - used to connect the icub-head to other machines in its enviroment, wired internal motor network - used to connect the icub-head to the onboard motor controllers external wireless network - used to connect the icub-head to other machines in its enviroment, wireless bluetooth interface - used to connect the icub-head to the battery controller","title":"icub-head network interfaces"},{"location":"icub_operating_systems/icubos/networking/#ip-addresses-and-other-network-configurations","text":"Below you can find the default network paramenters of the the main icub-head network (external and motor).","title":"IP addresses and other network configurations"},{"location":"icub_operating_systems/icubos/networking/#motor-network-configurations","text":"This configuration depends deeply from the motor control board firware and thus it can't be changed IP address : 10.0.1.104 - STATIC Netmask : 255.255.255.0 since this is a segregated network, there is no default gateway.","title":"Motor network configurations"},{"location":"icub_operating_systems/icubos/networking/#external-network-configurations","text":"Usually it is a static configuration, but it works also in DHCP mode. This configuration can be changed but it is not recommended IP address : 10.0.0.2 Netmask : 255.255.255.0 Default Gateway : 10.0.0.1 DNS server : 10.0.0.1","title":"External network configurations"},{"location":"icub_operating_systems/icubos/networking/#networking-implementation-in-icubos","text":"","title":"Networking implementation in iCubOS"},{"location":"icub_operating_systems/icubos/networking/#basic-principles","text":"The basic idea is that to setup a network bonding in active-passive mode with network and wifi connections, and the network has the role of master connection. So, if the network cable is connected to the robot, the traffic to icub-head passes through the cabled connection otherwise the system uses the wifi, but the connection keeps the same IP address. The switch is generally quite fast (couple of seconds), so we don't lose ssh connections to icub-head","title":"Basic principles"},{"location":"icub_operating_systems/icubos/networking/#netplan","text":"Latest ubuntu uses NETPLAN to configure the network, so I setup netplan to create the above network bonding: netplan uses the configuration files it founds in the path /etc/netplan/ on startup, netplan load all files in the above path with the .yaml extension this behavior can be used to create several different configurations to choose from. In icub-head we have many files in the /etc/netplan path 50-icub-static.yaml.notload - a configuration file that uses STATIC IP for cabled network configuration ( no bonding, no wifi ) 50-icub-dhcp.yaml.notload - a configuration file that get IP for cabled network configuration from DHCP server ( no bonding, no wifi ) 50-icub-bonding-static.yaml.notload - a configuration that creates a bonding with cabled network and WiFi and uses a static IP for the bonded connection ( THIS IS THE DEFAULT ) 50-icub-bonding-dhcp.yaml.notload - a configuration that creates a bonding with cabled network and WiFi and gets the IP for the bonded connection from DHCP server 50-icub.yaml - a symbolic link that points to the active configuration","title":"Netplan"},{"location":"icub_operating_systems/icubos/networking/#required-configuration","text":"There are some parameters that must be configured on each icub-head installation because they are hardware dependant (network interfaces names) or user-dependant (Wifi configuration)","title":"Required configuration"},{"location":"icub_operating_systems/icubos/networking/#network-interfaces-names","text":"The names assigned to the network interfaces by the OS are hardware dependant, so on each new installation you must check that the name of the interfaces (internal, motor and wifi) written in the file /etc/netplan\\50-icub.yaml corresponds to the actual ones, shown by the commmand ip link","title":"Network interfaces names"},{"location":"icub_operating_systems/icubos/networking/#wifi","text":"If wifi is used (see above), please change the Wifi configuration in the file /etc/netplan\\50-icub.yaml with youR ESSID and WiFi password in the lines below wifis: ... access-points: \"please-put-your-ESSID-here\": password: \"please-put-your-wifi-password-here\"","title":"WiFi"},{"location":"icub_operating_systems/icubos/user-env/","text":"Introduction \u00b6 The main user configured on icub-head is icub (SID: 1000 - GID 1000). All the enviroment configurations required for this user are stored in a separate file that is loaded every time a bash session is started. The bashrc \u00b6 The user enviroment configurationsration (for bash sessions) are stored in the file ~/.bashrc_iCub Online updated \u00b6 You can find the updated default .bashrc_iCub file online. There are two versions of the iCub enviroment file: bashrc_iCub_superbuild - a special version of icub user environment, to use in case of ROBOOLOGY SUPERBUILD bashrc_iCub - the standard version of icub user enviroment, needed if you do not use the Robotology SUPERBUID the above files must be renamed to .bashrc_iCub and saved in the user home directory, along with the .bashrc file. How to setup the enviroment properly \u00b6 This file must be loaded every time a bash session is started, no matter if the session is interactive or not (this is required when we want to start our programs remotely). Usually the .bashrc is not executed for not-interactive session, that's why the default .bashrc file starts with the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac These lines forces to skip execution of bashrc in case of not-interactive session, by exiting from the file. So, if we want that our enviroment is loaded no matter if the session is interactive or not, we must put the following lines #Load the iCub custom bashrc if [ \"$HOME\" != \"\" ]; then ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" else ICUBRC_FILE=\"/home/icub/.bashrc_iCub\" fi if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi at the beginning of file ~/.bashrc_iCub just BEFORE the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac Required configuration \u00b6 In order to customize the above user enviroment you shuld manually make some changes: The build path - the folder name where you object are created by cmake, in the following line and remove the leading \"#\" #export OBJ_SUBDIR=\"build\" The YARP_ROBOT_NAME - you must insert your robot name, in the following line and remove the leading \"#\" #export YARP_ROBOT_NAME= Groups \u00b6 Add the user icub to the following groups video audio tty dialout i2c","title":"User environment"},{"location":"icub_operating_systems/icubos/user-env/#introduction","text":"The main user configured on icub-head is icub (SID: 1000 - GID 1000). All the enviroment configurations required for this user are stored in a separate file that is loaded every time a bash session is started.","title":"Introduction"},{"location":"icub_operating_systems/icubos/user-env/#the-bashrc","text":"The user enviroment configurationsration (for bash sessions) are stored in the file ~/.bashrc_iCub","title":"The bashrc"},{"location":"icub_operating_systems/icubos/user-env/#online-updated","text":"You can find the updated default .bashrc_iCub file online. There are two versions of the iCub enviroment file: bashrc_iCub_superbuild - a special version of icub user environment, to use in case of ROBOOLOGY SUPERBUILD bashrc_iCub - the standard version of icub user enviroment, needed if you do not use the Robotology SUPERBUID the above files must be renamed to .bashrc_iCub and saved in the user home directory, along with the .bashrc file.","title":"Online updated"},{"location":"icub_operating_systems/icubos/user-env/#how-to-setup-the-enviroment-properly","text":"This file must be loaded every time a bash session is started, no matter if the session is interactive or not (this is required when we want to start our programs remotely). Usually the .bashrc is not executed for not-interactive session, that's why the default .bashrc file starts with the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac These lines forces to skip execution of bashrc in case of not-interactive session, by exiting from the file. So, if we want that our enviroment is loaded no matter if the session is interactive or not, we must put the following lines #Load the iCub custom bashrc if [ \"$HOME\" != \"\" ]; then ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" else ICUBRC_FILE=\"/home/icub/.bashrc_iCub\" fi if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi at the beginning of file ~/.bashrc_iCub just BEFORE the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac","title":"How to setup the enviroment properly"},{"location":"icub_operating_systems/icubos/user-env/#required-configuration","text":"In order to customize the above user enviroment you shuld manually make some changes: The build path - the folder name where you object are created by cmake, in the following line and remove the leading \"#\" #export OBJ_SUBDIR=\"build\" The YARP_ROBOT_NAME - you must insert your robot name, in the following line and remove the leading \"#\" #export YARP_ROBOT_NAME=","title":"Required configuration"},{"location":"icub_operating_systems/icubos/user-env/#groups","text":"Add the user icub to the following groups video audio tty dialout i2c","title":"Groups"},{"location":"icub_operating_systems/other-machines/cuda-workstation/","text":"Introduction \u00b6 This page contains guidelines to install the iCub nVidia CUDA Workstation. We assume you have installed a working Debian or Ubuntu on the laptop. You can freely decide to install 32 bit or 64 bit, the code compiles on both architectures. Be aware that if you plan to share the repository with other machines, all machines need to have the same architecture (32 versus 64 bits, same versions of the libraries). A possibility would be to share the same code directory and different builds. Prerequisite : basic system setup for a iCub machine \u00b6 Please follow the instructions on page Generic iCub machine installation instructions , in order to prepare a generic machine for the iCub network. Then, follow the steps below to customize it as the iCub Laptop Note \u00b6 In the following instructions, we assume that the installed OS is a Debian GNU/Linux Wheezy. If you are usign a different distribution os release, please modify the instructionsaccordingly. Installation steps \u00b6 Install cuda toolkit \u00b6 From Distribution repository (Debian / Ubuntu, quite old versions) \u00b6 DEBIAN : from debian non-free repository, install the following packages nvidia-cuda-toolkit nvidia-cuda-dev UBUNTU : from multiverse repository, install the following packages nvidia-cuda-toolkit nvidia-cuda-dev From the nVidia Developer website (Ubuntu, always the latest version) \u00b6 Install the package for your distribuition and architecture from https://developer.nvidia.com/cuda-downloads Install SiftGPU library and its dependancies \u00b6 get SiftGPU from SiftGPU website extract SiftGPU in /usr/loca/src/robot install dependancies (DevIL and GLEW), by installing the following packages libdevil-dev libglew-dev compile SiftGPU","title":"The CUDA workstation"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#introduction","text":"This page contains guidelines to install the iCub nVidia CUDA Workstation. We assume you have installed a working Debian or Ubuntu on the laptop. You can freely decide to install 32 bit or 64 bit, the code compiles on both architectures. Be aware that if you plan to share the repository with other machines, all machines need to have the same architecture (32 versus 64 bits, same versions of the libraries). A possibility would be to share the same code directory and different builds.","title":"Introduction"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#prerequisite-basic-system-setup-for-a-icub-machine","text":"Please follow the instructions on page Generic iCub machine installation instructions , in order to prepare a generic machine for the iCub network. Then, follow the steps below to customize it as the iCub Laptop","title":"Prerequisite : basic system setup for a iCub machine"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#note","text":"In the following instructions, we assume that the installed OS is a Debian GNU/Linux Wheezy. If you are usign a different distribution os release, please modify the instructionsaccordingly.","title":"Note"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#installation-steps","text":"","title":"Installation steps"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#install-cuda-toolkit","text":"","title":"Install cuda toolkit"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#from-distribution-repository-debian-ubuntu-quite-old-versions","text":"DEBIAN : from debian non-free repository, install the following packages nvidia-cuda-toolkit nvidia-cuda-dev UBUNTU : from multiverse repository, install the following packages nvidia-cuda-toolkit nvidia-cuda-dev","title":"From Distribution repository (Debian / Ubuntu, quite old versions)"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#from-the-nvidia-developer-website-ubuntu-always-the-latest-version","text":"Install the package for your distribuition and architecture from https://developer.nvidia.com/cuda-downloads","title":"From the nVidia Developer website (Ubuntu, always the latest version)"},{"location":"icub_operating_systems/other-machines/cuda-workstation/#install-siftgpu-library-and-its-dependancies","text":"get SiftGPU from SiftGPU website extract SiftGPU in /usr/loca/src/robot install dependancies (DevIL and GLEW), by installing the following packages libdevil-dev libglew-dev compile SiftGPU","title":"Install SiftGPU library and its dependancies"},{"location":"icub_operating_systems/other-machines/generic-machine/","text":"Introduction \u00b6 This page contains instructions on how to prepare a machine to work in the iCub Subnet environment. This is a basic setup, useful as a starting point to prepare any kind of machine of the iCub ecosystem. Operating System \u00b6 You can choose both a Debian or Ubuntu Linux, the currently suggested OS is Ubuntu 18.04 (Bionic Beaver) . User account \u00b6 Users and Passwords \u00b6 The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su - Creation of the icub user \u00b6 You need to create the icub user. For nfs (see later) to work this user has to have the uid 1000 and guid 1000. In LINUX starting procedure, is asks to create the first user. By default uid is set at 1000. To make sure it is done do : id -u icub id -g icub Add the icub user to the sudoers group, by editing in /etc/group the following line sudo:x:27:icub Required and useful Packages \u00b6 Please install the following packages (names are correct for Ubuntu 18.04, please check the corresponding package in your distribution): nfs-common python-tk libopencv-dev ntpdate ssh cmake-curses-gui Also install (optional, but very useful) the following packages: vim iperf Debian Software repository \u00b6 NOTE : this step is required only for a Debian machine. Enable the non-free and contrib sources, by editing the file /etc/apt/sources.list Example: deb http://mi.mirror.garr.it/mirrors/debian/ buster main non-free contrib deb-src http://mi.mirror.garr.it/mirrors/debian/ buster main non-free contrib deb http://security.debian.org/ buster/updates main non-free contrib deb-src http://security.debian.org/ buster/updates main non-free contrib # buster-updates, previously known as 'volatile' deb http://mi.mirror.garr.it/mirrors/debian/ buster-updates main non-free contrib deb-src http://mi.mirror.garr.it/mirrors/debian/)` buster-updates main non-free contrib iCub software repository and common packages \u00b6 NOTE : skip this step in case of icub server Configure the iCub software repository, by creating the file /etc/apt/sources.list.d/icub.list as following example for a Debian 10 (Buster) machine : deb http://www.icub.org/debian buster contrib/science for a Ubuntu 18.04 LTS (Bionic) machine : `deb http://www.icub.org/ubuntu bionic contrib/science Download the packages signature sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 After adding a new source, remember to update the packages list: apt-get update Install the following packages from icub repository icub-common Network configuration \u00b6 You have two options: Static IP address (this option is mandatory if there is no DHCP in your subnet - like in the case of iCub Laptop - or if your machine is the DHCP server - this is the case of icub server) Dynamic DHCP IP address Dynamic IP configuration \u00b6 To configure a dynamic IP adress, edit /etc/network/interfaces as follows (where eth0 is the interface to configure): # The primary network interface` auto eth0 allow-hotplug eth0 iface eth0 inet dhcp Static IP configuration \u00b6 To configure a static IP adress, edit /etc/network/interfaces, as follows (where eth0 is the interface to configure) # The primary network interface auto eth0 allow-hotplug eth0 iface eth0 inet static address MACHINE_IP netmask NETMASK gateway GATEWAY_IP dns-nameservers DNS_IP dns-domain icub.local dns-search icub.local and replace MACHINE_IP NETMASK DNS_IP GATEWAY_IP with the appropriate values for you network. As example, in case of a machine in an environment with the icub server the above configuration will be (where MACHINE_IP is now 10.0.0.16 ) # The primary network interface auto eth0 iface eth0 inet static address 10.0.0.16 netmask 255.255.255.0 gateway 10.0.0.1 dns-nameservers 10.0.0.1 dns-domain icub.local dns-search icub.loca In case of Static IP, please check that the file /etc/hosts looks as follows: 127.0.0.1 localhost 127.0.1.1 MACHINE_HOSTNAME.icub.local MACHINE_HOSTNAME and replace MACHINE_HOSTNAME with the hostname of you machine, that should match the file /etc/hostname Mount remote NFS shares \u00b6 NOTE : skip this step in case of icub server or icub \"standalone\" latop (without iCub rack servers) To mount the remote NFS shares, edit /etc/fstab , by adding the folowing lines NFS_SERVER_IP:/exports/code /usr/local/src/robot nfs soft,retry=1,timeo=60,_netdev,auto 0 0 NFS_SERVER_IP:/exports/local_yarp /home/icub/.local/share/yarp nfs soft,retry=1,timeo=60,_netdev,auto 0 0 and replace NFS_SERVER_IP with the appropriate value for your network. As example, in case of a machine in an environment with the icub server the above configuration will be 10.0.0.1:/exports/code /usr/local/src/robot nfs soft,retry=1,timeo=60,_netdev,auto 0 0 \\ 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs soft,retry=1,timeo=60,_netdev,auto 0 0 Then create the two above mountpoints as follows mkdir -p /home/icub/.local/share/yarp mkdir -p /usr/local/src/robot NTP configuration \u00b6 NOTE : skip this step in case of icub server or icub latop Edit the file /etc/ntp.conf by adding the following line server NTP_SERVER_IP and replace NTP_SERVER_IP with the appropriate value for your network. As example, in case of a machine in an environment with the icub server the above configuration will be server 10.0.0.1 iCub user environment variables \u00b6 NOTE : skip this step in case of iCub server iCub .bashrc \u00b6 Add the file /home/icub/.bashrc_iCub . This file has two variants: variant if you install ycm, yarp, icub-main and all the other software repos one by one, variant if you install software through the robotology-superbuild. Then add the following lines #Load the iCub custom bashrc if [ \"$HOME\" != \"\" ]; then ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" else ICUBRC_FILE=\"/home/icub/.bashrc_iCub\" fi if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi at the beginning of file /home/icub/.bashrc just BEFORE the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac iCub bashrc customization \u00b6 There are several customization you need to apply to the file .bashrc\\_iCub : The YARP_ROBOT_NAME - you must insert your robot name, in the following line and remove comment #export YARP_ROBOT_NAME= The build path - the folder name where you object are created by cmake, in the following line #export OBJ_SUBDIR=\"build\" Optional - Configure remote desktop \u00b6 If you want to setup a VNC remote desktop, execute from a graphical session the following command vino-preferences If you get this error The authentication mechanism requested can not be provided by the computer please launch the following command, from a shell terminal gsettings set org.gnome.Vino enabled true Optional - Disable the screen power off \u00b6 Using the gnome3 control panel, it is not possible to avoid the system has to be idle for the monitor to be turned off, the maximum time is \"1 hour\", \"never\" is not possible. From the command line execute the following commands gsettings set org.gnome.settings-daemon.plugins.power sleep-display-ac 0 gsettings set org.gnome.settings-daemon.plugins.power sleep-display-battery 0 gsettings set org.gnome.desktop.session idle-delay 0 Optional - install nVidia video drivers \u00b6 Install the following packages nvidia-glx nvidia-settings nvidia-xconfig Run nvidia-xconfig Reboot Optional - Fix the the .local domains resolution problems \u00b6 NOTE : only on clients, NOT on icub server. Edit /etc/nsswitch replacing the following line hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4 with hosts: files dns Optional - how to fix ssh lag on connect \u00b6 In case of lag in SSH connections, disable DNS lookup on ssh server, edit the file /etc/ssh/sshd_config adding the following line UseDNS no Optional - how to fix the \\\"nobody:nobody\\\" NFS mount issue \u00b6 If the NFS mounts shows NOBODY as UID and GUID, this mean that the client and the server are not in the same domain, check the file /etc/idmap.conf Usually it is derived from the domain name mentioned in /etc/resolv.conf so both, server and client must match. Special computers \u00b6 In case of special machines (such as the cuda workstation or icub laptop) you must follow further steps in order to complete the installation: The iCub server The iCub server laptop The nVidia CUDA workstation","title":"Generic iCub enviroment machines (eg. laptop)"},{"location":"icub_operating_systems/other-machines/generic-machine/#introduction","text":"This page contains instructions on how to prepare a machine to work in the iCub Subnet environment. This is a basic setup, useful as a starting point to prepare any kind of machine of the iCub ecosystem.","title":"Introduction"},{"location":"icub_operating_systems/other-machines/generic-machine/#operating-system","text":"You can choose both a Debian or Ubuntu Linux, the currently suggested OS is Ubuntu 18.04 (Bionic Beaver) .","title":"Operating System"},{"location":"icub_operating_systems/other-machines/generic-machine/#user-account","text":"","title":"User account"},{"location":"icub_operating_systems/other-machines/generic-machine/#users-and-passwords","text":"The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su -","title":"Users and Passwords"},{"location":"icub_operating_systems/other-machines/generic-machine/#creation-of-the-icub-user","text":"You need to create the icub user. For nfs (see later) to work this user has to have the uid 1000 and guid 1000. In LINUX starting procedure, is asks to create the first user. By default uid is set at 1000. To make sure it is done do : id -u icub id -g icub Add the icub user to the sudoers group, by editing in /etc/group the following line sudo:x:27:icub","title":"Creation of the icub user"},{"location":"icub_operating_systems/other-machines/generic-machine/#required-and-useful-packages","text":"Please install the following packages (names are correct for Ubuntu 18.04, please check the corresponding package in your distribution): nfs-common python-tk libopencv-dev ntpdate ssh cmake-curses-gui Also install (optional, but very useful) the following packages: vim iperf","title":"Required and useful Packages"},{"location":"icub_operating_systems/other-machines/generic-machine/#debian-software-repository","text":"NOTE : this step is required only for a Debian machine. Enable the non-free and contrib sources, by editing the file /etc/apt/sources.list Example: deb http://mi.mirror.garr.it/mirrors/debian/ buster main non-free contrib deb-src http://mi.mirror.garr.it/mirrors/debian/ buster main non-free contrib deb http://security.debian.org/ buster/updates main non-free contrib deb-src http://security.debian.org/ buster/updates main non-free contrib # buster-updates, previously known as 'volatile' deb http://mi.mirror.garr.it/mirrors/debian/ buster-updates main non-free contrib deb-src http://mi.mirror.garr.it/mirrors/debian/)` buster-updates main non-free contrib","title":"Debian Software repository"},{"location":"icub_operating_systems/other-machines/generic-machine/#icub-software-repository-and-common-packages","text":"NOTE : skip this step in case of icub server Configure the iCub software repository, by creating the file /etc/apt/sources.list.d/icub.list as following example for a Debian 10 (Buster) machine : deb http://www.icub.org/debian buster contrib/science for a Ubuntu 18.04 LTS (Bionic) machine : `deb http://www.icub.org/ubuntu bionic contrib/science Download the packages signature sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 After adding a new source, remember to update the packages list: apt-get update Install the following packages from icub repository icub-common","title":"iCub software repository and common packages"},{"location":"icub_operating_systems/other-machines/generic-machine/#network-configuration","text":"You have two options: Static IP address (this option is mandatory if there is no DHCP in your subnet - like in the case of iCub Laptop - or if your machine is the DHCP server - this is the case of icub server) Dynamic DHCP IP address","title":"Network configuration"},{"location":"icub_operating_systems/other-machines/generic-machine/#dynamic-ip-configuration","text":"To configure a dynamic IP adress, edit /etc/network/interfaces as follows (where eth0 is the interface to configure): # The primary network interface` auto eth0 allow-hotplug eth0 iface eth0 inet dhcp","title":"Dynamic IP configuration"},{"location":"icub_operating_systems/other-machines/generic-machine/#static-ip-configuration","text":"To configure a static IP adress, edit /etc/network/interfaces, as follows (where eth0 is the interface to configure) # The primary network interface auto eth0 allow-hotplug eth0 iface eth0 inet static address MACHINE_IP netmask NETMASK gateway GATEWAY_IP dns-nameservers DNS_IP dns-domain icub.local dns-search icub.local and replace MACHINE_IP NETMASK DNS_IP GATEWAY_IP with the appropriate values for you network. As example, in case of a machine in an environment with the icub server the above configuration will be (where MACHINE_IP is now 10.0.0.16 ) # The primary network interface auto eth0 iface eth0 inet static address 10.0.0.16 netmask 255.255.255.0 gateway 10.0.0.1 dns-nameservers 10.0.0.1 dns-domain icub.local dns-search icub.loca In case of Static IP, please check that the file /etc/hosts looks as follows: 127.0.0.1 localhost 127.0.1.1 MACHINE_HOSTNAME.icub.local MACHINE_HOSTNAME and replace MACHINE_HOSTNAME with the hostname of you machine, that should match the file /etc/hostname","title":"Static IP configuration"},{"location":"icub_operating_systems/other-machines/generic-machine/#mount-remote-nfs-shares","text":"NOTE : skip this step in case of icub server or icub \"standalone\" latop (without iCub rack servers) To mount the remote NFS shares, edit /etc/fstab , by adding the folowing lines NFS_SERVER_IP:/exports/code /usr/local/src/robot nfs soft,retry=1,timeo=60,_netdev,auto 0 0 NFS_SERVER_IP:/exports/local_yarp /home/icub/.local/share/yarp nfs soft,retry=1,timeo=60,_netdev,auto 0 0 and replace NFS_SERVER_IP with the appropriate value for your network. As example, in case of a machine in an environment with the icub server the above configuration will be 10.0.0.1:/exports/code /usr/local/src/robot nfs soft,retry=1,timeo=60,_netdev,auto 0 0 \\ 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs soft,retry=1,timeo=60,_netdev,auto 0 0 Then create the two above mountpoints as follows mkdir -p /home/icub/.local/share/yarp mkdir -p /usr/local/src/robot","title":"Mount remote NFS shares"},{"location":"icub_operating_systems/other-machines/generic-machine/#ntp-configuration","text":"NOTE : skip this step in case of icub server or icub latop Edit the file /etc/ntp.conf by adding the following line server NTP_SERVER_IP and replace NTP_SERVER_IP with the appropriate value for your network. As example, in case of a machine in an environment with the icub server the above configuration will be server 10.0.0.1","title":"NTP configuration"},{"location":"icub_operating_systems/other-machines/generic-machine/#icub-user-environment-variables","text":"NOTE : skip this step in case of iCub server","title":"iCub user environment variables"},{"location":"icub_operating_systems/other-machines/generic-machine/#icub-bashrc","text":"Add the file /home/icub/.bashrc_iCub . This file has two variants: variant if you install ycm, yarp, icub-main and all the other software repos one by one, variant if you install software through the robotology-superbuild. Then add the following lines #Load the iCub custom bashrc if [ \"$HOME\" != \"\" ]; then ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" else ICUBRC_FILE=\"/home/icub/.bashrc_iCub\" fi if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi at the beginning of file /home/icub/.bashrc just BEFORE the following lines: # If not running interactively, don't do anything case $- in *i*) ;; *) return;; esac","title":"iCub .bashrc"},{"location":"icub_operating_systems/other-machines/generic-machine/#icub-bashrc-customization","text":"There are several customization you need to apply to the file .bashrc\\_iCub : The YARP_ROBOT_NAME - you must insert your robot name, in the following line and remove comment #export YARP_ROBOT_NAME= The build path - the folder name where you object are created by cmake, in the following line #export OBJ_SUBDIR=\"build\"","title":"iCub bashrc customization"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-configure-remote-desktop","text":"If you want to setup a VNC remote desktop, execute from a graphical session the following command vino-preferences If you get this error The authentication mechanism requested can not be provided by the computer please launch the following command, from a shell terminal gsettings set org.gnome.Vino enabled true","title":"Optional - Configure remote desktop"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-disable-the-screen-power-off","text":"Using the gnome3 control panel, it is not possible to avoid the system has to be idle for the monitor to be turned off, the maximum time is \"1 hour\", \"never\" is not possible. From the command line execute the following commands gsettings set org.gnome.settings-daemon.plugins.power sleep-display-ac 0 gsettings set org.gnome.settings-daemon.plugins.power sleep-display-battery 0 gsettings set org.gnome.desktop.session idle-delay 0","title":"Optional - Disable the screen power off"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-install-nvidia-video-drivers","text":"Install the following packages nvidia-glx nvidia-settings nvidia-xconfig Run nvidia-xconfig Reboot","title":"Optional - install nVidia video drivers"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-fix-the-the-local-domains-resolution-problems","text":"NOTE : only on clients, NOT on icub server. Edit /etc/nsswitch replacing the following line hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4 with hosts: files dns","title":"Optional - Fix the the .local domains resolution problems"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-how-to-fix-ssh-lag-on-connect","text":"In case of lag in SSH connections, disable DNS lookup on ssh server, edit the file /etc/ssh/sshd_config adding the following line UseDNS no","title":"Optional - how to fix ssh lag on connect"},{"location":"icub_operating_systems/other-machines/generic-machine/#optional-how-to-fix-the-nobodynobody-nfs-mount-issue","text":"If the NFS mounts shows NOBODY as UID and GUID, this mean that the client and the server are not in the same domain, check the file /etc/idmap.conf Usually it is derived from the domain name mentioned in /etc/resolv.conf so both, server and client must match.","title":"Optional - how to fix the \\\"nobody:nobody\\\" NFS mount issue"},{"location":"icub_operating_systems/other-machines/generic-machine/#special-computers","text":"In case of special machines (such as the cuda workstation or icub laptop) you must follow further steps in order to complete the installation: The iCub server The iCub server laptop The nVidia CUDA workstation","title":"Special computers"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/","text":"Introduction \u00b6 This method uses a pre-built disk image to install the icub-server, this image is a 1:1 copy of a working system: once the image is written on the icub-server disk ( erasing any data currently on the disk! ) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide . Installation procedure \u00b6 This procedure involves the following steps: Create the bootable USB with the imaging tool (CloneZilla) Download the latest iCubOS image Connect the icub-server Boot the USB disk Write the image Reboot icub-server Customize the system Create the bootable USB with the imaging tool (CloneZilla) \u00b6 The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE . Download clonezilla from this link Get a USB 3 USB drive (at least 4 GB of size) Create the live USB following this guide Where to get the latest iCubOS image \u00b6 Please open an issue in the iCub Tech Support Repository on GithHub Download the latest iCubOS image \u00b6 Get the lastest iCubServer image and put it on a external USB drive (not the same were is CloneZilla LIVE) Connect the icub-server \u00b6 You need: USB 3 hub USB keyboard The Bootlabe USB with the imaging tool (see above) The external USB drive with the iCubOS disk image A monitor with DisplayPort input Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head. Boot the USB disk \u00b6 Power on the icub-server and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive. Write the image \u00b6 Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ). _Please note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6) In boot menu, select the option Clonezilla live (Defaut, To RAM) choose your language choose your keyboard layout select the Start_clonezilla option select the device-image option select the local_dev option remove the USB drive with Clonezilla live form the USB hub ensure that the USB with the disk image is connected to the USB hub wait for the USB drive (as in step 8) is shown and press CTRL-C select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1) Restart icub-server \u00b6 Power down the icub-head, then restart. Users and Passwords \u00b6 The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su - Customize the system \u00b6 What now yoo need to do is to customize the installation with your hardware and enviroment","title":"Installation from pre-built image"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#introduction","text":"This method uses a pre-built disk image to install the icub-server, this image is a 1:1 copy of a working system: once the image is written on the icub-server disk ( erasing any data currently on the disk! ) you get a working system, with only a few customiztion required. If you prefer to install the system from scratch, please check the appropriate guide .","title":"Introduction"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#installation-procedure","text":"This procedure involves the following steps: Create the bootable USB with the imaging tool (CloneZilla) Download the latest iCubOS image Connect the icub-server Boot the USB disk Write the image Reboot icub-server Customize the system","title":"Installation procedure"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#create-the-bootable-usb-with-the-imaging-tool-clonezilla","text":"The imaging tool used to create and restore icub-head disk images is CloneZilla LIVE . Download clonezilla from this link Get a USB 3 USB drive (at least 4 GB of size) Create the live USB following this guide","title":"Create the bootable USB with the imaging tool (CloneZilla)"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#where-to-get-the-latest-icubos-image","text":"Please open an issue in the iCub Tech Support Repository on GithHub","title":"Where to get the latest iCubOS image"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#download-the-latest-icubos-image","text":"Get the lastest iCubServer image and put it on a external USB drive (not the same were is CloneZilla LIVE)","title":"Download the latest iCubOS image"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#connect-the-icub-server","text":"You need: USB 3 hub USB keyboard The Bootlabe USB with the imaging tool (see above) The external USB drive with the iCubOS disk image A monitor with DisplayPort input Connect the keyboard, the USB with clonezilla to the hub and the USB disk with the iCubOS disk image. Then connect the hub to a USB port in the iCub head. Connect the monitor to the DisplayPort socket in the iCub head.","title":"Connect the icub-server"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#boot-the-usb-disk","text":"Power on the icub-server and enter BIOS, the select drive with CloneZilla as first in boot order, then boot from that drive.","title":"Boot the USB disk"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#write-the-image","text":"Follow the steps below to write the image on the icub-head HD (detailed instruction about how to use CloneZilla can be found here ). _Please note that the instructions below refers to the lastest clonezilla release available at the time of writing (2.6.6) In boot menu, select the option Clonezilla live (Defaut, To RAM) choose your language choose your keyboard layout select the Start_clonezilla option select the device-image option select the local_dev option remove the USB drive with Clonezilla live form the USB hub ensure that the USB with the disk image is connected to the USB hub wait for the USB drive (as in step 8) is shown and press CTRL-C select the correct drive and partition for the USB drive (as in step 8) (usually partition is n.1)","title":"Write the image"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#restart-icub-server","text":"Power down the icub-head, then restart.","title":"Restart icub-server"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#users-and-passwords","text":"The default user account is Username : icub Password : icub If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : As in any Ubuntu installation, the root user has no password, this means that the direct login (i.e. ssh root@icub-head ) is disabled, but you can always do sudo su -","title":"Users and Passwords"},{"location":"icub_operating_systems/other-machines/icub-server-from-image/#customize-the-system","text":"What now yoo need to do is to customize the installation with your hardware and enviroment","title":"Customize the system"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/","text":"Introductrion \u00b6 Since iCubOS is based on Ubuntu server, we will install Ubuntu server from the default installer and the we manually costimize it. Latest versions \u00b6 Latest version is based on Ubuntu Server 20.04.1 Create the USB installer \u00b6 The first step is download the official Ubuntu 20.04 LTS Server install media from the release page Then please create the USB installer using an USB memory and a tool like Balena Etcher . On Ubuntu website, you can find further info about creating a bootable USB stick on Windows , Ubuntu or macOS Install system \u00b6 Use the following details to install Ubuntu server on icub-server. You can find further details and guides on the official Ubuntu Server installation guide Basic Info \u00b6 Hostname : icub-srv IP address : 10.0.0.1 Username : icub Password : icub Operative System \u00b6 Installed OS : Ubuntu Server 20.04.1 LTS Language : english Country : Italy Locale : en_US.UTF-8 Keyboard : english (US) Hostname : icub-srv Partions : single - 237Gb EXT4 (plus EFI) Kernel version : 5.4.0-56-generic x86_64 Network configuration \u00b6 external connection \u00b6 enp1s0: dhcp4: yes dhcp6: no optional: true internal connection \u00b6 enp2s0: dhcp4: no dhcp6: no addresses: [10.0.10.1/24] See file /etc/netplan/50-icub-srv.yaml for configuration details Cloud Init \u00b6 Please remove cloud init package sudo apt purge cloud-guest-utils cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf IP forwarding \u00b6 To enable IP forwarding edit the file /etc/sysctl.conf by modifying the below line as follows net.ipv4.ip_forward = 1 Network Address Translation \u00b6 The folllowing IPTABLES rules enable the NAT sudo iptables --table nat --append POSTROUTING --out-interface enp1s0 -j MASQUERADE sudo iptables --append FORWARD --in-interface enp2s0 --out-interface enp1s0 -j ACCEPT Install the package iptables-persistent sudo apt install iptables-persistent` See file /etc/iptables/rules.v4 for persistent rules details DNS Server \u00b6 Install package bind9 sudo apt install bind9 bind9utils` See configuration files in /etc/bind for further deatils DHCP Client \u00b6 Edit the file /etc/dhcp/dhclient.conf adding the following lines supersede domain-name \"icub.local\"; prepend domain-name-servers 127.0.0.1; DHCP Server \u00b6 Install package isc-dhcp-server sudo apt install isc-dhcp-server Edit the file /etc//default/isc-dhcp-server as follows INTERFACESv4=\"enp2s0\" Enable logging and update apparmor configuration according See configurations files in /etc/dhcp for configuration details RNDC fix \u00b6 To fix the RNDC please use the following commands sudo cp /etc/bind/rndc.key /etc/dhcp/ddns-keys/ sudo chown root:root /etc/dhcp/ddns-keys/rndc.key sudo chmod 640 /etc/dhcp/ddns-keys/rndc.key Set correct timezone \u00b6 Change the timezone to Europe/Rome ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime NTP Server \u00b6 Install the ntp package sudo apt install ntp add the following lines to the file /etc/ntp.conf server 10.255.8.30 server 10.255.8.31 # the folllowing lines make the server a master server server 127.127.1.0 # local clock fudge 127.127.1.0 stratum 10 broadcastdelay 0.008 NFS Server \u00b6 The laptop hosts two directories and export them using nfs. Both of the are mounted by the other machines on the network, by the PC104 and by the laptop iteself : /exports/code - this contains the robot software sources such as YARP, iCub Software. /local/yarp - this contains the YARP configuration files, shared by all the machine in the network For this to work you need: Install the package nfs-kernel-server sudo apt install nfs-kernel-server Create the exports target paths sudo mkdir -p /exports/code /exports/local_yarp Edit the exports configuration file /etc/exports as follows /exports/code 10.0.0.0/255.255.255.0(rw,sync,no_subtree_check) /exports/local_yarp 10.0.0.0/255.255.255.0(rw,sync,no_subtree_check)","title":"Installation from scratch"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#introductrion","text":"Since iCubOS is based on Ubuntu server, we will install Ubuntu server from the default installer and the we manually costimize it.","title":"Introductrion"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#latest-versions","text":"Latest version is based on Ubuntu Server 20.04.1","title":"Latest versions"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#create-the-usb-installer","text":"The first step is download the official Ubuntu 20.04 LTS Server install media from the release page Then please create the USB installer using an USB memory and a tool like Balena Etcher . On Ubuntu website, you can find further info about creating a bootable USB stick on Windows , Ubuntu or macOS","title":"Create the USB installer"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#install-system","text":"Use the following details to install Ubuntu server on icub-server. You can find further details and guides on the official Ubuntu Server installation guide","title":"Install system"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#basic-info","text":"Hostname : icub-srv IP address : 10.0.0.1 Username : icub Password : icub","title":"Basic Info"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#operative-system","text":"Installed OS : Ubuntu Server 20.04.1 LTS Language : english Country : Italy Locale : en_US.UTF-8 Keyboard : english (US) Hostname : icub-srv Partions : single - 237Gb EXT4 (plus EFI) Kernel version : 5.4.0-56-generic x86_64","title":"Operative System"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#network-configuration","text":"","title":"Network configuration"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#external-connection","text":"enp1s0: dhcp4: yes dhcp6: no optional: true","title":"external connection"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#internal-connection","text":"enp2s0: dhcp4: no dhcp6: no addresses: [10.0.10.1/24] See file /etc/netplan/50-icub-srv.yaml for configuration details","title":"internal connection"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#cloud-init","text":"Please remove cloud init package sudo apt purge cloud-guest-utils cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf","title":"Cloud Init"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#ip-forwarding","text":"To enable IP forwarding edit the file /etc/sysctl.conf by modifying the below line as follows net.ipv4.ip_forward = 1","title":"IP forwarding"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#network-address-translation","text":"The folllowing IPTABLES rules enable the NAT sudo iptables --table nat --append POSTROUTING --out-interface enp1s0 -j MASQUERADE sudo iptables --append FORWARD --in-interface enp2s0 --out-interface enp1s0 -j ACCEPT Install the package iptables-persistent sudo apt install iptables-persistent` See file /etc/iptables/rules.v4 for persistent rules details","title":"Network Address Translation"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dns-server","text":"Install package bind9 sudo apt install bind9 bind9utils` See configuration files in /etc/bind for further deatils","title":"DNS Server"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dhcp-client","text":"Edit the file /etc/dhcp/dhclient.conf adding the following lines supersede domain-name \"icub.local\"; prepend domain-name-servers 127.0.0.1;","title":"DHCP Client"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#dhcp-server","text":"Install package isc-dhcp-server sudo apt install isc-dhcp-server Edit the file /etc//default/isc-dhcp-server as follows INTERFACESv4=\"enp2s0\" Enable logging and update apparmor configuration according See configurations files in /etc/dhcp for configuration details","title":"DHCP Server"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#rndc-fix","text":"To fix the RNDC please use the following commands sudo cp /etc/bind/rndc.key /etc/dhcp/ddns-keys/ sudo chown root:root /etc/dhcp/ddns-keys/rndc.key sudo chmod 640 /etc/dhcp/ddns-keys/rndc.key","title":"RNDC fix"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#set-correct-timezone","text":"Change the timezone to Europe/Rome ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime","title":"Set correct timezone"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#ntp-server","text":"Install the ntp package sudo apt install ntp add the following lines to the file /etc/ntp.conf server 10.255.8.30 server 10.255.8.31 # the folllowing lines make the server a master server server 127.127.1.0 # local clock fudge 127.127.1.0 stratum 10 broadcastdelay 0.008","title":"NTP Server"},{"location":"icub_operating_systems/other-machines/icub-server-from-scratch/#nfs-server","text":"The laptop hosts two directories and export them using nfs. Both of the are mounted by the other machines on the network, by the PC104 and by the laptop iteself : /exports/code - this contains the robot software sources such as YARP, iCub Software. /local/yarp - this contains the YARP configuration files, shared by all the machine in the network For this to work you need: Install the package nfs-kernel-server sudo apt install nfs-kernel-server Create the exports target paths sudo mkdir -p /exports/code /exports/local_yarp Edit the exports configuration file /etc/exports as follows /exports/code 10.0.0.0/255.255.255.0(rw,sync,no_subtree_check) /exports/local_yarp 10.0.0.0/255.255.255.0(rw,sync,no_subtree_check)","title":"NFS Server"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/","text":"Introduction \u00b6 This page contains guidelines for installation of the iCub server laptop so that it matches the requirements of the Linux on the pc104 (open call configuration). We assume you have installed a working Debian or Ubuntu on the laptop. You can freely decide to install 32 bit or 64 bit, the code compiles on both architectures. Be aware that if you plan to share the repository with other machines, all machines need to have the same architecture (32 versus 64 bits, same versions of the libraries). A possibility would be to share the same code directory and different builds. Prerequisite : basic system setup for a iCub machine \u00b6 Please follow the instructions on page Generic iCub machine installation instructions , in order to prepare a generic machine for the iCub network. NOTE : set user as \" icub \" and hostname as \" icubsrv \" (not mandatory, but suggested) Then follow the below steps to customize it as the iCub Laptop The host file \u00b6 Add following lines in the file /etc/hosts 10.0.0.2 icub-head icub-head.icub.local pc104 pc104.icub.local NFS Server \u00b6 The laptop hosts two directories and export them using nfs. Both of the are mounted by the other machines on the network, by the PC104 and by the laptop iteself : /exports/code - this contains the robot software sources such as YARP, iCub Software. /local/yarp - this contains the YARP configuration files, shared by all the machine in the network. For this to work you need: install nfs server on the laptop: sudo apt-get install nfs-kernel-server nfs-common portmap creates the directories that will be exported: sudo mkdir -p /exports/code sudo mkdir -p /exports/local_yarp Set appropriate permissions to the icub user: sudo chown icub:icub -R /exports/code sudo chown icub:icub -R /exports/local_yarp Now configure the nfs-kernel-server: Add these lines to /etc/exports: /exports/code 10.0.0.0/255.255.255.0(rw,sync,no_root_squash,no_subtree_check) /exports/local_yarp 10.0.0.0/255.255.255.0(rw,sync,no_root_squash,no_subtree_check) You might need to restart the nfs server. sudo /etc/init.d/nfs-kernel-server restart Or just reboot the machine. Software repositories \u00b6 Create a symbolic link to the code export path as follows (as root) sudo ln -s /exports/code /usr/local/src/robot Then clone the icub software repositories into /exports/code , as follows cd /exports/code git clone https://github.com/robotology/yarp.git git clone https://github.com/robotology/icub-main.git git clone https://github.com/robotology/icub-firmware-shared git clone https://github.com/robotology/icub-firmware git clone https://github.com/robotology/icub-firmware-build YARP local path \u00b6 Create a symbolic link to the local yarp export path as follows (as root) mkdir -p /home/icub/.local/share ln -s /exports/local_yarp /home/icub/.local/share/yarp Install the ssh keys for password-less login on PC104 \u00b6 Log in as icub and create an ssh key. ssh-keygen -t rsa Leave all choises to default just by pressing return button\\ Upload this key file to pc104 ssh-copy-id -i /home/icub/.ssh/id_rsa.pub icub@pc104 Other configurations \u00b6 IP forwarding and NAT \u00b6 Enable NAT and port forwarding so that the pc104 (and other machines on the network) have internet access (using wlan0 as external network interface) Enable IP forwarding : edit the file /etc/sysctl.conf by modifying the below line as follows net.ipv4.ip_forward = 1 Setup Network Address Translation : add the following file /etc/network/if-up.d/natting as follows #!/bin/sh -e iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE iptables --append FORWARD --in-interface eth0 -j ACCEPT Note about natting \u00b6 Please check that: The name of your network interfaces are correct (in the above script wlan0 is the EXTERNAL interface - connecting to the external world - and eth0 is the INTERNAL interfaceg - connection to the PC104) The above script must be executable, otherwise you can made it executuable by chmod a+x /etc/network/if-up.d/natting Netplan and ifup scripts \u00b6 The netplan (installed starting from Ubuntu 18.04) is not compatible with IF-UP scripts (see this (link)[ https://askubuntu.com/questions/1117960/how-to-use-netplan-to-do-the-same-as-was-being-done-using-iptables ] ), so a workaroun is to use networkd-dispatcher. This (FAQ)[ https://netplan.io/faq#use-pre-up-post-up-etc-hook-scripts ] gives an example on how to do it: using networkd-dispatcher to run existing ifup hooks via a script installed in /etc/networkd-dispatcher/routable.d/50-ifup-hooks #!/bin/sh for d in up post-up; do hookdir=/etc/network/if-${d}.d [ -e $hookdir ] && /bin/run-parts $hookdir done exit 0 Fix IP and DNS \u00b6 Use the following configuration for the network # The primary network interface auto eth0 allow-hotplug eth0 iface eth0 inet static address 10.0.0.1 netmask 255.255.255.0 network 10.0.0.0 broadcast 10.0.0.255 dns-search icub.local Clock synchronization \u00b6 Download the ntp package sudo apt-get install ntp Your Laptop has to be the clock of the connection with the pc104 in case of no internet access so replace those lines from the file /etc/ntp.conf server 0.ubuntu.pool.ntp.org server 1.ubuntu.pool.ntp.org server 2.ubuntu.pool.ntp.org server 3.ubuntu.pool.ntp.org or comment them by adding a # in front each lines and add those lines instead # the folllowing lines make the server a master server server 127.127.1.0 # local clock fudge 127.127.1.0 stratum 10 broadcastdelay 0.008 The internal clock of the pc104 resets every time the pc104 is restarted. It is important you configure your local network so that the pc104 has the correct time. In general it is a good idea if all the machines on the iCub network have synchronized clock via NTP","title":"The laptop used as icub server"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#introduction","text":"This page contains guidelines for installation of the iCub server laptop so that it matches the requirements of the Linux on the pc104 (open call configuration). We assume you have installed a working Debian or Ubuntu on the laptop. You can freely decide to install 32 bit or 64 bit, the code compiles on both architectures. Be aware that if you plan to share the repository with other machines, all machines need to have the same architecture (32 versus 64 bits, same versions of the libraries). A possibility would be to share the same code directory and different builds.","title":"Introduction"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#prerequisite-basic-system-setup-for-a-icub-machine","text":"Please follow the instructions on page Generic iCub machine installation instructions , in order to prepare a generic machine for the iCub network. NOTE : set user as \" icub \" and hostname as \" icubsrv \" (not mandatory, but suggested) Then follow the below steps to customize it as the iCub Laptop","title":"Prerequisite : basic system setup for a iCub machine"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#the-host-file","text":"Add following lines in the file /etc/hosts 10.0.0.2 icub-head icub-head.icub.local pc104 pc104.icub.local","title":"The host file"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#nfs-server","text":"The laptop hosts two directories and export them using nfs. Both of the are mounted by the other machines on the network, by the PC104 and by the laptop iteself : /exports/code - this contains the robot software sources such as YARP, iCub Software. /local/yarp - this contains the YARP configuration files, shared by all the machine in the network. For this to work you need: install nfs server on the laptop: sudo apt-get install nfs-kernel-server nfs-common portmap creates the directories that will be exported: sudo mkdir -p /exports/code sudo mkdir -p /exports/local_yarp Set appropriate permissions to the icub user: sudo chown icub:icub -R /exports/code sudo chown icub:icub -R /exports/local_yarp Now configure the nfs-kernel-server: Add these lines to /etc/exports: /exports/code 10.0.0.0/255.255.255.0(rw,sync,no_root_squash,no_subtree_check) /exports/local_yarp 10.0.0.0/255.255.255.0(rw,sync,no_root_squash,no_subtree_check) You might need to restart the nfs server. sudo /etc/init.d/nfs-kernel-server restart Or just reboot the machine.","title":"NFS Server"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#software-repositories","text":"Create a symbolic link to the code export path as follows (as root) sudo ln -s /exports/code /usr/local/src/robot Then clone the icub software repositories into /exports/code , as follows cd /exports/code git clone https://github.com/robotology/yarp.git git clone https://github.com/robotology/icub-main.git git clone https://github.com/robotology/icub-firmware-shared git clone https://github.com/robotology/icub-firmware git clone https://github.com/robotology/icub-firmware-build","title":"Software repositories"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#yarp-local-path","text":"Create a symbolic link to the local yarp export path as follows (as root) mkdir -p /home/icub/.local/share ln -s /exports/local_yarp /home/icub/.local/share/yarp","title":"YARP local path"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#install-the-ssh-keys-for-password-less-login-on-pc104","text":"Log in as icub and create an ssh key. ssh-keygen -t rsa Leave all choises to default just by pressing return button\\ Upload this key file to pc104 ssh-copy-id -i /home/icub/.ssh/id_rsa.pub icub@pc104","title":"Install the ssh keys for password-less login on PC104"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#other-configurations","text":"","title":"Other configurations"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#ip-forwarding-and-nat","text":"Enable NAT and port forwarding so that the pc104 (and other machines on the network) have internet access (using wlan0 as external network interface) Enable IP forwarding : edit the file /etc/sysctl.conf by modifying the below line as follows net.ipv4.ip_forward = 1 Setup Network Address Translation : add the following file /etc/network/if-up.d/natting as follows #!/bin/sh -e iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE iptables --append FORWARD --in-interface eth0 -j ACCEPT","title":"IP forwarding and NAT"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#note-about-natting","text":"Please check that: The name of your network interfaces are correct (in the above script wlan0 is the EXTERNAL interface - connecting to the external world - and eth0 is the INTERNAL interfaceg - connection to the PC104) The above script must be executable, otherwise you can made it executuable by chmod a+x /etc/network/if-up.d/natting","title":"Note about natting"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#netplan-and-ifup-scripts","text":"The netplan (installed starting from Ubuntu 18.04) is not compatible with IF-UP scripts (see this (link)[ https://askubuntu.com/questions/1117960/how-to-use-netplan-to-do-the-same-as-was-being-done-using-iptables ] ), so a workaroun is to use networkd-dispatcher. This (FAQ)[ https://netplan.io/faq#use-pre-up-post-up-etc-hook-scripts ] gives an example on how to do it: using networkd-dispatcher to run existing ifup hooks via a script installed in /etc/networkd-dispatcher/routable.d/50-ifup-hooks #!/bin/sh for d in up post-up; do hookdir=/etc/network/if-${d}.d [ -e $hookdir ] && /bin/run-parts $hookdir done exit 0","title":"Netplan and ifup scripts"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#fix-ip-and-dns","text":"Use the following configuration for the network # The primary network interface auto eth0 allow-hotplug eth0 iface eth0 inet static address 10.0.0.1 netmask 255.255.255.0 network 10.0.0.0 broadcast 10.0.0.255 dns-search icub.local","title":"Fix IP and DNS"},{"location":"icub_operating_systems/other-machines/icub-server-laptop/#clock-synchronization","text":"Download the ntp package sudo apt-get install ntp Your Laptop has to be the clock of the connection with the pc104 in case of no internet access so replace those lines from the file /etc/ntp.conf server 0.ubuntu.pool.ntp.org server 1.ubuntu.pool.ntp.org server 2.ubuntu.pool.ntp.org server 3.ubuntu.pool.ntp.org or comment them by adding a # in front each lines and add those lines instead # the folllowing lines make the server a master server server 127.127.1.0 # local clock fudge 127.127.1.0 stratum 10 broadcastdelay 0.008 The internal clock of the pc104 resets every time the pc104 is restarted. It is important you configure your local network so that the pc104 has the correct time. In general it is a good idea if all the machines on the iCub network have synchronized clock via NTP","title":"Clock synchronization"},{"location":"icub_operating_systems/pc104/icub-live/","text":"Introduction \u00b6 The pc104 located inside the iCub head runs a full Debian distribution. This version of Linux has been customized for the specific application and to boot from an USB key. As the iCub (project) grows up, many updates have been performed to this Linux usb-key image to follow the hardware as well as the Debian distribution changes. Stable versions are frozen into image files and uploaded to the iCub webserver. At any time to determine the version of the image is running on your iCub, the following files in the root of the filesystem can be inspected: VERSION_PC104 : contains the version of the image ChangeLog_PC104 : list changes to the image Latest version \u00b6 The latest version is 7.10 based on Debian 10 (Buster) . Versioning \u00b6 1.x This is an Etch'n'half based distribution, built on a Debian LIVE system. 2.x This is a Debian Lenny based distribution, built on a Debian LIVE system. 3.x This is a Debian Squeeze based distribution, contains a kernel with Real-Time patch ). 4.x This is a Debian Wheezy based distribution, this version contains an updated version of libportaudio. 5.x This is a Debian Wheezy based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 6.x This is a Debian Jessie based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 7.9.x This is a Debian Stretch (v9) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 7.10.x This is a Debian Buster (v10) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) Starting from version 5.0, the image file name is composed by four parts: a a major release , a minor release , a build release that is a string containing the build date and a kernel flavor string, which describes the kernel architecture the image is built for. For example, icub-live_5.0-14.11.12-rt-amd64.iso is: 5 is the major release 0 is the minor release 14.11.12 is the build release (Year.Month.Day) rt-amd64 is the kernel flavour Users and Passwords \u00b6 Starting from version 5.0, the default user account is Username : icub Password : live If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : the root user has no password, this means that the direct login (i.e. ssh root@10.0.0.2 ) is disabled, but you can always do sudo su - once connected as icub, to switch to the root user.","title":"Introduction"},{"location":"icub_operating_systems/pc104/icub-live/#introduction","text":"The pc104 located inside the iCub head runs a full Debian distribution. This version of Linux has been customized for the specific application and to boot from an USB key. As the iCub (project) grows up, many updates have been performed to this Linux usb-key image to follow the hardware as well as the Debian distribution changes. Stable versions are frozen into image files and uploaded to the iCub webserver. At any time to determine the version of the image is running on your iCub, the following files in the root of the filesystem can be inspected: VERSION_PC104 : contains the version of the image ChangeLog_PC104 : list changes to the image","title":"Introduction"},{"location":"icub_operating_systems/pc104/icub-live/#latest-version","text":"The latest version is 7.10 based on Debian 10 (Buster) .","title":"Latest version"},{"location":"icub_operating_systems/pc104/icub-live/#versioning","text":"1.x This is an Etch'n'half based distribution, built on a Debian LIVE system. 2.x This is a Debian Lenny based distribution, built on a Debian LIVE system. 3.x This is a Debian Squeeze based distribution, contains a kernel with Real-Time patch ). 4.x This is a Debian Wheezy based distribution, this version contains an updated version of libportaudio. 5.x This is a Debian Wheezy based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 6.x This is a Debian Jessie based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 7.9.x This is a Debian Stretch (v9) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) 7.10.x This is a Debian Buster (v10) based distribution, built on a Debian LIVE system with overlay persistence, compiled for kernel rt-amd64 (x86 64 bit with real time PREEMPT_RT patches) Starting from version 5.0, the image file name is composed by four parts: a a major release , a minor release , a build release that is a string containing the build date and a kernel flavor string, which describes the kernel architecture the image is built for. For example, icub-live_5.0-14.11.12-rt-amd64.iso is: 5 is the major release 0 is the minor release 14.11.12 is the build release (Year.Month.Day) rt-amd64 is the kernel flavour","title":"Versioning"},{"location":"icub_operating_systems/pc104/icub-live/#users-and-passwords","text":"Starting from version 5.0, the default user account is Username : icub Password : live If you want to change the default password simply execute ( this works only if you are using persistence ) passwd icub NOTE : the root user has no password, this means that the direct login (i.e. ssh root@10.0.0.2 ) is disabled, but you can always do sudo su - once connected as icub, to switch to the root user.","title":"Users and Passwords"},{"location":"icub_operating_systems/pc104/the-icub-live-details/","text":"Introduction \u00b6 This page is ment to describe how a icub-live differs from a vanilla debian live systems Note \u00b6 This page is valid ONLY for the PC104 image with version 5.0 and above Additional Packages \u00b6 The image is (at the moment of writing, version 7.10) based on a default Debian Buster (10) LIVE image, but with some additional packages: build-essential sudo gcc g++ make cmake cmake-curses-gui pkg-config ssh openssh-server libtinyxml-dev nfs-common vim less ntpdate libportaudio2 libace-dev libgsl0-dev libcv-dev iperf dnsutils resolvconf libpcap-dev glade libglademm-2.4-dev libgtkmm-2.4-dev libhighgui-dev libcvaux-dev libncurses5-dev alsa-utils subversion git bash-completion meld gedit libraw1394-dev libdc1394-22-dev ethtool usbutils libpcap0.8 netcat-traditional fxload audacity festival nmap The kernel \u00b6 The kernel used at the moment of writing is a x86 AMD64 kernel version 4.19.0-6 amd64 with Real Time patches (the rt-amd64 flavour). Custom files \u00b6 README, VERSION and ChangeLog \u00b6 The following files, available in the root filesystem contains various informations about the LIVE release README : contains useful info about the LIVE imag and its requirements VERSION : contains version info (build version, build date and distro on which this build is created) ChangeLog : contains the release ChangeLog iCub startup scripts \u00b6 Some scripts must to be executed at startup time, so we need to modify the rc.local file as follows #!/bin/sh # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. # run iCub config scripts SCRIPT_DIR=/etc/rciCub.d echo \"Running scripts in $SCRIPT_DIR\" for filename in ${SCRIPT_DIR}/S*.sh; do echo \"Running $filename\" bash $filename done exit 0 In this way, all the startup scripts in /etc/rciCub.d are executed at boot time. Please note that some of the above scripts load kernel modules required by peripherals The NTP script \u00b6 This script is used to syncronize the PC104 clock with the one provided by icub-server (via NTP): #!/bin/sh -e #start script to synchronize data in a separated shell to avoid init process waiting for a response /etc/rciCub.d/synchtime.sh & exit 0 The above scrits only executes the following script in background #!/bin/sh sleep 30 for TRIALS in 0 1 2 3 4 5 6 7 8 9 ; do /usr/sbin/ntpdate-debian -u 2> /dev/null RESULT=$? if [ $RESULT -eq 0 ]; then echo \"ntpdate synch OK \" exit 0 else sleep 20 fi done echo \"ntpdate synch failed: aborting!\" exit 1 The mount script \u00b6 This script is used to mount the remote NFS shares only when the icub-server that exports them is reachable #! /bin/bash # Mount remote filesystems MOUNTS_FILE=\"/etc/rciCub.d/mounts.list\" PACKETS_PER_PING=10 MAX_RETRIES_N=3 SLEEP_TIME_SEC=5 PING_DEST=\"10.0.0.1\" echo \"Mounting remote filesystems..\" COUNT=0 RETVAL=1 while [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] && [ \"$RETVAL\" != \"0\" ] do ping -c $PACKETS_PER_PING -q $PING_DEST RETVAL=$? if [ \"$RETVAL\" != \"0\" ] then echo \"Failed to contact $PING_DEST, sleeping for $SLEEP_TIME_SEC seconds..\" sleep $SLEEP_TIME_SEC fi (( COUNT += 1 )) done if [ \"$RETVAL\" != \"0\" ] then echo \" Failed: impossible to contact $PING_DEST\" exit 1 fi if [ ! -f \"$MOUNTS_FILE\" ] then echo \" Failed: remote mounts file $MOUNTS_FILE not found\" exit 1 fi mapfile -t MOUNTS_ARRAY < $MOUNTS_FILE for i in $(seq ${#MOUNTS_ARRAY[*]}); do if [ \"${MOUNTS_ARRAY[$i]}\" != \"\" ] && [ \"${MOUNTS_ARRAY[$i]:0:1}\" != \"#\" ] then SOURCE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $1}' ) MOUNTPOINT=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $2}' ) FS_TYPE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $3}' ) OPTIONS=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $4}' ) COUNT=0 RETVAL=1 while [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] && [ \"$RETVAL\" != \"0\" ] do sleep $SLEEP_TIME_SEC echo \"Mounting $SOURCE\" mount -t $FS_TYPE -o $OPTIONS $SOURCE $MOUNTPOINT RETVAL=$? if [ \"$RETVAL\" != \"0\" ] then sleep $SLEEP_TIME_SEC fi (( COUNT += 1 )) done fi done exit 0 The mount.list file used by the mount script is as follows # Source Dest_mountpoint FS_type options # (please do not use blank spaces) 10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto,hard,intr 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs _netdev,auto,hard,intr Kernel modules \u00b6 The following kernel modules have been compiled manually and added to the system: - AERFX2 driver - CFW002 driver Other files (libraries, header, UDEV scripts, start-up scripts, configuration files) required by each module have been added to the live image (see module specific instruction above). The path /usr/local/src contains the modules source files Network configuration \u00b6 The configuration is done via the file /etc/network/interfaces as follows # The primary network interface (Motors network) allow-hotplug eth0 iface eth0 inet static address 10.0.1.104 netmask 255.255.255.0 auto eth0 # The secondary network interface (External network) allow-hotplug eth1 iface eth1 inet static address 10.0.0.2 netmask 255.255.255.0 network 10.0.0.0 broadcast 10.0.0.255 gateway 10.0.0.1 dns-nameservers 10.0.0.1 8.8.8.8 dns-domain icub.local dns-search icub.local auto eth1 SSH configuration \u00b6 In order to speed up SSH connection, the DNS lookup is disabled with parameter UseDNS no in SSH server configuration file /etc/ssh/sshd_config Because the live system disables the password authentication at system startup, the script /lib/live/config/9100-openssh-login is used to enable it on starup by attind the following line to /etc/ssh/sshd_config PasswordAuthentication yes NTP configuration \u00b6 We use icub-srv (10.0.0.1) as NTP server. The package ntp is installed but not executed, so we add the followng line to /etc/ntp.conf server 10.0.0.1 and we change the file /etc/default/ntp as follows STARTUP_DISABLED='yes' NFS configuration \u00b6 we mount the following two remote NFS shares from icub-srv 10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto,hard,intr 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs _netdev,auto,hard,intr So, the startup script is use to try to mount those shares, see /etc/rc_iCub.d/s90_mount-remote-fs.sh Moreover, in order to mount the above shares with the correct user rights, we add the following line to the file /etc/default/nfs-common NEED_IDMAPD=yes Hostname \u00b6 The hostname in /etc/hostname is set to pc104 And the file /etc/hosts is as follows 127.0.0.1 localhost 127.0.1.1 pc104.icub.local pc104 10.0.0.1 icubsrv User environment \u00b6 The SKEL /etc/skel files are used to generate the desired user environment for the icub user modfing the following files .bashrc \u00b6 #Load the iCub custom bashrc ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi .bashrc_iCub # .bashrc_iCub # setup the iCub enviroment if [ \"$ICUBRC_FILE_LOADED\" ]; then return fi export ICUBRC_FILE_LOADED=\"true\" if [ \"$PS1\" ]; then echo \"Setting up yarp and iCub env vars\" fi # YARP and iCub enviroment variables export ROBOT_CODE=/usr/local/src/robot export ICUBcontrib_DIR=$ROBOT_CODE/iCubContrib export YARP_ROOT=$ROBOT_CODE/yarp export YARP_DIR=$YARP_ROOT/build export ICUB_ROOT=${ROBOT_CODE}/icub-main export ICUB_DIR=${ICUB_ROOT}/build export icub_firmware_shared_DIR=${ROBOT_CODE}/icub-firmware-shared/build export YARP_DATA_DIRS=${YARP_DIR}/share/yarp:${ICUB_DIR}/share/iCub:${ICUBcontrib_DIR}/share/ICUBcontrib export FIRMWARE_BIN=${ROBOT_CODE}/icub-firmware/build # Set the name of your robot here. # Please change also the root user password export YARP_ROBOT_NAME= if [ \"$YARP_ROBOT_NAME\" = \"\" ] && [ -f \"${ROBOT_CODE}/yarp_robot_name.txt\" ] then export YARP_ROBOT_NAME=$( head --lines=1 ${ROBOT_CODE}/yarp_robot_name.txt ) fi # Set-up optimizations export CMAKE_BUILD_TYPE=Release export PATH=$PATH:$ICUB_DIR/bin:$YARP_DIR/bin # DebugStream customization export YARP_VERBOSE_OUTPUT=0 export YARP_COLORED_OUTPUT=1 export YARP_TRACE_ENABLE=0 export YARP_FORWARD_LOG_ENABLE=0 # To enable tab completion on yarp port names if [ -f $YARP_ROOT/scripts/yarp_completion ]; then source $YARP_ROOT/scripts/yarp_completion fi .gitconfig \u00b6 [core] pager = less -FRSX editor = vim autocrlf = input [merge] tool = vimdiff [credential] helper = cache --timeout=7200 [branch] autosetuprebase = always [user] name = iCub User email = robotcub-hackers@lists.sourceforge.net .ssh/authorized_keys \u00b6 This file contains the key for passwordless login .local/share/yarp/REMOTEFS_NOT_MOUNTED \u00b6 This is a placeholder for the remote mounted path Other improvements \u00b6 Real time \u00b6 The following files are modified in order to obtain better real time networking performances /etc/security/limits.d/icub.conf icub soft rtprio 99 icub hard rtprio 99 /etc/sysctl.d/20-net-rbuffer.conf # This sets the max OS receive buffer size for all types of connections net.core.rmem_max=8388608 How the iCub LIVE image is built \u00b6 The iCub live ISO image is built with a custom script based on the Debian LIVE tools (included in the package live-build).","title":"Details"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#introduction","text":"This page is ment to describe how a icub-live differs from a vanilla debian live systems","title":"Introduction"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#note","text":"This page is valid ONLY for the PC104 image with version 5.0 and above","title":"Note"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#additional-packages","text":"The image is (at the moment of writing, version 7.10) based on a default Debian Buster (10) LIVE image, but with some additional packages: build-essential sudo gcc g++ make cmake cmake-curses-gui pkg-config ssh openssh-server libtinyxml-dev nfs-common vim less ntpdate libportaudio2 libace-dev libgsl0-dev libcv-dev iperf dnsutils resolvconf libpcap-dev glade libglademm-2.4-dev libgtkmm-2.4-dev libhighgui-dev libcvaux-dev libncurses5-dev alsa-utils subversion git bash-completion meld gedit libraw1394-dev libdc1394-22-dev ethtool usbutils libpcap0.8 netcat-traditional fxload audacity festival nmap","title":"Additional Packages"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-kernel","text":"The kernel used at the moment of writing is a x86 AMD64 kernel version 4.19.0-6 amd64 with Real Time patches (the rt-amd64 flavour).","title":"The kernel"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#custom-files","text":"","title":"Custom files"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#readme-version-and-changelog","text":"The following files, available in the root filesystem contains various informations about the LIVE release README : contains useful info about the LIVE imag and its requirements VERSION : contains version info (build version, build date and distro on which this build is created) ChangeLog : contains the release ChangeLog","title":"README, VERSION and ChangeLog"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#icub-startup-scripts","text":"Some scripts must to be executed at startup time, so we need to modify the rc.local file as follows #!/bin/sh # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. # run iCub config scripts SCRIPT_DIR=/etc/rciCub.d echo \"Running scripts in $SCRIPT_DIR\" for filename in ${SCRIPT_DIR}/S*.sh; do echo \"Running $filename\" bash $filename done exit 0 In this way, all the startup scripts in /etc/rciCub.d are executed at boot time. Please note that some of the above scripts load kernel modules required by peripherals","title":"iCub startup scripts"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-ntp-script","text":"This script is used to syncronize the PC104 clock with the one provided by icub-server (via NTP): #!/bin/sh -e #start script to synchronize data in a separated shell to avoid init process waiting for a response /etc/rciCub.d/synchtime.sh & exit 0 The above scrits only executes the following script in background #!/bin/sh sleep 30 for TRIALS in 0 1 2 3 4 5 6 7 8 9 ; do /usr/sbin/ntpdate-debian -u 2> /dev/null RESULT=$? if [ $RESULT -eq 0 ]; then echo \"ntpdate synch OK \" exit 0 else sleep 20 fi done echo \"ntpdate synch failed: aborting!\" exit 1","title":"The NTP script"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#the-mount-script","text":"This script is used to mount the remote NFS shares only when the icub-server that exports them is reachable #! /bin/bash # Mount remote filesystems MOUNTS_FILE=\"/etc/rciCub.d/mounts.list\" PACKETS_PER_PING=10 MAX_RETRIES_N=3 SLEEP_TIME_SEC=5 PING_DEST=\"10.0.0.1\" echo \"Mounting remote filesystems..\" COUNT=0 RETVAL=1 while [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] && [ \"$RETVAL\" != \"0\" ] do ping -c $PACKETS_PER_PING -q $PING_DEST RETVAL=$? if [ \"$RETVAL\" != \"0\" ] then echo \"Failed to contact $PING_DEST, sleeping for $SLEEP_TIME_SEC seconds..\" sleep $SLEEP_TIME_SEC fi (( COUNT += 1 )) done if [ \"$RETVAL\" != \"0\" ] then echo \" Failed: impossible to contact $PING_DEST\" exit 1 fi if [ ! -f \"$MOUNTS_FILE\" ] then echo \" Failed: remote mounts file $MOUNTS_FILE not found\" exit 1 fi mapfile -t MOUNTS_ARRAY < $MOUNTS_FILE for i in $(seq ${#MOUNTS_ARRAY[*]}); do if [ \"${MOUNTS_ARRAY[$i]}\" != \"\" ] && [ \"${MOUNTS_ARRAY[$i]:0:1}\" != \"#\" ] then SOURCE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $1}' ) MOUNTPOINT=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $2}' ) FS_TYPE=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $3}' ) OPTIONS=$( echo ${MOUNTS_ARRAY[$i]} | awk '{ print $4}' ) COUNT=0 RETVAL=1 while [ \"$COUNT\" -lt \"$MAX_RETRIES_N\" ] && [ \"$RETVAL\" != \"0\" ] do sleep $SLEEP_TIME_SEC echo \"Mounting $SOURCE\" mount -t $FS_TYPE -o $OPTIONS $SOURCE $MOUNTPOINT RETVAL=$? if [ \"$RETVAL\" != \"0\" ] then sleep $SLEEP_TIME_SEC fi (( COUNT += 1 )) done fi done exit 0 The mount.list file used by the mount script is as follows # Source Dest_mountpoint FS_type options # (please do not use blank spaces) 10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto,hard,intr 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs _netdev,auto,hard,intr","title":"The mount script"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#kernel-modules","text":"The following kernel modules have been compiled manually and added to the system: - AERFX2 driver - CFW002 driver Other files (libraries, header, UDEV scripts, start-up scripts, configuration files) required by each module have been added to the live image (see module specific instruction above). The path /usr/local/src contains the modules source files","title":"Kernel modules"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#network-configuration","text":"The configuration is done via the file /etc/network/interfaces as follows # The primary network interface (Motors network) allow-hotplug eth0 iface eth0 inet static address 10.0.1.104 netmask 255.255.255.0 auto eth0 # The secondary network interface (External network) allow-hotplug eth1 iface eth1 inet static address 10.0.0.2 netmask 255.255.255.0 network 10.0.0.0 broadcast 10.0.0.255 gateway 10.0.0.1 dns-nameservers 10.0.0.1 8.8.8.8 dns-domain icub.local dns-search icub.local auto eth1","title":"Network configuration"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#ssh-configuration","text":"In order to speed up SSH connection, the DNS lookup is disabled with parameter UseDNS no in SSH server configuration file /etc/ssh/sshd_config Because the live system disables the password authentication at system startup, the script /lib/live/config/9100-openssh-login is used to enable it on starup by attind the following line to /etc/ssh/sshd_config PasswordAuthentication yes","title":"SSH configuration"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#ntp-configuration","text":"We use icub-srv (10.0.0.1) as NTP server. The package ntp is installed but not executed, so we add the followng line to /etc/ntp.conf server 10.0.0.1 and we change the file /etc/default/ntp as follows STARTUP_DISABLED='yes'","title":"NTP configuration"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#nfs-configuration","text":"we mount the following two remote NFS shares from icub-srv 10.0.0.1:/exports/code /usr/local/src/robot nfs _netdev,auto,hard,intr 10.0.0.1:/exports/local_yarp /home/icub/.local/share/yarp nfs _netdev,auto,hard,intr So, the startup script is use to try to mount those shares, see /etc/rc_iCub.d/s90_mount-remote-fs.sh Moreover, in order to mount the above shares with the correct user rights, we add the following line to the file /etc/default/nfs-common NEED_IDMAPD=yes","title":"NFS configuration"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#hostname","text":"The hostname in /etc/hostname is set to pc104 And the file /etc/hosts is as follows 127.0.0.1 localhost 127.0.1.1 pc104.icub.local pc104 10.0.0.1 icubsrv","title":"Hostname"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#user-environment","text":"The SKEL /etc/skel files are used to generate the desired user environment for the icub user modfing the following files","title":"User environment"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#bashrc","text":"#Load the iCub custom bashrc ICUBRC_FILE=\"${HOME}/.bashrc_iCub\" if [ -f \"$ICUBRC_FILE\" ]; then source $ICUBRC_FILE fi .bashrc_iCub # .bashrc_iCub # setup the iCub enviroment if [ \"$ICUBRC_FILE_LOADED\" ]; then return fi export ICUBRC_FILE_LOADED=\"true\" if [ \"$PS1\" ]; then echo \"Setting up yarp and iCub env vars\" fi # YARP and iCub enviroment variables export ROBOT_CODE=/usr/local/src/robot export ICUBcontrib_DIR=$ROBOT_CODE/iCubContrib export YARP_ROOT=$ROBOT_CODE/yarp export YARP_DIR=$YARP_ROOT/build export ICUB_ROOT=${ROBOT_CODE}/icub-main export ICUB_DIR=${ICUB_ROOT}/build export icub_firmware_shared_DIR=${ROBOT_CODE}/icub-firmware-shared/build export YARP_DATA_DIRS=${YARP_DIR}/share/yarp:${ICUB_DIR}/share/iCub:${ICUBcontrib_DIR}/share/ICUBcontrib export FIRMWARE_BIN=${ROBOT_CODE}/icub-firmware/build # Set the name of your robot here. # Please change also the root user password export YARP_ROBOT_NAME= if [ \"$YARP_ROBOT_NAME\" = \"\" ] && [ -f \"${ROBOT_CODE}/yarp_robot_name.txt\" ] then export YARP_ROBOT_NAME=$( head --lines=1 ${ROBOT_CODE}/yarp_robot_name.txt ) fi # Set-up optimizations export CMAKE_BUILD_TYPE=Release export PATH=$PATH:$ICUB_DIR/bin:$YARP_DIR/bin # DebugStream customization export YARP_VERBOSE_OUTPUT=0 export YARP_COLORED_OUTPUT=1 export YARP_TRACE_ENABLE=0 export YARP_FORWARD_LOG_ENABLE=0 # To enable tab completion on yarp port names if [ -f $YARP_ROOT/scripts/yarp_completion ]; then source $YARP_ROOT/scripts/yarp_completion fi","title":".bashrc"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#gitconfig","text":"[core] pager = less -FRSX editor = vim autocrlf = input [merge] tool = vimdiff [credential] helper = cache --timeout=7200 [branch] autosetuprebase = always [user] name = iCub User email = robotcub-hackers@lists.sourceforge.net","title":".gitconfig"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#sshauthorized_keys","text":"This file contains the key for passwordless login","title":".ssh/authorized_keys"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#localshareyarpremotefs_not_mounted","text":"This is a placeholder for the remote mounted path","title":".local/share/yarp/REMOTEFS_NOT_MOUNTED"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#other-improvements","text":"","title":"Other improvements"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#real-time","text":"The following files are modified in order to obtain better real time networking performances /etc/security/limits.d/icub.conf icub soft rtprio 99 icub hard rtprio 99 /etc/sysctl.d/20-net-rbuffer.conf # This sets the max OS receive buffer size for all types of connections net.core.rmem_max=8388608","title":"Real time"},{"location":"icub_operating_systems/pc104/the-icub-live-details/#how-the-icub-live-image-is-built","text":"The iCub live ISO image is built with a custom script based on the Debian LIVE tools (included in the package live-build).","title":"How the iCub LIVE image is built"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/","text":"Which version do I need? \u00b6 This question is quite common whenever the number of versions and revisions start to become... more than one. The Debian image to use depends on the iCub version: - iCub up to version 1.1 must use a Etch and a Half distribution (image version 1.x). Persistent filesystem allows deep system configuration; if you are happy with the current configuration you can skip this update, while if you really need to change system configuration now you can by applying this update. - iCub from version 1.2 on can use the latest version: we kindly recommend you to keep Debian system updated to the last version (at the time of writing it means the 9.x @ November 2020). For persistent filesystem this configuration can be changed without re-burning a new image, you can just edit the configuration files of the network as you would normally do with Linux system. Burn the Debian image version 7.x (latest) \u00b6 Starting from version 6.0 images come in a compressed archive file containing the USB image to write to an USB memory. Where to download the ZIP archive \u00b6 Compressed archives can be downloaded here How to create the bootable USB drive with the live image \u00b6 Download the latest image from the above link Extract the image Take an USB-2 drive at least of 16 GB size (please note that using an USB3 disk or a huge disk, eg. 32 GB, may not work depending on the version of your PC104) burn the image file (it has the .img extension), you can use the follwing tools: Windows \u00b6 Please use Win32 Disk Imager Linux (command line) \u00b6 Linux users can use the dd command to directly write an IMG file\u2019s contents to a removable media device. Insert the removable media and run the following command on Ubuntu: sudo dd if=/home/user/icub-live_7.10-201126_rt-amd64.img of=/dev/sdX bs=1M Replace /home/user/icub-live_7.10-201126_rt-amd64.img with the correct name of USB image and /dev/sdX with the path to your USB or SD card device. Be very careful to specify the correct disk path here \u2014 if you specify the path to your system drive instead, you\u2019ll write the contents of the image to your operating system drive and corrupt it Linux (GUI tool) \u00b6 There is a GUI available in Ubuntu, called \"Disks\" (gnome-disks) and comes default in later Ubuntu: connect the USB drive and just right-click on the image file and select \"Open with Disk Image Writer\" , then select the drive USB drive you just inserted. See also this guide Burn the Debian image version 5.x (old) \u00b6 From version 5.0 on, the image is based on a Debian LIVE system. Version 5.x images come into a standard ISO Hybrid image file and there is a script to write the image to a USB memory Where to download the ISO image and burn script \u00b6 ISO images and the script can be downloaded here Some images are compressed, if so uncompress it before proceeding. To verify the file has been successfully downloaded, the md5 code can be verified by placing the .md5 file in the same folder as the uncompressed image and typing the following command: md5sum --check MD5FILE.md5 How to put the iso on a USB memory \u00b6 Please use the icub_iso2usb.sh script: this script will create a working bootable USB from the ISO file and ensure compatibility on some old PC104. This scripts will also enable file persistence (see below). NOTE : this script is compatible ONLY with Debian GNU/Linux 7 wheezy and Ubuntu 14.04.3 LTS Trusty What is file persistence and how to use it \u00b6 File persistence is used to write the changes you made to the live filesystem (i.e. if you modify a file or write a new one) to a separate partition on the USB memory, allowing those changes to survive a reboot. The bigger is the USB memory, the more space you have for the new files, so we suggest at least a 4 Gb USB memory. If you mount an USB memory which persistence enable on a normal PC, you will see two partitions: LIVE partition, which contains the live image files PERSITENCE partition, which contains all the modified or new files How to use the icub_iso2usb.sh script \u00b6 This script takes a iCub PC104 live image and write it to an USB memory, optionally enabling file persistence. The script run on a Linux system and requires the following commands to be installed: parted mkdiskimage mkdosfs mkfs.ext4 install-mbr syslinux p7zip On a Debian 7 system, this means that you must install the following packages parted syslinux syslinux-common syslinux-utils dosfstools e2fsprogs p7zip mbr The script usage is the following icub_iso2usb.sh -f LIVE_ISO_FILE -t USB_TARGET_DEVICE [-p PERSISTENCE_SIZE] where: LIVE_ISO_FILE is the live filename (mandatory parameter) USB_TARGET_DEVICE is the device to write to the iso image - important: USE a device not a partition (mandatory parameter) PERSISTENCE_SIZE is the size of overlay partition (in MB) - set to 0 to disable overlay, the default persistence size is 1024 MB Example: icub_iso2usb.sh -f icub-live_4.0-14.11.12-rt-amd64.iso -t sdc There is also an inline help for the script, available with icub_icub2usb.sh -h The image requires an amount of space which is bigger than the the ISO size of a 10%, so setup the persistence partition size accordingly. The script checks if the target USB memory has enough space for live system and persistence (if not disabled), so don't worry. Required customizations \u00b6 Set RobotName variable \u00b6 Edit the file: /home/icub/.bashrc_iCub replace the line: export YARP_ROBOT_NAME=myiCubRobotName00 with the name of your robot e.g. iCubGenova01 clean the CMakeCache before compiling \u00b6 When upgrading the usb key to a different version, remember to clean the CMakeCache before compiling!! This is because some path are likely to be changed in the meanwhile SSH passwordless login \u00b6 User authentication credentials are stored inside the /home/icub/.ssh/authorized_key file; each line in this file is related to a different entry user@host. User credentials can be added also by using this command for each user@machine you want to log from : ssh-copy-id -i /home/user/.ssh/id_rsa.pub icub@pc104 Startup scripts \u00b6 Important : these instructions apply to the recent persistent images of the Linux (starting from 1.7 and 3.0). There are some scripts that customize the Linux when the pc104 boots up; those scripts are inside /etc/rciCub.d folder. Normally, you don\\'t need to modify them, but be aware of them. Other Customizations \u00b6 The persistent version of the Debian distribution is now writable so any customization can be done. Please be aware of what you do, because any changes in configuration file can lead to malfunction. Common Problems and how to solve them \u00b6 I used an USB3 and/or 32 GB disk and the system does not boot \u00b6 Try with a USB2 smaller ( 16GB or better 8 GB) drive. Some PC104 have problems in reading those recent USB drives. The icub_iso2usb.sh script asks me \"The closest location we can manage is.. Is this still acceptable to you?\" \u00b6 Simply press \"Y\" and forget about the warning \"Information: You may need to update /etc/fstab.\" :) Once I created a new USB memory with the PC104 image, ssh complains that \"Remote host identification has changed\" and does not connect to the PC104 \u00b6 This is normal: for security reasons when a new iCub live is executed for the first time, a new SSH Key is created for the PC104 host. Please remove all the entries in the file ~/.ssh/known_hosts that refers to pc104 or 10.0.0.2 and login again. This must be done from each machine you want to connect to the PC104. See also this link I used the live USB first on a computer, then when I plugged it into the PC104 it does not work anymore \u00b6 Probably the PC104 booted correctly, but the network is not reachable (you can check it by connecting a vga cable to the PC104 inside iCub's head) Live systems write some info about the network card the first time they boot on a machine. This implies that if you boot the live on a desktop and then you plug it to a different machine the network may not work (since the network card is different). To fix this you have two options: quick and dirty - on the live USB, open the file /etc/udev/rules.d/70-presisten-net.rules and remove any pair of lines like the following: # PCI device 0x8086:0x10f5 (e1000e) SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"00:1f:16:0b:47:4d\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"eth0\" (of course attributes like address , name or device may not exactly the same in your file) clean and easy - burn another USB and FIRST install it on the PC104 Detailed information \u00b6 If you want to get detailed information about the iCub LIVE image (i.e. the differences from a standard Debian LIVE) please read this page","title":"Installation"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#which-version-do-i-need","text":"This question is quite common whenever the number of versions and revisions start to become... more than one. The Debian image to use depends on the iCub version: - iCub up to version 1.1 must use a Etch and a Half distribution (image version 1.x). Persistent filesystem allows deep system configuration; if you are happy with the current configuration you can skip this update, while if you really need to change system configuration now you can by applying this update. - iCub from version 1.2 on can use the latest version: we kindly recommend you to keep Debian system updated to the last version (at the time of writing it means the 9.x @ November 2020). For persistent filesystem this configuration can be changed without re-burning a new image, you can just edit the configuration files of the network as you would normally do with Linux system.","title":"Which version do I need?"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#burn-the-debian-image-version-7x-latest","text":"Starting from version 6.0 images come in a compressed archive file containing the USB image to write to an USB memory.","title":"Burn the Debian image version 7.x (latest)"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#where-to-download-the-zip-archive","text":"Compressed archives can be downloaded here","title":"Where to download the ZIP archive"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#how-to-create-the-bootable-usb-drive-with-the-live-image","text":"Download the latest image from the above link Extract the image Take an USB-2 drive at least of 16 GB size (please note that using an USB3 disk or a huge disk, eg. 32 GB, may not work depending on the version of your PC104) burn the image file (it has the .img extension), you can use the follwing tools:","title":"How to create the bootable USB drive with the live image"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#windows","text":"Please use Win32 Disk Imager","title":"Windows"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#linux-command-line","text":"Linux users can use the dd command to directly write an IMG file\u2019s contents to a removable media device. Insert the removable media and run the following command on Ubuntu: sudo dd if=/home/user/icub-live_7.10-201126_rt-amd64.img of=/dev/sdX bs=1M Replace /home/user/icub-live_7.10-201126_rt-amd64.img with the correct name of USB image and /dev/sdX with the path to your USB or SD card device. Be very careful to specify the correct disk path here \u2014 if you specify the path to your system drive instead, you\u2019ll write the contents of the image to your operating system drive and corrupt it","title":"Linux (command line)"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#linux-gui-tool","text":"There is a GUI available in Ubuntu, called \"Disks\" (gnome-disks) and comes default in later Ubuntu: connect the USB drive and just right-click on the image file and select \"Open with Disk Image Writer\" , then select the drive USB drive you just inserted. See also this guide","title":"Linux (GUI tool)"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#burn-the-debian-image-version-5x-old","text":"From version 5.0 on, the image is based on a Debian LIVE system. Version 5.x images come into a standard ISO Hybrid image file and there is a script to write the image to a USB memory","title":"Burn the Debian image version 5.x (old)"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#where-to-download-the-iso-image-and-burn-script","text":"ISO images and the script can be downloaded here Some images are compressed, if so uncompress it before proceeding. To verify the file has been successfully downloaded, the md5 code can be verified by placing the .md5 file in the same folder as the uncompressed image and typing the following command: md5sum --check MD5FILE.md5","title":"Where to download the ISO image and burn script"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#how-to-put-the-iso-on-a-usb-memory","text":"Please use the icub_iso2usb.sh script: this script will create a working bootable USB from the ISO file and ensure compatibility on some old PC104. This scripts will also enable file persistence (see below). NOTE : this script is compatible ONLY with Debian GNU/Linux 7 wheezy and Ubuntu 14.04.3 LTS Trusty","title":"How to put the iso on a USB memory"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#what-is-file-persistence-and-how-to-use-it","text":"File persistence is used to write the changes you made to the live filesystem (i.e. if you modify a file or write a new one) to a separate partition on the USB memory, allowing those changes to survive a reboot. The bigger is the USB memory, the more space you have for the new files, so we suggest at least a 4 Gb USB memory. If you mount an USB memory which persistence enable on a normal PC, you will see two partitions: LIVE partition, which contains the live image files PERSITENCE partition, which contains all the modified or new files","title":"What is file persistence and how to use it"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#how-to-use-the-icub_iso2usbsh-script","text":"This script takes a iCub PC104 live image and write it to an USB memory, optionally enabling file persistence. The script run on a Linux system and requires the following commands to be installed: parted mkdiskimage mkdosfs mkfs.ext4 install-mbr syslinux p7zip On a Debian 7 system, this means that you must install the following packages parted syslinux syslinux-common syslinux-utils dosfstools e2fsprogs p7zip mbr The script usage is the following icub_iso2usb.sh -f LIVE_ISO_FILE -t USB_TARGET_DEVICE [-p PERSISTENCE_SIZE] where: LIVE_ISO_FILE is the live filename (mandatory parameter) USB_TARGET_DEVICE is the device to write to the iso image - important: USE a device not a partition (mandatory parameter) PERSISTENCE_SIZE is the size of overlay partition (in MB) - set to 0 to disable overlay, the default persistence size is 1024 MB Example: icub_iso2usb.sh -f icub-live_4.0-14.11.12-rt-amd64.iso -t sdc There is also an inline help for the script, available with icub_icub2usb.sh -h The image requires an amount of space which is bigger than the the ISO size of a 10%, so setup the persistence partition size accordingly. The script checks if the target USB memory has enough space for live system and persistence (if not disabled), so don't worry.","title":"How to use the icub_iso2usb.sh script"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#required-customizations","text":"","title":"Required customizations"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#set-robotname-variable","text":"Edit the file: /home/icub/.bashrc_iCub replace the line: export YARP_ROBOT_NAME=myiCubRobotName00 with the name of your robot e.g. iCubGenova01","title":"Set RobotName variable"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#clean-the-cmakecache-before-compiling","text":"When upgrading the usb key to a different version, remember to clean the CMakeCache before compiling!! This is because some path are likely to be changed in the meanwhile","title":"clean the CMakeCache before compiling"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#ssh-passwordless-login","text":"User authentication credentials are stored inside the /home/icub/.ssh/authorized_key file; each line in this file is related to a different entry user@host. User credentials can be added also by using this command for each user@machine you want to log from : ssh-copy-id -i /home/user/.ssh/id_rsa.pub icub@pc104","title":"SSH passwordless login"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#startup-scripts","text":"Important : these instructions apply to the recent persistent images of the Linux (starting from 1.7 and 3.0). There are some scripts that customize the Linux when the pc104 boots up; those scripts are inside /etc/rciCub.d folder. Normally, you don\\'t need to modify them, but be aware of them.","title":"Startup scripts"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#other-customizations","text":"The persistent version of the Debian distribution is now writable so any customization can be done. Please be aware of what you do, because any changes in configuration file can lead to malfunction.","title":"Other Customizations"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#common-problems-and-how-to-solve-them","text":"","title":"Common Problems and how to solve them"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#i-used-an-usb3-andor-32-gb-disk-and-the-system-does-not-boot","text":"Try with a USB2 smaller ( 16GB or better 8 GB) drive. Some PC104 have problems in reading those recent USB drives.","title":"I used an USB3 and/or 32 GB disk and the system does not boot"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#the-icub_iso2usbsh-script-asks-me-the-closest-location-we-can-manage-is-is-this-still-acceptable-to-you","text":"Simply press \"Y\" and forget about the warning \"Information: You may need to update /etc/fstab.\" :)","title":"The icub_iso2usb.sh script asks me \"The closest location we can manage is.. Is this still acceptable to you?\""},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#once-i-created-a-new-usb-memory-with-the-pc104-image-ssh-complains-that-remote-host-identification-has-changed-and-does-not-connect-to-the-pc104","text":"This is normal: for security reasons when a new iCub live is executed for the first time, a new SSH Key is created for the PC104 host. Please remove all the entries in the file ~/.ssh/known_hosts that refers to pc104 or 10.0.0.2 and login again. This must be done from each machine you want to connect to the PC104. See also this link","title":"Once I created a new USB memory with the PC104 image, ssh complains that \"Remote host identification has changed\" and does not connect to the PC104"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#i-used-the-live-usb-first-on-a-computer-then-when-i-plugged-it-into-the-pc104-it-does-not-work-anymore","text":"Probably the PC104 booted correctly, but the network is not reachable (you can check it by connecting a vga cable to the PC104 inside iCub's head) Live systems write some info about the network card the first time they boot on a machine. This implies that if you boot the live on a desktop and then you plug it to a different machine the network may not work (since the network card is different). To fix this you have two options: quick and dirty - on the live USB, open the file /etc/udev/rules.d/70-presisten-net.rules and remove any pair of lines like the following: # PCI device 0x8086:0x10f5 (e1000e) SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"00:1f:16:0b:47:4d\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"eth0\" (of course attributes like address , name or device may not exactly the same in your file) clean and easy - burn another USB and FIRST install it on the PC104","title":"I used the live USB first on a computer, then when I plugged it into the PC104 it does not work anymore"},{"location":"icub_operating_systems/pc104/the-icub-live-installation/#detailed-information","text":"If you want to get detailed information about the iCub LIVE image (i.e. the differences from a standard Debian LIVE) please read this page","title":"Detailed information"},{"location":"icub_setup_multiple_robots/","text":"Scope of document \u00b6 The purpose of this corner is to describe how multiple iCub robots can be setup How to use two iCub robots in gazebo simulation How to use two real iCub robots on the same network","title":"Summary"},{"location":"icub_setup_multiple_robots/#scope-of-document","text":"The purpose of this corner is to describe how multiple iCub robots can be setup How to use two iCub robots in gazebo simulation How to use two real iCub robots on the same network","title":"Scope of document"},{"location":"icub_setup_multiple_robots/two_robots_real/","text":"How to use two real iCub robots on the same network \u00b6 This page is intended to be used as a practical guide for setting up two real iCub robots together on the same network to run controllers designed for two of them. Ideally, the steps can be extended to multiple robots without any more changes. The following steps are done using iCubGenova02 (aka Purple) and iCubGenova04 (aka Green). The two major modifications are on the Network side and Configuration side. Network Side \u00b6 The first conflict is that both the robots can be accessed by logging into the head using ssh icub-head with the same ip ( 10.0.0.2 ). So, while two robot have to be on the same network this has to be changed. The robots network configuration is set using netplan . Do ssh icub-head and go to /etc/netplan directory. The configuration files for netplan are yaml based. The configuration file loaded by default is 50-icub.yaml and its contents are: Now, change the ip address 10.0.0.2 to some other ip address such as 10.0.0.200 . Once the ip address is change do sudo netplan apply to load the new network configuration file. At this point you will not be able access icub-head any longer and you need to to ssh 10.0.0.200 to reach the head of the robot. NOTE 1: Ensure to switch the ip address back to the original default ip value of 10.0.0.2 and do sudo netplan apply once the experiments with the robot are finished. NOTE 2: Previously the network was configured without using netplan. You can can find the instructions in the history of this wiki page . Robot configurations side \u00b6 To launch an icub robot multiple configuration files are launched through yarprobotinterface . In general, these files are robot specific (Eg. iCubGenova02 ) and contains parameters tuned for that particular robot. But the port names used in all these configuration files are usually the same. So, while trying to launch multiple robots on the same network, port address conflict happens. This issue can be solved by using different port prefix names in the configuration files, e.g. changing from icub to more robot specific like icub02 for iCubGenova02 and icub04 for iCubGenova04 . An example can be found in dic-iit/robots-configuration/icub02-prefix were the iCubGenova02 configuration files have been updated in order to run icub_wbd.xml application with all the port prefixes changed to icub02 . In particular, the following files have to be changed: Update robot yarprobotinterface port prefix (e.g. dic-iit/robots-configuration@91b2ee0 ) Update nterfaces wrapper port prefix (e.g. dic-iit/robots-configuration@47d6a1b ) Add port prefix to whole-Body-Dynamics (e.g. dic-iit/robots-configuration@0808181 ), by adding the following line: <param name= \"portPrefix\" > / <robot-prefix> /wholebodydynamics </param> and adding the prefix to external wrench port names e.g. <param name= \"/<robot-prefix>/wholeBodyDynamics/left_leg/cartesianEndEffectorWrench:o\" > (l_foot,l_sole,root_link) </param> Update cartesian controllers port prefix (e.g. dic-iit/robots-configuration@fe05701 ) As a simple test, you can launch yarpmotorgui --robot <robot-prefix> to try to control the robot, and check all the opened ports with yarp name list .","title":"How to use two real iCub robots on the same network"},{"location":"icub_setup_multiple_robots/two_robots_real/#how-to-use-two-real-icub-robots-on-the-same-network","text":"This page is intended to be used as a practical guide for setting up two real iCub robots together on the same network to run controllers designed for two of them. Ideally, the steps can be extended to multiple robots without any more changes. The following steps are done using iCubGenova02 (aka Purple) and iCubGenova04 (aka Green). The two major modifications are on the Network side and Configuration side.","title":"How to use two real iCub robots on the same network"},{"location":"icub_setup_multiple_robots/two_robots_real/#network-side","text":"The first conflict is that both the robots can be accessed by logging into the head using ssh icub-head with the same ip ( 10.0.0.2 ). So, while two robot have to be on the same network this has to be changed. The robots network configuration is set using netplan . Do ssh icub-head and go to /etc/netplan directory. The configuration files for netplan are yaml based. The configuration file loaded by default is 50-icub.yaml and its contents are: Now, change the ip address 10.0.0.2 to some other ip address such as 10.0.0.200 . Once the ip address is change do sudo netplan apply to load the new network configuration file. At this point you will not be able access icub-head any longer and you need to to ssh 10.0.0.200 to reach the head of the robot. NOTE 1: Ensure to switch the ip address back to the original default ip value of 10.0.0.2 and do sudo netplan apply once the experiments with the robot are finished. NOTE 2: Previously the network was configured without using netplan. You can can find the instructions in the history of this wiki page .","title":"Network Side"},{"location":"icub_setup_multiple_robots/two_robots_real/#robot-configurations-side","text":"To launch an icub robot multiple configuration files are launched through yarprobotinterface . In general, these files are robot specific (Eg. iCubGenova02 ) and contains parameters tuned for that particular robot. But the port names used in all these configuration files are usually the same. So, while trying to launch multiple robots on the same network, port address conflict happens. This issue can be solved by using different port prefix names in the configuration files, e.g. changing from icub to more robot specific like icub02 for iCubGenova02 and icub04 for iCubGenova04 . An example can be found in dic-iit/robots-configuration/icub02-prefix were the iCubGenova02 configuration files have been updated in order to run icub_wbd.xml application with all the port prefixes changed to icub02 . In particular, the following files have to be changed: Update robot yarprobotinterface port prefix (e.g. dic-iit/robots-configuration@91b2ee0 ) Update nterfaces wrapper port prefix (e.g. dic-iit/robots-configuration@47d6a1b ) Add port prefix to whole-Body-Dynamics (e.g. dic-iit/robots-configuration@0808181 ), by adding the following line: <param name= \"portPrefix\" > / <robot-prefix> /wholebodydynamics </param> and adding the prefix to external wrench port names e.g. <param name= \"/<robot-prefix>/wholeBodyDynamics/left_leg/cartesianEndEffectorWrench:o\" > (l_foot,l_sole,root_link) </param> Update cartesian controllers port prefix (e.g. dic-iit/robots-configuration@fe05701 ) As a simple test, you can launch yarpmotorgui --robot <robot-prefix> to try to control the robot, and check all the opened ports with yarp name list .","title":"Robot configurations side"},{"location":"icub_setup_multiple_robots/two_robots_simulation/","text":"How to use two iCub robots in gazebo simulation \u00b6 In order to use icub robot in gazebo simulation environment one needs to have the repository icub-gazebo and have to set GAZEBO_MODEL_PATH to this repository as indicated in the readme file. Furthermore, icub-gazebo-wholebody repository contains complex gazebo models and gazebo worlds , for example icub-standup-world . In general, these two repositories can be used as standalone or they can be used as a part of robotology-superbuild . When an iCub model is spawned in gazebo, all the ports that are opened take the name placed in the gazebo_icub_robotname.ini configuration file as a port prefix. The default name used is icubSim : gazeboYarpPluginsRobotName icubSim The model name displayed in gazebo is taken iCub from the icub.sdf file and the gazebo-yarp-plugin motor control board ports and ports of the other gazebo-yarp-plugins you placed in your iCub model are opened with the portprefix /icubSim . If you are trying to put another iCub model in the simulation, it will fail due to the port conflict as it will try to open another set of robot ports with the same port prefix as /icubSim . So, in order to get around this problem, you have to comment out the line gazeboYarpPluginsRobotName icubSim of gazebo_icub_robotname.ini configuration file. If you are using the two repositories icub-gazebo and icub-gazebo-wholebody as a part of robotology-superbuild you need to build the superbuild and make sure the changes made to gazebo_icub_robotname.ini configuration file are correctly reflected in the install directory. Now, when a first iCub model is spawned in gazebo it takes the default name of iCub and all the ports related to it are prefixed with /iCub . Similarly, an additional iCub model spawned next to it will have the default name iCub_0 and all the ports related to this new model are prefixed with /iCub_0 . In this way multiple robots can be spawned in gazebo simulation environment without any port conflicts. Another important detail concerns the use of wholeBodyDynamics . In general, wholeBodyDynamics is launched with yarprobotinterface with a configuration file like launch-wholebodydynamics.xml that uses /icubSim port prefix as shown below: So, in order to use multiple icub robots in gazebo you need to have multiple wholebodydynamics.xml configuration files with port prefixes corresponding to the robots spawned in gazebo.","title":"How to use two iCub robots in gazebo simulation"},{"location":"icub_setup_multiple_robots/two_robots_simulation/#how-to-use-two-icub-robots-in-gazebo-simulation","text":"In order to use icub robot in gazebo simulation environment one needs to have the repository icub-gazebo and have to set GAZEBO_MODEL_PATH to this repository as indicated in the readme file. Furthermore, icub-gazebo-wholebody repository contains complex gazebo models and gazebo worlds , for example icub-standup-world . In general, these two repositories can be used as standalone or they can be used as a part of robotology-superbuild . When an iCub model is spawned in gazebo, all the ports that are opened take the name placed in the gazebo_icub_robotname.ini configuration file as a port prefix. The default name used is icubSim : gazeboYarpPluginsRobotName icubSim The model name displayed in gazebo is taken iCub from the icub.sdf file and the gazebo-yarp-plugin motor control board ports and ports of the other gazebo-yarp-plugins you placed in your iCub model are opened with the portprefix /icubSim . If you are trying to put another iCub model in the simulation, it will fail due to the port conflict as it will try to open another set of robot ports with the same port prefix as /icubSim . So, in order to get around this problem, you have to comment out the line gazeboYarpPluginsRobotName icubSim of gazebo_icub_robotname.ini configuration file. If you are using the two repositories icub-gazebo and icub-gazebo-wholebody as a part of robotology-superbuild you need to build the superbuild and make sure the changes made to gazebo_icub_robotname.ini configuration file are correctly reflected in the install directory. Now, when a first iCub model is spawned in gazebo it takes the default name of iCub and all the ports related to it are prefixed with /iCub . Similarly, an additional iCub model spawned next to it will have the default name iCub_0 and all the ports related to this new model are prefixed with /iCub_0 . In this way multiple robots can be spawned in gazebo simulation environment without any port conflicts. Another important detail concerns the use of wholeBodyDynamics . In general, wholeBodyDynamics is launched with yarprobotinterface with a configuration file like launch-wholebodydynamics.xml that uses /icubSim port prefix as shown below: So, in order to use multiple icub robots in gazebo you need to have multiple wholebodydynamics.xml configuration files with port prefixes corresponding to the robots spawned in gazebo.","title":"How to use two iCub robots in gazebo simulation"},{"location":"icub_starter_kits/first_steps/","text":"FIRST START WITH ICUB \u00b6 Basic recommandations \u00b6 Make sure you have connected the robot and the laptop server together with an ethernet cable. Turn both CPU and motors switches from icub at the level of the backpack. Laptop commands \u00b6 Note the password for icub user is icub as simple as that Please open a terminal from the icon on the launch bar. Type: A GUI will open Click on Cluster tab: Click on GREEN play button on Nameserver node the tick icon next to icubsrv should become green On nodes : please select both icubsrv and icub-head click GREEN play button. Both TV icon should turn from RED to GREEN On Entities tab: On Applications : Click on the arrow next to Applications in order to see the pre-installed apps. double click on 1/iCubStartUp right click on yarplogger (a side option window will show) and click run. Note This will create a new window to log messages from every applications that you will run and give us feedback \u2013 VERY USEFUL for debugging) Robot calibration \u00b6 Now go back to yarpmanager window: WATCH OUT We are going to launch the robot, please make sure to have put the robot in a rest position (usual position on which the robot will be when you stop the yarprobotinterface from running) as the picture below. You may first take a look at the videos on the Deskstop folder YOUR_ROBOT_NAME-Videos and more precisely at \u201c1-yarprobotinterface.gif\u201d in order to see what the robot should do at start. When you know what you should expect to get, you may start the real robot. Danger Make sure the red push button is released (THIS IS THE SECURITY EMERGENCY FAULT BUTTON \u2013 IF EVER SOMETHING GOES WRONG PLEASE PUSH IT) right click on yarprobotinterface and click RUN Cameras \u00b6 double click on 2/Calib cameras: Double click on cameras application to open a new tab on the right side of the yarpmanager main application window. click on the icon RUN ALL on the left side of the yarpmanager GUI Four windows should pop-up: 2 for the cameras and 2 for settings on the cameras. Click on CONNECT ALL button on the left side of the GUI and at the very moment you should be able to see the images inside the two cameras windows. Face Expressions \u00b6 double click on 3/FACE EXPRESSIONS: a new tab should appear into the main application container click on RUN ALL click on CONNECT ALL The face should turn from picture 1 to picture 2 (all the connections are OK if everything goes as explained) before connection after connection Skin \u00b6 Double click on Skin_Gui to create the new tab click on RUN ALL Note This should make pop up 14 windows (13 skin patches and one user interface) for a FULLY SENSORIZED ROBOT, if your robot is less sensorized you may see less windows click on CONNECT ALL click on Binarization Filter button and make it ON, on the QtSkinManagerGui You can now start touching the robot everywhere the skin patched are present. videos-gifs See video test-skin.mp4 (or .gif) for the test made on your robot. Note Once done using the robot (to do not over use the CPU for the server side\u2013 icubsrv \u2013 please close the applications \u2013 by clicking on DISCONNECT ALL and STOP ALL for the applications skin) Demo Yoga \u00b6 double click on Demo Yoga \u2013 it creates a new tab. Note Make sure that the robot as some enough room to move before launching it \u2013 TAKE A LOOK AT the video 4-Yoga.mp4 (or .gif) to see what the robot should do Click on RUN When finished STOP the application. Demo RedBall \u00b6 (You may try to fetch a spongy red ball of diameter 6cm) double click on Red Ball Demo \u2013 a new tab should be created. First, you will need to launch and prepare the robot. Go back to the tab 1/iCubStartUp. RUN only the two iKinCartesian (for both arms) and iKinGazeCtrl. When the icons next to those three modules turn to green Click CONNECT ALL then: RUN both wholeBodyDynamics and gravityCompensator modules when they turn to green Click on CONNECT ALL Return to the Demo Red Ball tab RUN both pf3dTracker and yarpview modules When the icons turn to GREEN (a new window should pop-up) Click on CONNECT ALL Note the new yarpview window should get connected \u2013 and inside the window you should see a yellow circle moving frenetically \u2013 the software is looking for a round shape) Search for the window Grabber Remote GUI for the left camera. Go to the tab Feature: Move the \"Shutter\" slider to middle range until the glowing of refracted light on the left image got almost restrained. Move \"GAIN\" slider to ZERO Move a tiny bit the BLUE and RED sliders inside the \u201cWhite Balance\u201d option to get to an almost normal color. (set the one in the picture above) Go to the Features (adv) tab: Put the red ball in front of the robot (the ball should be visible on the left camera viewer). Increase the SATURATION slider until the red ball gets recognized (circle turns from RED to GREEN) inside the pf3dtracker viewer. When done this process the robot will be able to see the ball and you can launch finally the demo. RUN demoRedBall click on CONNECT ALL Warning BEWARE DO NOT PUT THE BALL TOO CLOSE FROM THE BODY/FACE!!!!! Warning THE ROBOT IS NOW MOVING TOWARD THE BALL AND TRY TO GRASP IT See the video tutorial on how to let the robot grasp the ball","title":"First steps with the Humanoid iCub"},{"location":"icub_starter_kits/first_steps/#first-start-with-icub","text":"","title":"FIRST START WITH ICUB"},{"location":"icub_starter_kits/first_steps/#basic-recommandations","text":"Make sure you have connected the robot and the laptop server together with an ethernet cable. Turn both CPU and motors switches from icub at the level of the backpack.","title":"Basic recommandations"},{"location":"icub_starter_kits/first_steps/#laptop-commands","text":"Note the password for icub user is icub as simple as that Please open a terminal from the icon on the launch bar. Type: A GUI will open Click on Cluster tab: Click on GREEN play button on Nameserver node the tick icon next to icubsrv should become green On nodes : please select both icubsrv and icub-head click GREEN play button. Both TV icon should turn from RED to GREEN On Entities tab: On Applications : Click on the arrow next to Applications in order to see the pre-installed apps. double click on 1/iCubStartUp right click on yarplogger (a side option window will show) and click run. Note This will create a new window to log messages from every applications that you will run and give us feedback \u2013 VERY USEFUL for debugging)","title":"Laptop commands"},{"location":"icub_starter_kits/first_steps/#robot-calibration","text":"Now go back to yarpmanager window: WATCH OUT We are going to launch the robot, please make sure to have put the robot in a rest position (usual position on which the robot will be when you stop the yarprobotinterface from running) as the picture below. You may first take a look at the videos on the Deskstop folder YOUR_ROBOT_NAME-Videos and more precisely at \u201c1-yarprobotinterface.gif\u201d in order to see what the robot should do at start. When you know what you should expect to get, you may start the real robot. Danger Make sure the red push button is released (THIS IS THE SECURITY EMERGENCY FAULT BUTTON \u2013 IF EVER SOMETHING GOES WRONG PLEASE PUSH IT) right click on yarprobotinterface and click RUN","title":"Robot calibration"},{"location":"icub_starter_kits/first_steps/#cameras","text":"double click on 2/Calib cameras: Double click on cameras application to open a new tab on the right side of the yarpmanager main application window. click on the icon RUN ALL on the left side of the yarpmanager GUI Four windows should pop-up: 2 for the cameras and 2 for settings on the cameras. Click on CONNECT ALL button on the left side of the GUI and at the very moment you should be able to see the images inside the two cameras windows.","title":"Cameras"},{"location":"icub_starter_kits/first_steps/#face-expressions","text":"double click on 3/FACE EXPRESSIONS: a new tab should appear into the main application container click on RUN ALL click on CONNECT ALL The face should turn from picture 1 to picture 2 (all the connections are OK if everything goes as explained) before connection after connection","title":"Face Expressions"},{"location":"icub_starter_kits/first_steps/#skin","text":"Double click on Skin_Gui to create the new tab click on RUN ALL Note This should make pop up 14 windows (13 skin patches and one user interface) for a FULLY SENSORIZED ROBOT, if your robot is less sensorized you may see less windows click on CONNECT ALL click on Binarization Filter button and make it ON, on the QtSkinManagerGui You can now start touching the robot everywhere the skin patched are present. videos-gifs See video test-skin.mp4 (or .gif) for the test made on your robot. Note Once done using the robot (to do not over use the CPU for the server side\u2013 icubsrv \u2013 please close the applications \u2013 by clicking on DISCONNECT ALL and STOP ALL for the applications skin)","title":"Skin"},{"location":"icub_starter_kits/first_steps/#demo-yoga","text":"double click on Demo Yoga \u2013 it creates a new tab. Note Make sure that the robot as some enough room to move before launching it \u2013 TAKE A LOOK AT the video 4-Yoga.mp4 (or .gif) to see what the robot should do Click on RUN When finished STOP the application.","title":"Demo Yoga"},{"location":"icub_starter_kits/first_steps/#demo-redball","text":"(You may try to fetch a spongy red ball of diameter 6cm) double click on Red Ball Demo \u2013 a new tab should be created. First, you will need to launch and prepare the robot. Go back to the tab 1/iCubStartUp. RUN only the two iKinCartesian (for both arms) and iKinGazeCtrl. When the icons next to those three modules turn to green Click CONNECT ALL then: RUN both wholeBodyDynamics and gravityCompensator modules when they turn to green Click on CONNECT ALL Return to the Demo Red Ball tab RUN both pf3dTracker and yarpview modules When the icons turn to GREEN (a new window should pop-up) Click on CONNECT ALL Note the new yarpview window should get connected \u2013 and inside the window you should see a yellow circle moving frenetically \u2013 the software is looking for a round shape) Search for the window Grabber Remote GUI for the left camera. Go to the tab Feature: Move the \"Shutter\" slider to middle range until the glowing of refracted light on the left image got almost restrained. Move \"GAIN\" slider to ZERO Move a tiny bit the BLUE and RED sliders inside the \u201cWhite Balance\u201d option to get to an almost normal color. (set the one in the picture above) Go to the Features (adv) tab: Put the red ball in front of the robot (the ball should be visible on the left camera viewer). Increase the SATURATION slider until the red ball gets recognized (circle turns from RED to GREEN) inside the pf3dtracker viewer. When done this process the robot will be able to see the ball and you can launch finally the demo. RUN demoRedBall click on CONNECT ALL Warning BEWARE DO NOT PUT THE BALL TOO CLOSE FROM THE BODY/FACE!!!!! Warning THE ROBOT IS NOW MOVING TOWARD THE BALL AND TRY TO GRASP IT See the video tutorial on how to let the robot grasp the ball","title":"Demo RedBall"},{"location":"icub_tendons/","text":"Scope of document \u00b6 The purpose of this manual is to describe how to mount/repair the tendons of iCub. The body parts \u00b6 Please click on any of the iCub body parts below to get instructions on how to re-cable them. Neck Shoulder and Elbow Lower Arm Waist, Legs and Ankle iCub mechanical versions \u00b6 Here is a table showing the visual differences of iCub from version 1 to 2.7. iCub V1 iCub V2 iCub V2.5 iCub V2.5 - Backpack Cabling Differences \u00b6 Part activated by tendons iCub V1 iCub V2 iCub V2.5 iCub V2.5 & following (w/ backpack) NECK NO YES YES YES SHOULDER YES - V1 YES - V2 YES - V2 YES - V2 ELBOW YES YES YES YES WAIST YES YES YES YES LOWER ARM (Forearm + Hand) YES - V1 YES - V1 YES - V2 YES - V2 HIP YES YES YES YES ANKLE YES YES NO NO","title":"Summary"},{"location":"icub_tendons/#scope-of-document","text":"The purpose of this manual is to describe how to mount/repair the tendons of iCub.","title":"Scope of document"},{"location":"icub_tendons/#the-body-parts","text":"Please click on any of the iCub body parts below to get instructions on how to re-cable them. Neck Shoulder and Elbow Lower Arm Waist, Legs and Ankle","title":"The body parts"},{"location":"icub_tendons/#icub-mechanical-versions","text":"Here is a table showing the visual differences of iCub from version 1 to 2.7. iCub V1 iCub V2 iCub V2.5 iCub V2.5 - Backpack","title":"iCub mechanical versions"},{"location":"icub_tendons/#cabling-differences","text":"Part activated by tendons iCub V1 iCub V2 iCub V2.5 iCub V2.5 & following (w/ backpack) NECK NO YES YES YES SHOULDER YES - V1 YES - V2 YES - V2 YES - V2 ELBOW YES YES YES YES WAIST YES YES YES YES LOWER ARM (Forearm + Hand) YES - V1 YES - V1 YES - V2 YES - V2 HIP YES YES YES YES ANKLE YES YES NO NO","title":"Cabling Differences"},{"location":"icub_tendons/hand_cabling_V1/","text":"LOWER ARM V1 CABLING \u00b6 CAD DESIGN \u00b6 Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly. Left Forearm V1 Right Forearm V1 1 Basic Principles \u00b6 In the following document we describe how to connect the hand joints with the motors positioned in the forearm. The basic scheme is very simple and based on the following ideas: \u2212 Each motor rotates a pulley (P) \u2212 A (optionally coated) cable is twined around the pulley. The cable is fixed to the pulley by passing through a hole in the pulley (H). \u2212 The cable exits the motor by passing trough holes H1 and H2. \u2212 The cable enters into a tube (T1, T2, T3, T4) which guides its path trough the wrist. All the tubes are positioned on suitable sockets in correspondence of the holes (H1, H2). \u2212 Optionally the cable passes trough tensioners (Te1 and Te2) in between T1/T2 and T3/T4. Again the tensioners are provided with suitable sockets. \u2212 The cable exits the tube by entering into holes H3 and H4 once more equipped with suitable sockets for the tubes. Refer to the following example pictures: 1.1 General Rules to be Followed \u00b6 When mounting cables, pay attention to the fact that rotating the motor in a clockwise direction should correspond to a closure of the finger. The definition of clockwise rotation is given in the picture below. This rule is valid for all joints but distal joints; in the case of distal joints the closure of joints depends on some issues that will be discussed later on. 1.2 General Tips and Tricks \u00b6 \u2212 The uncoated cable is a bundle of smaller wires. When the cable is cut, this bundle may be corrupted (especially at the cable ending) by trying to pass the cable trough holes. A drop of glue on the cable ending may be useful. \u2212 Ideally the cable should be twined around the pulley P exactly at the middle of it. In particular, when the joint is in the middle of its range of movements the cable should leave the pulley P exactly at the level of the holes H1 and H2. If this is not the case, the friction of the cable at the level of H1 and H2 may break the cable after short usage. \u2212 Always check that the tubes are inside their sockets. If this is not the case cables will break easily due to high friction in correspondence of the input and output holes. \u2212 The tension of the cable is fundamental for having fingers working correctly. Always consider the possibility of using tensioners for increasing the cable tension. 2 WHAT DO I NEED TO CABLE \u00b6 Here you will find the overall table describing the the mandatory sheaths to be used in the correct place. Finger Typology Label Length (mm) Thumb Proximal short 6+S 74 6-S 74 Proximal long 6+L 124 6-L 124 Distal 4 132 Oppose S0 50 Oppose S2 57 Index Proximal short 8+S 80 8-S 53 Proximal Long 8+L 125 8-L 140 Distal 5 140 Middle Proximal short 7+S 75 7-S 60 Proximal long 7+L 125 7-L 143 Distal 3 135 Ring Distal 2 112 Pinkie Distal 9 112 Ring&Pinkie slider Distal short 0+S 73 0-S 60 Distal long 0+L 80 Fingers abduction T0 38 abduction T2 27 abduction T3 38 abduction T4 44 Tip Remember that symbol + = finger closure and symbol - = finger aperture. 3 HOW TO CABLE - FINGERS & HAND \u00b6 3.1 Thumb oppose \u00b6 To build the thumb oppose you just need 2 pieces of the sheath IITCODE 13963 Label Dimension (mm) IITCODE - SHEATH S0 50 13963 S2 57 13963 And approximatively 40cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Here is a more detail specification of where to find the 2 pieces: Left Hand Right Hand S0 exits the motor case from the hole near the motor (H2). Enters the finger in the hole which is internal to the palm (H3). S2 exits the motor case from the hole near the ball bearing (H1). Enters the finger in the hole which is external to the palm (H4). Note Cable turns around the pulley with the thumb in the straight position (half thumb path) in order to permit the two opposite movements. Please follow this link for an extended HOWTO route the cable. 3.2 Fingers Abduction \u00b6 To build the fingers abduction you just need 4 pieces of the sheath IITCODE 2375 Sheaths Dimension (mm) Label T1 38 T0 T2 27 T2 T3 38 T3 T4 44 T4 and approximatively 40cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0.63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 3 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable. 3.3 Proximal Joints \u00b6 The 3 proximal joints : Thumb Index Middle located here: LEFT FOREARM RIGHT FOREARM are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 Every sheath in which the cable pass through (+ and - ) is made of: IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Please follow this link for an extended HOWTO route the cable. 3.3.1 Thumb Proximal \u00b6 Here are the sheaths needed for the Thumb proximal Joint. Dimension Label Notes 74(mm) 6+S Exits the motor case from the hole near the ball bearing (H1) 74(mm) 6-S Exits the motor case from the hole near the motor (H2) 124(mm) 6+L Enters the finger in the hole near the other fingers(H3) 124(mm) 6-L Enters the finger in the hole near the wrist (H4) Note For proximal cablings you need to mark with a suitable pen the cable most internal in the finger (palm opposite side). Then leave the cable and make a knot. Then you must pull the cable (the finger will be closed) and you can make the knot on the other cable nearest the palm, without marking with the pen. 3.3.2 Index Proximal \u00b6 Here are the sheaths needed for the Index Proximal Joint. Dimension Label Notes 80(mm) 8+S Exits the motor case from the hole near the ball bearing (H1) 53(mm) 8-S Exits the motor case from the hole near the motor (H2) 125(mm) 8+L Enters the finger in the hole close to the palm side (H3) 140(mm) 8-L Enters the finger in the hole close to the back of the hand side (H4) 3.3.3 Middle Proximal \u00b6 Here are the sheaths needed for the Middle Proximal Joint. Dimension Label Notes 75(mm) 7+S Exits the motor case from the hole near the ball bearing (H1) 60(mm) 7-S Exits the motor case from the hole near the motor (H2) 125(mm) 7+L Enters the finger in the hole close to the palm side (H3) 143(mm) 7-L Enters the finger in the hole close to the back of the hand side (H4) 3.4 Distal Joints \u00b6 The 5 distal joints (theoretically 5 but in practice just 4 motors need to be wired): Thumb Index Middle Ring and Pinkie Located here: LEFT FOREARM RIGHT FOREARM Are wired with the following cables: IITCODE Alias Description Joint 2391 U7194561 Stainless steel microcable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH Thumb Index Middle Ring & Pinkie (from slider to fingers) 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 Ring & Pinkie (slider movement) Please follow this link for an extended HOWTO route the cable. 3.4.1 Thumb Distal \u00b6 The cable needed for the Thumb Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 132(mm) 4 Exits the motor case from the hole inside the forearm (H1) 3.4.2 Index Distal \u00b6 The cable needed for the Index Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 140(mm) 5 Exits the motor case from the hole inside the forearm (H1) 3.4.3 Middle Distal \u00b6 The cable needed for the Middle Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 135(mm) 3 Exits the motor case from the hole inside the forearm (H1). 3.4.4 Ring & Pinkie Distal \u00b6 This joint differs from the others since its movement is realized with a slider. The motor rotates so as to move the slider (clockwise rotations correspond to moving the slider proximally, i.e. closer to the elbow). The slider pulls a couple of wires so as to close the ring and little finger. These 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider. The 2 cables needed for the R&P Distal Joint (from slider to fingers) are IITCODE 2391 and the 1 cable needed for the slider movements is IITCODE 1815 . The sheaths needed are: Dimension Label Notes 60(mm) 0-S or 0- Exits the motor case from the hole closer to the motor. Enters the hole in the slider near the hand (H5) 80(mm) 0+L Exits the motor case from the hole close to the ball bearing and arrives to the tensioner 73(mm) 0+S Exits from the tensioner and enters the hole in the slider near the elbow (H4) 112(mm) 2 Exits from the slider (H10) and enters the finger which is closer to the hole - ring. 112(mm) 9 Exits from the slider (H11) and enters the finger which is closer to the hole - pinkie. Tip Before connecting the sheath to the support insert and exit the cable, otherwise after this operation it would be more complicated. Here you can see the schematic of the cabling. The sheaths entering the fingers are represented in blue, while the sheaths for the slider movement are in red. The gray block is the tensioner. Please follow this link for an extended HOWTO route the cable. 4 HOW TO CABLE - WRIST \u00b6 The wrist movements (roll, pitch and yaw) are achieved with three motors located in the forearm. The wrist roll (or pronosupination) is achieved directly, i.e. without any cable driven joint. The wrist pitch and yaw are instead cable driven. The actuation is achieved with two motors which jointly collaborate to the pitch and yaw degrees of freedom. The actuation is differential with the following relationship: wrist_pitch = M1 wrist_yaw = M1 + M2 where M1 and M2 are the angular positions of the the two motors contributing to the movements. Wrist motors left arm Section view left arm The overall cables of the wrist are all build from IITCODE 1815 with the following specifications: IITCODE Alias/Provider Code Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 4.1 Wrist Motor tendons \u00b6 From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons. To get more details on how to rewire them, please follow this link . 4.2 Tensioner - IITCODE 3745 \u00b6 To properly tense the tendons of the Forearm it is mandatory to add the tensioner IITCODE 3745- alias CAD of the assembly: RC_TLR_007_G_014_00 - it is made by the following pieces: IITCODE Revision Alias Description 3756 2 RC_TLR_007_P_042_00 TENSIONER BODY 3757 1 RC_TLR_007_P_041_00 TENSIONER SCREW 2121 RC_TLR_007_P_044_00 LOCK NUT 3758 1 RC_TLR_007_P_067_00 TENSIONER SCREW 2136 RC_TLR_007_P_068_00 LOCK NUT Note Note that RED nut and the RED extremity of the tensioner assembly are left hand-threaded (wrist side). Pay attention to the direction of turning. 4.3 Wrist Passive tendons \u00b6 From the pictures below you will be able to locate and identify the 2 tendons inside the wrist building the passive part of the wrist movements. To get more details on how to rewire them, please follow this link .","title":"How-to Cable and Needed Parts V1"},{"location":"icub_tendons/hand_cabling_V1/#lower-arm-v1-cabling","text":"","title":"LOWER ARM V1 CABLING"},{"location":"icub_tendons/hand_cabling_V1/#cad-design","text":"Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly. Left Forearm V1 Right Forearm V1","title":"CAD DESIGN"},{"location":"icub_tendons/hand_cabling_V1/#1-basic-principles","text":"In the following document we describe how to connect the hand joints with the motors positioned in the forearm. The basic scheme is very simple and based on the following ideas: \u2212 Each motor rotates a pulley (P) \u2212 A (optionally coated) cable is twined around the pulley. The cable is fixed to the pulley by passing through a hole in the pulley (H). \u2212 The cable exits the motor by passing trough holes H1 and H2. \u2212 The cable enters into a tube (T1, T2, T3, T4) which guides its path trough the wrist. All the tubes are positioned on suitable sockets in correspondence of the holes (H1, H2). \u2212 Optionally the cable passes trough tensioners (Te1 and Te2) in between T1/T2 and T3/T4. Again the tensioners are provided with suitable sockets. \u2212 The cable exits the tube by entering into holes H3 and H4 once more equipped with suitable sockets for the tubes. Refer to the following example pictures:","title":"1 Basic Principles"},{"location":"icub_tendons/hand_cabling_V1/#11-general-rules-to-be-followed","text":"When mounting cables, pay attention to the fact that rotating the motor in a clockwise direction should correspond to a closure of the finger. The definition of clockwise rotation is given in the picture below. This rule is valid for all joints but distal joints; in the case of distal joints the closure of joints depends on some issues that will be discussed later on.","title":"1.1 General Rules to be Followed"},{"location":"icub_tendons/hand_cabling_V1/#12-general-tips-and-tricks","text":"\u2212 The uncoated cable is a bundle of smaller wires. When the cable is cut, this bundle may be corrupted (especially at the cable ending) by trying to pass the cable trough holes. A drop of glue on the cable ending may be useful. \u2212 Ideally the cable should be twined around the pulley P exactly at the middle of it. In particular, when the joint is in the middle of its range of movements the cable should leave the pulley P exactly at the level of the holes H1 and H2. If this is not the case, the friction of the cable at the level of H1 and H2 may break the cable after short usage. \u2212 Always check that the tubes are inside their sockets. If this is not the case cables will break easily due to high friction in correspondence of the input and output holes. \u2212 The tension of the cable is fundamental for having fingers working correctly. Always consider the possibility of using tensioners for increasing the cable tension.","title":"1.2 General Tips and Tricks"},{"location":"icub_tendons/hand_cabling_V1/#2-what-do-i-need-to-cable","text":"Here you will find the overall table describing the the mandatory sheaths to be used in the correct place. Finger Typology Label Length (mm) Thumb Proximal short 6+S 74 6-S 74 Proximal long 6+L 124 6-L 124 Distal 4 132 Oppose S0 50 Oppose S2 57 Index Proximal short 8+S 80 8-S 53 Proximal Long 8+L 125 8-L 140 Distal 5 140 Middle Proximal short 7+S 75 7-S 60 Proximal long 7+L 125 7-L 143 Distal 3 135 Ring Distal 2 112 Pinkie Distal 9 112 Ring&Pinkie slider Distal short 0+S 73 0-S 60 Distal long 0+L 80 Fingers abduction T0 38 abduction T2 27 abduction T3 38 abduction T4 44 Tip Remember that symbol + = finger closure and symbol - = finger aperture.","title":"2 WHAT DO I NEED TO CABLE"},{"location":"icub_tendons/hand_cabling_V1/#3-how-to-cable-fingers-hand","text":"","title":"3 HOW TO CABLE - FINGERS &amp; HAND"},{"location":"icub_tendons/hand_cabling_V1/#31-thumb-oppose","text":"To build the thumb oppose you just need 2 pieces of the sheath IITCODE 13963 Label Dimension (mm) IITCODE - SHEATH S0 50 13963 S2 57 13963 And approximatively 40cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Here is a more detail specification of where to find the 2 pieces: Left Hand Right Hand S0 exits the motor case from the hole near the motor (H2). Enters the finger in the hole which is internal to the palm (H3). S2 exits the motor case from the hole near the ball bearing (H1). Enters the finger in the hole which is external to the palm (H4). Note Cable turns around the pulley with the thumb in the straight position (half thumb path) in order to permit the two opposite movements. Please follow this link for an extended HOWTO route the cable.","title":"3.1 Thumb oppose"},{"location":"icub_tendons/hand_cabling_V1/#32-fingers-abduction","text":"To build the fingers abduction you just need 4 pieces of the sheath IITCODE 2375 Sheaths Dimension (mm) Label T1 38 T0 T2 27 T2 T3 38 T3 T4 44 T4 and approximatively 40cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0.63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 3 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable.","title":"3.2 Fingers Abduction"},{"location":"icub_tendons/hand_cabling_V1/#33-proximal-joints","text":"The 3 proximal joints : Thumb Index Middle located here: LEFT FOREARM RIGHT FOREARM are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 Every sheath in which the cable pass through (+ and - ) is made of: IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Please follow this link for an extended HOWTO route the cable.","title":"3.3 Proximal Joints"},{"location":"icub_tendons/hand_cabling_V1/#331-thumb-proximal","text":"Here are the sheaths needed for the Thumb proximal Joint. Dimension Label Notes 74(mm) 6+S Exits the motor case from the hole near the ball bearing (H1) 74(mm) 6-S Exits the motor case from the hole near the motor (H2) 124(mm) 6+L Enters the finger in the hole near the other fingers(H3) 124(mm) 6-L Enters the finger in the hole near the wrist (H4) Note For proximal cablings you need to mark with a suitable pen the cable most internal in the finger (palm opposite side). Then leave the cable and make a knot. Then you must pull the cable (the finger will be closed) and you can make the knot on the other cable nearest the palm, without marking with the pen.","title":"3.3.1 Thumb Proximal"},{"location":"icub_tendons/hand_cabling_V1/#332-index-proximal","text":"Here are the sheaths needed for the Index Proximal Joint. Dimension Label Notes 80(mm) 8+S Exits the motor case from the hole near the ball bearing (H1) 53(mm) 8-S Exits the motor case from the hole near the motor (H2) 125(mm) 8+L Enters the finger in the hole close to the palm side (H3) 140(mm) 8-L Enters the finger in the hole close to the back of the hand side (H4)","title":"3.3.2 Index Proximal"},{"location":"icub_tendons/hand_cabling_V1/#333-middle-proximal","text":"Here are the sheaths needed for the Middle Proximal Joint. Dimension Label Notes 75(mm) 7+S Exits the motor case from the hole near the ball bearing (H1) 60(mm) 7-S Exits the motor case from the hole near the motor (H2) 125(mm) 7+L Enters the finger in the hole close to the palm side (H3) 143(mm) 7-L Enters the finger in the hole close to the back of the hand side (H4)","title":"3.3.3 Middle Proximal"},{"location":"icub_tendons/hand_cabling_V1/#34-distal-joints","text":"The 5 distal joints (theoretically 5 but in practice just 4 motors need to be wired): Thumb Index Middle Ring and Pinkie Located here: LEFT FOREARM RIGHT FOREARM Are wired with the following cables: IITCODE Alias Description Joint 2391 U7194561 Stainless steel microcable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH Thumb Index Middle Ring & Pinkie (from slider to fingers) 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316 Ring & Pinkie (slider movement) Please follow this link for an extended HOWTO route the cable.","title":"3.4 Distal Joints"},{"location":"icub_tendons/hand_cabling_V1/#341-thumb-distal","text":"The cable needed for the Thumb Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 132(mm) 4 Exits the motor case from the hole inside the forearm (H1)","title":"3.4.1 Thumb Distal"},{"location":"icub_tendons/hand_cabling_V1/#342-index-distal","text":"The cable needed for the Index Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 140(mm) 5 Exits the motor case from the hole inside the forearm (H1)","title":"3.4.2 Index Distal"},{"location":"icub_tendons/hand_cabling_V1/#343-middle-distal","text":"The cable needed for the Middle Distal Joint is IITCODE 2391 and the sheath: Dimension Label Notes 135(mm) 3 Exits the motor case from the hole inside the forearm (H1).","title":"3.4.3 Middle Distal"},{"location":"icub_tendons/hand_cabling_V1/#344-ring-pinkie-distal","text":"This joint differs from the others since its movement is realized with a slider. The motor rotates so as to move the slider (clockwise rotations correspond to moving the slider proximally, i.e. closer to the elbow). The slider pulls a couple of wires so as to close the ring and little finger. These 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider. The 2 cables needed for the R&P Distal Joint (from slider to fingers) are IITCODE 2391 and the 1 cable needed for the slider movements is IITCODE 1815 . The sheaths needed are: Dimension Label Notes 60(mm) 0-S or 0- Exits the motor case from the hole closer to the motor. Enters the hole in the slider near the hand (H5) 80(mm) 0+L Exits the motor case from the hole close to the ball bearing and arrives to the tensioner 73(mm) 0+S Exits from the tensioner and enters the hole in the slider near the elbow (H4) 112(mm) 2 Exits from the slider (H10) and enters the finger which is closer to the hole - ring. 112(mm) 9 Exits from the slider (H11) and enters the finger which is closer to the hole - pinkie. Tip Before connecting the sheath to the support insert and exit the cable, otherwise after this operation it would be more complicated. Here you can see the schematic of the cabling. The sheaths entering the fingers are represented in blue, while the sheaths for the slider movement are in red. The gray block is the tensioner. Please follow this link for an extended HOWTO route the cable.","title":"3.4.4 Ring &amp; Pinkie Distal"},{"location":"icub_tendons/hand_cabling_V1/#4-how-to-cable-wrist","text":"The wrist movements (roll, pitch and yaw) are achieved with three motors located in the forearm. The wrist roll (or pronosupination) is achieved directly, i.e. without any cable driven joint. The wrist pitch and yaw are instead cable driven. The actuation is achieved with two motors which jointly collaborate to the pitch and yaw degrees of freedom. The actuation is differential with the following relationship: wrist_pitch = M1 wrist_yaw = M1 + M2 where M1 and M2 are the angular positions of the the two motors contributing to the movements. Wrist motors left arm Section view left arm The overall cables of the wrist are all build from IITCODE 1815 with the following specifications: IITCODE Alias/Provider Code Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0.63mm, not coated, AISI 316","title":"4 HOW TO CABLE - WRIST"},{"location":"icub_tendons/hand_cabling_V1/#41-wrist-motor-tendons","text":"From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons. To get more details on how to rewire them, please follow this link .","title":"4.1 Wrist Motor tendons"},{"location":"icub_tendons/hand_cabling_V1/#42-tensioner-iitcode-3745","text":"To properly tense the tendons of the Forearm it is mandatory to add the tensioner IITCODE 3745- alias CAD of the assembly: RC_TLR_007_G_014_00 - it is made by the following pieces: IITCODE Revision Alias Description 3756 2 RC_TLR_007_P_042_00 TENSIONER BODY 3757 1 RC_TLR_007_P_041_00 TENSIONER SCREW 2121 RC_TLR_007_P_044_00 LOCK NUT 3758 1 RC_TLR_007_P_067_00 TENSIONER SCREW 2136 RC_TLR_007_P_068_00 LOCK NUT Note Note that RED nut and the RED extremity of the tensioner assembly are left hand-threaded (wrist side). Pay attention to the direction of turning.","title":"4.2 Tensioner - IITCODE 3745"},{"location":"icub_tendons/hand_cabling_V1/#43-wrist-passive-tendons","text":"From the pictures below you will be able to locate and identify the 2 tendons inside the wrist building the passive part of the wrist movements. To get more details on how to rewire them, please follow this link .","title":"4.3 Wrist Passive tendons"},{"location":"icub_tendons/hand_cabling_V2/","text":"LOWER ARM V2 CABLING \u00b6 CAD DESIGN \u00b6 Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly. Left Forearm V2 Right Forearm V2 in CAD repository (maybe CREO): RC_TLR_007_A_001_LEFT_FOREARM.ASM + RC_TLR_012_A_001_LEFT_HAND.ASM in CAD repository (maybe CREO): RC_TLR_010_A_001_RIGHT_FOREARM.ASM + RC_TLR_011_A_001_RIGHT_HAND.ASM 1 WHAT DO I NEED TO CABLE \u00b6 Here you will find the overall tables describing the necessary parts needed when routing the cables onto the 11 motors (12 motors inside the Lower Arm but just 11 are cabled) and the mandatory sheaths to be used in the correct place. 1.1 Finger sheaths \u00b6 IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent Danger inside sheath 13963 please DO NOT (NEVER) USE Teflon sheath!!! 1.1.1 Sheaths length & labelling \u00b6 Please refer to this table to find out which sheath you need to install at the right place and the correct label to add on top of it: Finger Typology Label Length (mm) IITCODE - sheath Thumb Proximal 6+ 185 13963 Thumb Proximal 6- 185 13963 Thumb Short Prox + pict. above 9 2375 Thumb Short Prox - pict. above 11 2375 Thumb Distal N4 57 2375 (+Teflon) Thumb Short Dist pict. above 11.5 2375 Thumb oppose S0 50 2375 (+Teflon) Thumb oppose S2 57 2375 (+Teflon) Index Proximal 8+ 224 13963 Index Proximal 8- 224 13963 Index Distal N5 105 2375 (+Teflon) Middle Proximal 7+ 224 13963 Middle Proximal 7- 224 13963 Middle Distal N3 105 2375 (+Teflon) Ring Distal N2 95 2375 (+Teflon) Pinkie Distal N9 95 2375 (+Teflon) Fingers abduct T0 90 (1) 2375 Fingers abduct T2 27 2375 Fingers abduct T4 44 2375 (+Teflon) refers to the IITCODE 2386 Note (1) the length 90 mm of T0 comes from the previous version where there was: T0+T3+tensioner (38+38+14 mm). Warning For the proximal sheath, please label BOTH the start of the sheath (base of the motor at the level of the elbow) and at the end of it. 1.2 Finger & hand cables \u00b6 IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 1.2.1 Cables length \u00b6 Please refer to this table to find out which cable you need to install at the right place: Finger Typology Length (cm) IITCODE - cable Thumb oppose 50 1815 Thumb Proximal 100 1815 Index Proximal 100 1815 Middle Proximal 100 1815 Thumb Distal 40 2391 Index Distal 40 2391 Middle Distal 40 2391 Ring Distal 40 2391 Pinkie Distal 40 2391 Fingers Abduction 50/60 1815 2 HOW TO CABLE - FINGERS & HAND \u00b6 2.1 Proximal joints \u00b6 The 3 proximal joints : Thumb Index Middle located here: LEFT FOREARM RIGHT FOREARM are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 Every sheath in which the cable pass through (+ and - ) is made of: IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Danger inside sheath 13963 please DO NOT USE Teflon sheath!!! Note IITCODE 13963 is alternative to the 4545 (old one - not in use ANYMORE) and it was introduced only for cost efficiency. Please follow this link for an extended HOWTO route the cable. 2.1.1 THUMB peculiarity \u00b6 The THUMB is a finger a bit particular in the wiring compared to the index and the middle because - as it is the finger with the most degrees of freedom- it needs to pass a series of pulleys at the base of it in order to add also the thumb oppose joint movement inside the articulation. The IITCODE 2375 as specification described below : IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Is needed for the 3 pieces circled in red on the picture above. Here are the specs for each one of them: Number Type Length (mm) 1 distal short 11.5 2 prox short (-) 11 3 prox short (+) 9 Please follow this link for an extended HOWTO route the cable. Once the 3 proximal joints are cabled, the lateral view of the forearm should look like the picture below. The 6 sheaths are pointed by the red arrows. 2.2 Distal joints \u00b6 The 5 proximal joints (theoretically 5 but in practice just 4 motors need to be wired): Thumb Index Middle Ring and Pinkie Located here: RIGHT FOREARM LEFT FOREARM Are all wired with the cable 0.61mm coated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH Every sheath is made of both the following pieces: IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent Please follow this link for an extended HOWTO route the cable. 2.3 Thumb Oppose \u00b6 To build the thumb oppose you just need 2 pieces of the sheath IITCODE 2375 Label Dimension (mm) IITCODE - SHEATH S0 50 2375 (+Teflon) S2 57 2375 (+Teflon) And approximatively 50cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 2 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable. Remember that the shorter sheat is S0 and the longer one is S2. 2.4 Fingers Abduction \u00b6 To build the fingers abduction you just need 3 pieces of the sheath IITCODE 2375 Label Dimension(mm) IITCODE - SHEATH T0 90 2375 T2 27 2375 T4 44 2375 Danger inside sheath 2375 please DO NOT USE Teflon sheath!!! and approximatively 50cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 3 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable. 3 HOW TO CABLE - WRIST \u00b6 3.1 Wrist tendons length \u00b6 Here is the list of the 10 tendons needed to build the wrist movements: Tendon IITCODE Length Alias 1 6400 72 mm RC_IIT_019_G_019 2 6402 84 mm RC_IIT_019_G_020 3 6404 101 mm RC_IIT_019_G_021 4 6413 124 mm RC_IIT_019_G_022 5 6414 107 mm RC_IIT_019_G_023 6 6415 113 mm RC_IIT_019_G_024 7 6416 112 mm RC_IIT_019_G_025 8 6417 107mm RC_IIT_019_G_026 9 6418 51 mm RC_IIT_019_G_027 10 6419 43 mm RC_IIT_019_G_028 3.2 Construction table \u00b6 The overall cables of the wrist are all build from IITCODE 4482 (of Length defined in the table above) and 2 crimps IITCODE 4722, here is the table reporting the specifics of those pieces: IITCODE Number of pieces Alias/Provider Code Description 4482 1 CG077081 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,81mm, not coated, AISI 304 4722 2 RC_TLR_010_P_100 THIMBLE FOR CABLE 0.8mm 3.3 Right Forearm - Wrist motor tendons \u00b6 From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons. To get a more details on how to rewire them, please follow this link 3.4 Left Forearm - Wrist motor tendons \u00b6 From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons. To get a more details on how to rewire them, please follow this link 3.5 Tensioner - IITCODE 3514 \u00b6 To properly tense the 8 tendons of the Forearm it is mandatory to add the tensioner IITCODE 3514 - alias CAD of the assembly: RC_TLR_010_G014 - it is made by the following pieces: IITCODE Revision Alias Description 3559 A3 RC_TLR_010_P_050 TENSIONER BODY 3560 A1 RC_TLR_010_P_046 TENSIONER SCREW 3561 RC_TLR_010_P_049 LOCK NUT 3562 A1 RC_TLR_010_P_048 TENSIONER SCREW 3563 RC_TLR_010_P_047 LOCK NUT 3.6 Wrist - Passive tendons \u00b6 From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. RIGHT WRIST LEFT WRIST To get more details on how to rewire them, please follow this link . 3.7 TEST - MOTION \u00b6 Every single motor listed below needs to be tested at the end of the cabling to ensure the perfect motion. MOTOR LABEL MOTOR FUNCTION volt to open volts to close 2M0 pronosuppination 0.5V-1.5V 0.5V-1.5V 2M1 inside wrist motor 0.5V-1.5V 0.5V-1.5V 2M2 outside wrist motor 0.5V-1.5V 0.5V-1.5V 2M3 hand fingers 1.5-2V 1.5-2V 3M0 thumb oppose 0.5-1V(0) 2.5Vmax(90) 3M1 thum prox 0.5V-1V 0.5V-1V 3M2 thumb distal 2V-2.5V 2V-2.5V 3M3 index prox 0.5V-1.5V 0.5V-1.5V 4M0 index distal 1.5-2V 1.5-2V 4M1 midlle prox 0.5V-1.5V 0.5V-1.5V 4M2 middle distal 1-1.5V 1-1.5V 4M3 pinkie and ring 1V-1.5V 1V-1.5V","title":"How-to Cable and Needed Parts V2"},{"location":"icub_tendons/hand_cabling_V2/#lower-arm-v2-cabling","text":"","title":"LOWER ARM V2 CABLING"},{"location":"icub_tendons/hand_cabling_V2/#cad-design","text":"Let's have an overview of the mechanical CAD from different view angles and their specific names on CAD assembly. Left Forearm V2 Right Forearm V2 in CAD repository (maybe CREO): RC_TLR_007_A_001_LEFT_FOREARM.ASM + RC_TLR_012_A_001_LEFT_HAND.ASM in CAD repository (maybe CREO): RC_TLR_010_A_001_RIGHT_FOREARM.ASM + RC_TLR_011_A_001_RIGHT_HAND.ASM","title":"CAD DESIGN"},{"location":"icub_tendons/hand_cabling_V2/#1-what-do-i-need-to-cable","text":"Here you will find the overall tables describing the necessary parts needed when routing the cables onto the 11 motors (12 motors inside the Lower Arm but just 11 are cabled) and the mandatory sheaths to be used in the correct place.","title":"1    WHAT DO I NEED TO CABLE"},{"location":"icub_tendons/hand_cabling_V2/#11-finger-sheaths","text":"IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent Danger inside sheath 13963 please DO NOT (NEVER) USE Teflon sheath!!!","title":"1.1 Finger sheaths"},{"location":"icub_tendons/hand_cabling_V2/#111-sheaths-length-labelling","text":"Please refer to this table to find out which sheath you need to install at the right place and the correct label to add on top of it: Finger Typology Label Length (mm) IITCODE - sheath Thumb Proximal 6+ 185 13963 Thumb Proximal 6- 185 13963 Thumb Short Prox + pict. above 9 2375 Thumb Short Prox - pict. above 11 2375 Thumb Distal N4 57 2375 (+Teflon) Thumb Short Dist pict. above 11.5 2375 Thumb oppose S0 50 2375 (+Teflon) Thumb oppose S2 57 2375 (+Teflon) Index Proximal 8+ 224 13963 Index Proximal 8- 224 13963 Index Distal N5 105 2375 (+Teflon) Middle Proximal 7+ 224 13963 Middle Proximal 7- 224 13963 Middle Distal N3 105 2375 (+Teflon) Ring Distal N2 95 2375 (+Teflon) Pinkie Distal N9 95 2375 (+Teflon) Fingers abduct T0 90 (1) 2375 Fingers abduct T2 27 2375 Fingers abduct T4 44 2375 (+Teflon) refers to the IITCODE 2386 Note (1) the length 90 mm of T0 comes from the previous version where there was: T0+T3+tensioner (38+38+14 mm). Warning For the proximal sheath, please label BOTH the start of the sheath (base of the motor at the level of the elbow) and at the end of it.","title":"1.1.1   Sheaths length &amp; labelling"},{"location":"icub_tendons/hand_cabling_V2/#12-finger-hand-cables","text":"IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH","title":"1.2 Finger &amp; hand cables"},{"location":"icub_tendons/hand_cabling_V2/#121-cables-length","text":"Please refer to this table to find out which cable you need to install at the right place: Finger Typology Length (cm) IITCODE - cable Thumb oppose 50 1815 Thumb Proximal 100 1815 Index Proximal 100 1815 Middle Proximal 100 1815 Thumb Distal 40 2391 Index Distal 40 2391 Middle Distal 40 2391 Ring Distal 40 2391 Pinkie Distal 40 2391 Fingers Abduction 50/60 1815","title":"1.2.1   Cables length"},{"location":"icub_tendons/hand_cabling_V2/#2-how-to-cable-fingers-hand","text":"","title":"2    HOW TO CABLE - FINGERS &amp; HAND"},{"location":"icub_tendons/hand_cabling_V2/#21-proximal-joints","text":"The 3 proximal joints : Thumb Index Middle located here: LEFT FOREARM RIGHT FOREARM are all wired with the cable 0.63mm uncoated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 Every sheath in which the cable pass through (+ and - ) is made of: IITCODE Alias Description 13963 MAZZONI_0_3-0_8-250_SS_SHEATH Rectangular section sheath 0.3x0.8, L = 250 mm Danger inside sheath 13963 please DO NOT USE Teflon sheath!!! Note IITCODE 13963 is alternative to the 4545 (old one - not in use ANYMORE) and it was introduced only for cost efficiency. Please follow this link for an extended HOWTO route the cable.","title":"2.1 Proximal joints"},{"location":"icub_tendons/hand_cabling_V2/#211-thumb-peculiarity","text":"The THUMB is a finger a bit particular in the wiring compared to the index and the middle because - as it is the finger with the most degrees of freedom- it needs to pass a series of pulleys at the base of it in order to add also the thumb oppose joint movement inside the articulation. The IITCODE 2375 as specification described below : IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Is needed for the 3 pieces circled in red on the picture above. Here are the specs for each one of them: Number Type Length (mm) 1 distal short 11.5 2 prox short (-) 11 3 prox short (+) 9 Please follow this link for an extended HOWTO route the cable. Once the 3 proximal joints are cabled, the lateral view of the forearm should look like the picture below. The 6 sheaths are pointed by the red arrows.","title":"2.1.1   THUMB peculiarity"},{"location":"icub_tendons/hand_cabling_V2/#22-distal-joints","text":"The 5 proximal joints (theoretically 5 but in practice just 4 motors need to be wired): Thumb Index Middle Ring and Pinkie Located here: RIGHT FOREARM LEFT FOREARM Are all wired with the cable 0.61mm coated from CARLSTAHL GmbH as per the following table: IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH Every sheath is made of both the following pieces: IITCODE Alias Description 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm 2386 TEFLON_SHEATH Insulating sheath, AWG22, inner dia 0,709 -0/+0,102 mm, material thickness 0,152 -0/+0,102mm, Teflon, transparent Please follow this link for an extended HOWTO route the cable.","title":"2.2 Distal joints"},{"location":"icub_tendons/hand_cabling_V2/#23-thumb-oppose","text":"To build the thumb oppose you just need 2 pieces of the sheath IITCODE 2375 Label Dimension (mm) IITCODE - SHEATH S0 50 2375 (+Teflon) S2 57 2375 (+Teflon) And approximatively 50cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 2 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable. Remember that the shorter sheat is S0 and the longer one is S2.","title":"2.3 Thumb Oppose"},{"location":"icub_tendons/hand_cabling_V2/#24-fingers-abduction","text":"To build the fingers abduction you just need 3 pieces of the sheath IITCODE 2375 Label Dimension(mm) IITCODE - SHEATH T0 90 2375 T2 27 2375 T4 44 2375 Danger inside sheath 2375 please DO NOT USE Teflon sheath!!! and approximatively 50cm of IITCODE 1815 to route it. IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2375 SHEATH Open spiral spring, inox steel AISI302, D ext= 1.6mm, D wire= 0.25mm, L = 500 mm Here is a more detail specification of where to find the 3 pieces: Left Hand Right Hand Please follow this link for an extended HOWTO route the cable.","title":"2.4 Fingers Abduction"},{"location":"icub_tendons/hand_cabling_V2/#3-how-to-cable-wrist","text":"","title":"3    HOW TO CABLE - WRIST"},{"location":"icub_tendons/hand_cabling_V2/#31-wrist-tendons-length","text":"Here is the list of the 10 tendons needed to build the wrist movements: Tendon IITCODE Length Alias 1 6400 72 mm RC_IIT_019_G_019 2 6402 84 mm RC_IIT_019_G_020 3 6404 101 mm RC_IIT_019_G_021 4 6413 124 mm RC_IIT_019_G_022 5 6414 107 mm RC_IIT_019_G_023 6 6415 113 mm RC_IIT_019_G_024 7 6416 112 mm RC_IIT_019_G_025 8 6417 107mm RC_IIT_019_G_026 9 6418 51 mm RC_IIT_019_G_027 10 6419 43 mm RC_IIT_019_G_028","title":"3.1     Wrist tendons length"},{"location":"icub_tendons/hand_cabling_V2/#32-construction-table","text":"The overall cables of the wrist are all build from IITCODE 4482 (of Length defined in the table above) and 2 crimps IITCODE 4722, here is the table reporting the specifics of those pieces: IITCODE Number of pieces Alias/Provider Code Description 4482 1 CG077081 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,81mm, not coated, AISI 304 4722 2 RC_TLR_010_P_100 THIMBLE FOR CABLE 0.8mm","title":"3.2 Construction table"},{"location":"icub_tendons/hand_cabling_V2/#33-right-forearm-wrist-motor-tendons","text":"From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons. To get a more details on how to rewire them, please follow this link","title":"3.3 Right Forearm - Wrist motor tendons"},{"location":"icub_tendons/hand_cabling_V2/#34-left-forearm-wrist-motor-tendons","text":"From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons. To get a more details on how to rewire them, please follow this link","title":"3.4 Left Forearm - Wrist motor tendons"},{"location":"icub_tendons/hand_cabling_V2/#35-tensioner-iitcode-3514","text":"To properly tense the 8 tendons of the Forearm it is mandatory to add the tensioner IITCODE 3514 - alias CAD of the assembly: RC_TLR_010_G014 - it is made by the following pieces: IITCODE Revision Alias Description 3559 A3 RC_TLR_010_P_050 TENSIONER BODY 3560 A1 RC_TLR_010_P_046 TENSIONER SCREW 3561 RC_TLR_010_P_049 LOCK NUT 3562 A1 RC_TLR_010_P_048 TENSIONER SCREW 3563 RC_TLR_010_P_047 LOCK NUT","title":"3.5 Tensioner - IITCODE 3514"},{"location":"icub_tendons/hand_cabling_V2/#36-wrist-passive-tendons","text":"From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. RIGHT WRIST LEFT WRIST To get more details on how to rewire them, please follow this link .","title":"3.6 Wrist - Passive tendons"},{"location":"icub_tendons/hand_cabling_V2/#37-test-motion","text":"Every single motor listed below needs to be tested at the end of the cabling to ensure the perfect motion. MOTOR LABEL MOTOR FUNCTION volt to open volts to close 2M0 pronosuppination 0.5V-1.5V 0.5V-1.5V 2M1 inside wrist motor 0.5V-1.5V 0.5V-1.5V 2M2 outside wrist motor 0.5V-1.5V 0.5V-1.5V 2M3 hand fingers 1.5-2V 1.5-2V 3M0 thumb oppose 0.5-1V(0) 2.5Vmax(90) 3M1 thum prox 0.5V-1V 0.5V-1V 3M2 thumb distal 2V-2.5V 2V-2.5V 3M3 index prox 0.5V-1.5V 0.5V-1.5V 4M0 index distal 1.5-2V 1.5-2V 4M1 midlle prox 0.5V-1.5V 0.5V-1.5V 4M2 middle distal 1-1.5V 1-1.5V 4M3 pinkie and ring 1V-1.5V 1V-1.5V","title":"3.7 TEST - MOTION"},{"location":"icub_tendons/lower_arm/","text":"Definition of \"Lower Arm\" \u00b6 We define the \" Lower Arm \" as the assembly of the Forearm and the Hand . Definition LOWER ARM = FOREARM + HAND The Lower Arm is composed of 12 motors ( Forearm: 10 + Hand: 2) Let's describe the functionality of those motors: Forearm: (10) Pronosupination (1) Wrist: (2) = pan + tilt Thumb: (2) = proximal + distal Index: (2) = proximal + distal Middle: (2) = proximal + distal Pinky-ring fingers: (1) = distal Hand: (2) Fingers abduction (1) Thumb oppose (1) 1 VERSION 1 \u00b6 Let's have an overview of the mechanical CAD from different view angles. Left Forearm V1 Right Forearm V1 Please follow this link to reach the HOWTO page to repair the Version 1 of the Lower Arm. 2 VERSION 2 \u00b6 Let's have an overview of the mechanical CAD from different view angles. Left Forearm V2 Right Forearm V2 Please follow this link to reach the HOWTO page to repair the Version 2 of the Lower Arm.","title":"Definition"},{"location":"icub_tendons/lower_arm/#definition-of-lower-arm","text":"We define the \" Lower Arm \" as the assembly of the Forearm and the Hand . Definition LOWER ARM = FOREARM + HAND The Lower Arm is composed of 12 motors ( Forearm: 10 + Hand: 2) Let's describe the functionality of those motors: Forearm: (10) Pronosupination (1) Wrist: (2) = pan + tilt Thumb: (2) = proximal + distal Index: (2) = proximal + distal Middle: (2) = proximal + distal Pinky-ring fingers: (1) = distal Hand: (2) Fingers abduction (1) Thumb oppose (1)","title":"Definition of \"Lower Arm\""},{"location":"icub_tendons/lower_arm/#1-version-1","text":"Let's have an overview of the mechanical CAD from different view angles. Left Forearm V1 Right Forearm V1 Please follow this link to reach the HOWTO page to repair the Version 1 of the Lower Arm.","title":"1    VERSION 1"},{"location":"icub_tendons/lower_arm/#2-version-2","text":"Let's have an overview of the mechanical CAD from different view angles. Left Forearm V2 Right Forearm V2 Please follow this link to reach the HOWTO page to repair the Version 2 of the Lower Arm.","title":"2    VERSION 2"},{"location":"icub_tendons/lower_arm_V1/","text":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 1 \u00b6 1 OVERVIEW \u00b6 Let's have an overview of the mechanical CAD from different view angles. Left Forearm V1 Right Forearm V1 1.1 Rules of Thumb for a good start: \u00b6 1 - Visual inspection (remove the covers - around the forearm and above the hand - and check for broken cables) 2 - Identification (which part needs to be repaired) 3 - Cleaning and Removing the broken cable 2 Distal Joints \u00b6 There are 2 types of distal Joints on this version of the forearm: The ones which go inside a motor shaft to get anchored and, as soon as the motor is spinning, the cable rolls around the pulley and closes the joint. Those motors are perfectly identical - only the positions differ: Thumb, Index & Middle fingers The ones which are attached to the slider: Ring and Pinkie fingers 2.1 Location \u00b6 WHERE JOINT POSITION Thumb distal easy to find: no slider above or hiding it. It is also right next to the motor with the cage Index and Middle they are located beneath the slider (other side of the wrist, external) Ring and Pinkie they are attached onto the moving part of the slider (internal) WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones. 2.2 Cabling \u00b6 2.2.1 Preparation \u00b6 The minimum requirement to start recabling: IITCODE Alias Description 2391 U7194561 Stainless steel micro cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 2.2.2 Knot creation \u00b6 STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391. Make a knot at one extremity. use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Place the pliers on the same side, in order to not damage the cable. drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. cut the excess of cable FINISHED!!! Insert the knot until it remains inside the socket of the pulley 2.2.3 Thumb \u00b6 Here you can find a procedure for recabling the Thumb Distal Joint of the right hand of the robot. WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones. Pictures step by step guide In order to recable this joint, just insert the new cable IN side the hole (red circle - blue arrow) - the hole is in the internal side of the pulley cage. Once inserted, the cable should get OUT at the base of the phalange (red arrow). From the base of the phalange, insert the cable in the two pulleys following the path (red), ensuring that the cable remains parallel while looping (see bottom picture). For closing the cable, make it exit from the hole at the base of the nail and secure it in its socket with a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down): you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!! 2.2.4 Index or Middle \u00b6 Here you can find a procedure for recabling the Index or Middle Distal Joints of the right hand of the robot. WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones. Pictures step by step guide You must consider to move away the slider which covers both motors, to be able to see clearly the hole where the cable will go - for that purpose, please remove the 4 screws indicated in the picture. After having removed the screws you should be able to move sideways the slider, being able more easily to fit the cable into the retaining socket, but mainly see both internal holes (blue circle for middle distal and red circle for index distal). Put the cable inside the correct hole, depending on which cable you are going to restore (middle finger - red hole & index finger - blue hole). Push it until it gets OUT from the base of the first phalange of either index or middle depending on the cable you want to fix. Twin the cable as shown and make a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down): you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!! 2.2.5 Ring and Pinkie \u00b6 These 2 fingers actually form a single distal joint and are in fact driven by a single motor. Note Those fingers need to be done together in order to make sure that both cable close simultaneously. The 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider. For each cabling please follow the procedures below. 2.2.5a Cabling for the fingers \u00b6 Pictures step by step guide 1. Prepare 2 cables of 40 cm of IITCODE 2391 and make sure you make the knot as taught above 2. The starting points of the cabling are the 2 holes of the slider 3 .pass both cables inside the parallel holes 4. the exit of both cables is at the base of the phalange 5. cable routing (same rules as other fingers). To be able to pass the cable at the base of the nail it is important to create space by removing the nail (plastic cover) and moving forward the fingertip for 1 cm from its base. 6. please write with a marker at the base of the nails where the knot should be in order to have a perfect synchronous closing for both fingers. 7. Now close manually the 2 fingers to get some slack to the cable and pull it out a bit to see where you should create the knot - at the very end of the mark on the cable. 8. If you did good, when releasing the fingers they should be symmetrical FINISHED!!! 2.2.5b Cabling for the motor side \u00b6 Here you can find the procedure for the cabling of the motor side - responsible for the slider movement: Pictures Steb by step guide Put an about 6 mm thickness piece in between the slider and the Ergal part (yellow). Take one meter of cable IITCODE 1815 and start cabling along the pulley with cage already on: - 1 turn around the pulley for the motor side - 3 turns around pulley for the ball bearing side Make sure that the cables goes out of the pulley from both holes tangentially to the pulley. Insert the sheaths 0+S (ball bearing side) and 0-S (motor side). Assembly the motor passing the cable with 0-S sheath in the Ergal part - central hole, hand side (H5). Pass the cable with the 0+L sheath through the two motors under the slider, put a tensioner and the 0+S sheath and pass through the central hole of the Ergal part (cable should get out from H4), elbow side. At that moment the 2 sides of the cable get out, one from H4 and other side out of the Ergal part H5. Now pass the cables inside the slider superior and inferior holes: from H5 to H7 and from H4 to H6. Keeping straight the fingers with the piece of about 6 mm thickness inserted, tension the (0+S) cable and mark it with a pen, afterwards pull the slider backwards (the finger getting closed) and make a knot where there is the pen mark. Close the fingers (electrically) with the motor providing \u00b1 5.5 Volt and make the knot nearer than possible to the slider. 3 Proximal Joints \u00b6 3.1 Location \u00b6 Below you can see the back views of the forearms (palm down). The motor positions are mirrored. LEFT FOREARM RIGHT FOREARM real pic real pic If ever you realize that one of the following cable is broken bear in mind: Tip The start of the wiring for each proximal is identical (wiring around the motor pulley), the index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier. 3.2 Cabling \u00b6 3.2.1 Preparation \u00b6 The minimum requirement to start recabling the proximal joints is: IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 3.2.1 Cabling of the motor pulley & fingers \u00b6 Let' start with the cabling of the motor pulley. Pictures step by step guide Take 1 meter of IITCODE 1815 The following steps are common for the three fingers (index, middle, thumb). However, the holes for the thumb in the frame are slightly different (see next table). Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. insert the cable inside the pulley and equitably half the cable on both side of the pulley. Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part of the cable that will go into the hole the closest from the motor (red cable). Tip YOU may need to use the cable , glue it a the tip (2 cm long) on both side. With a plier make 2 times 90 degree angles on the cable at about 3-4 mm from one another. see picture to manage to extract the cable once it passes in between the thread and the neck of the frame. !!!PICTURE NEEDED!!!! Now we proceed with the cabling of the fingers. Pictures step by step guide After wrapping the cable on the pulley as shown before, insert the two cable extremities inside the frame holes for the Index & Middle. For the thumb, the frame holes are designed inclined by 45 deg, therefore the cables will not enter the frame perpendicularly as the previous case. Push the two sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the Thumb: the cables exit from the base of the finger and enter inside two sheaths. For Index & Middle the cables exit at the base of their respective finger. Final cabling: For the Thumb, pass the cables around the pulley as shown. Start with the blue one. Fix the ends of the cables with a knot. Same procedure for the other fingers and make a knot at the end. FINISHED!!! Tip The final cabling is tricky. First, remember to CLOSE the tensioner of each cable before starting the cabling. If you leave the tensioners open, the cabling will not work. For making the final knot, put a mark on the blue cable and knot it. Slowly turn the motor CCW/CW while pulling the red extremity, ensuring that the cable is correctly running on the motor pulley. When the finger is completely closed pull the red cable and put a mark where the knot will be. Proceed by making the knot the closest to the mark. Finally, you can use the tensioners for removing the slack.","title":"Lower Arm V1"},{"location":"icub_tendons/lower_arm_V1/#howto-repair-any-cable-from-a-forearm-or-hand-version-1","text":"","title":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 1"},{"location":"icub_tendons/lower_arm_V1/#1-overview","text":"Let's have an overview of the mechanical CAD from different view angles. Left Forearm V1 Right Forearm V1","title":"1 OVERVIEW"},{"location":"icub_tendons/lower_arm_V1/#11-rules-of-thumb-for-a-good-start","text":"1 - Visual inspection (remove the covers - around the forearm and above the hand - and check for broken cables) 2 - Identification (which part needs to be repaired) 3 - Cleaning and Removing the broken cable","title":"1.1 Rules of Thumb for a good start:"},{"location":"icub_tendons/lower_arm_V1/#2-distal-joints","text":"There are 2 types of distal Joints on this version of the forearm: The ones which go inside a motor shaft to get anchored and, as soon as the motor is spinning, the cable rolls around the pulley and closes the joint. Those motors are perfectly identical - only the positions differ: Thumb, Index & Middle fingers The ones which are attached to the slider: Ring and Pinkie fingers","title":"2 Distal Joints"},{"location":"icub_tendons/lower_arm_V1/#21-location","text":"WHERE JOINT POSITION Thumb distal easy to find: no slider above or hiding it. It is also right next to the motor with the cage Index and Middle they are located beneath the slider (other side of the wrist, external) Ring and Pinkie they are attached onto the moving part of the slider (internal) WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones.","title":"2.1 Location"},{"location":"icub_tendons/lower_arm_V1/#22-cabling","text":"","title":"2.2 Cabling"},{"location":"icub_tendons/lower_arm_V1/#221-preparation","text":"The minimum requirement to start recabling: IITCODE Alias Description 2391 U7194561 Stainless steel micro cable, cable construction 7x19mm, nom. dia 0.45mm, outer dia 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH","title":"2.2.1 Preparation"},{"location":"icub_tendons/lower_arm_V1/#222-knot-creation","text":"STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391. Make a knot at one extremity. use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Place the pliers on the same side, in order to not damage the cable. drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. cut the excess of cable FINISHED!!! Insert the knot until it remains inside the socket of the pulley","title":"2.2.2 Knot creation"},{"location":"icub_tendons/lower_arm_V1/#223-thumb","text":"Here you can find a procedure for recabling the Thumb Distal Joint of the right hand of the robot. WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones. Pictures step by step guide In order to recable this joint, just insert the new cable IN side the hole (red circle - blue arrow) - the hole is in the internal side of the pulley cage. Once inserted, the cable should get OUT at the base of the phalange (red arrow). From the base of the phalange, insert the cable in the two pulleys following the path (red), ensuring that the cable remains parallel while looping (see bottom picture). For closing the cable, make it exit from the hole at the base of the nail and secure it in its socket with a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down): you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!!","title":"2.2.3 Thumb"},{"location":"icub_tendons/lower_arm_V1/#224-index-or-middle","text":"Here you can find a procedure for recabling the Index or Middle Distal Joints of the right hand of the robot. WATCH OUT FOR the Left forearm : the motor positions are \"mirrored\" respect to the right ones. Pictures step by step guide You must consider to move away the slider which covers both motors, to be able to see clearly the hole where the cable will go - for that purpose, please remove the 4 screws indicated in the picture. After having removed the screws you should be able to move sideways the slider, being able more easily to fit the cable into the retaining socket, but mainly see both internal holes (blue circle for middle distal and red circle for index distal). Put the cable inside the correct hole, depending on which cable you are going to restore (middle finger - red hole & index finger - blue hole). Push it until it gets OUT from the base of the first phalange of either index or middle depending on the cable you want to fix. Twin the cable as shown and make a knot 1-2cm away from the exit of the nail. By using a flat screwdriver the size of the throat, turning it the direction shown above (front view of the hand with palm down): you should be able to see the cable get sucked up until finally you can see the finger closing entirely. Make sure the finger can easily get closed and opened by turning CW and CCW from mid range closing. FINISHED!!!","title":"2.2.4 Index or Middle"},{"location":"icub_tendons/lower_arm_V1/#225-ring-and-pinkie","text":"These 2 fingers actually form a single distal joint and are in fact driven by a single motor. Note Those fingers need to be done together in order to make sure that both cable close simultaneously. The 2 fingers are so actuated by 3 wires - 2 for the distal cables inside the fingers and 1 inside the motor shaft which moves the slider. For each cabling please follow the procedures below.","title":"2.2.5 Ring and Pinkie"},{"location":"icub_tendons/lower_arm_V1/#225a-cabling-for-the-fingers","text":"Pictures step by step guide 1. Prepare 2 cables of 40 cm of IITCODE 2391 and make sure you make the knot as taught above 2. The starting points of the cabling are the 2 holes of the slider 3 .pass both cables inside the parallel holes 4. the exit of both cables is at the base of the phalange 5. cable routing (same rules as other fingers). To be able to pass the cable at the base of the nail it is important to create space by removing the nail (plastic cover) and moving forward the fingertip for 1 cm from its base. 6. please write with a marker at the base of the nails where the knot should be in order to have a perfect synchronous closing for both fingers. 7. Now close manually the 2 fingers to get some slack to the cable and pull it out a bit to see where you should create the knot - at the very end of the mark on the cable. 8. If you did good, when releasing the fingers they should be symmetrical FINISHED!!!","title":"2.2.5a Cabling for the fingers"},{"location":"icub_tendons/lower_arm_V1/#225b-cabling-for-the-motor-side","text":"Here you can find the procedure for the cabling of the motor side - responsible for the slider movement: Pictures Steb by step guide Put an about 6 mm thickness piece in between the slider and the Ergal part (yellow). Take one meter of cable IITCODE 1815 and start cabling along the pulley with cage already on: - 1 turn around the pulley for the motor side - 3 turns around pulley for the ball bearing side Make sure that the cables goes out of the pulley from both holes tangentially to the pulley. Insert the sheaths 0+S (ball bearing side) and 0-S (motor side). Assembly the motor passing the cable with 0-S sheath in the Ergal part - central hole, hand side (H5). Pass the cable with the 0+L sheath through the two motors under the slider, put a tensioner and the 0+S sheath and pass through the central hole of the Ergal part (cable should get out from H4), elbow side. At that moment the 2 sides of the cable get out, one from H4 and other side out of the Ergal part H5. Now pass the cables inside the slider superior and inferior holes: from H5 to H7 and from H4 to H6. Keeping straight the fingers with the piece of about 6 mm thickness inserted, tension the (0+S) cable and mark it with a pen, afterwards pull the slider backwards (the finger getting closed) and make a knot where there is the pen mark. Close the fingers (electrically) with the motor providing \u00b1 5.5 Volt and make the knot nearer than possible to the slider.","title":"2.2.5b Cabling for the motor side"},{"location":"icub_tendons/lower_arm_V1/#3-proximal-joints","text":"","title":"3 Proximal Joints"},{"location":"icub_tendons/lower_arm_V1/#31-location","text":"Below you can see the back views of the forearms (palm down). The motor positions are mirrored. LEFT FOREARM RIGHT FOREARM real pic real pic If ever you realize that one of the following cable is broken bear in mind: Tip The start of the wiring for each proximal is identical (wiring around the motor pulley), the index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier.","title":"3.1 Location"},{"location":"icub_tendons/lower_arm_V1/#32-cabling","text":"","title":"3.2 Cabling"},{"location":"icub_tendons/lower_arm_V1/#321-preparation","text":"The minimum requirement to start recabling the proximal joints is: IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316","title":"3.2.1 Preparation"},{"location":"icub_tendons/lower_arm_V1/#321-cabling-of-the-motor-pulley-fingers","text":"Let' start with the cabling of the motor pulley. Pictures step by step guide Take 1 meter of IITCODE 1815 The following steps are common for the three fingers (index, middle, thumb). However, the holes for the thumb in the frame are slightly different (see next table). Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. insert the cable inside the pulley and equitably half the cable on both side of the pulley. Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part of the cable that will go into the hole the closest from the motor (red cable). Tip YOU may need to use the cable , glue it a the tip (2 cm long) on both side. With a plier make 2 times 90 degree angles on the cable at about 3-4 mm from one another. see picture to manage to extract the cable once it passes in between the thread and the neck of the frame. !!!PICTURE NEEDED!!!! Now we proceed with the cabling of the fingers. Pictures step by step guide After wrapping the cable on the pulley as shown before, insert the two cable extremities inside the frame holes for the Index & Middle. For the thumb, the frame holes are designed inclined by 45 deg, therefore the cables will not enter the frame perpendicularly as the previous case. Push the two sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the Thumb: the cables exit from the base of the finger and enter inside two sheaths. For Index & Middle the cables exit at the base of their respective finger. Final cabling: For the Thumb, pass the cables around the pulley as shown. Start with the blue one. Fix the ends of the cables with a knot. Same procedure for the other fingers and make a knot at the end. FINISHED!!! Tip The final cabling is tricky. First, remember to CLOSE the tensioner of each cable before starting the cabling. If you leave the tensioners open, the cabling will not work. For making the final knot, put a mark on the blue cable and knot it. Slowly turn the motor CCW/CW while pulling the red extremity, ensuring that the cable is correctly running on the motor pulley. When the finger is completely closed pull the red cable and put a mark where the knot will be. Proceed by making the knot the closest to the mark. Finally, you can use the tensioners for removing the slack.","title":"3.2.1 Cabling of the motor pulley &amp; fingers"},{"location":"icub_tendons/lower_arm_V2/","text":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 2 \u00b6 1 LOWER ARM VERSION 2 \u00b6 Let's have an overview of the mechanical CAD from different view angles. Left Forearm V2 Right Forearm V2 1.1 Rules of Thumb for a good start: \u00b6 1 - Visual inspection (remove the covers - around the forearm and above the hand - and look for broken cables) 2 - Identification (which part needs to be repaired) 3 - Cleaning and Removing the broken cable 4 - Follow the instructions below to repair 1.2 Disconnection \u00b6 A good question on which people may have when first try to repair the Forearm is: \"Do I need to disconnect the Lower Arm?\" The answer is as follow: What is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal, fingers abduction and Thumb oppose ) MANDATORY Please refer to this following link to get know HOWTO disconnect the Lower Arm V2. 2 Distal Joints \u00b6 If ever you realize that one of the following cable is broken bear in mind: There are 2 types of distal Joint on this version of the forearm: The simplest ones - which go inside a motor shaft to get anchored - as soon as the motor is spinning the cable rolls around the pulley and close the joint. Those motors are perfectly identical - only the positions differ : Thumb, Index & Middle distal joints The 2 trickiest ones which are actually a double distal joint in one motor. Ring and Pinkie Fingers 2.1 Location \u00b6 The first question to answer will be \"Where are those cables located?\" Here is the table to locate all the distal joints on a forearm ( left in this case) LOCATION JOINT POSITION Index and Middle they are located ATOP the forearm when it lies palm face DOWN Thumb distal AND Ring and Pinkie They are located ATOP when the forearm lies palm face UP WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the left ones. RIGHT FOREARM LEFT FOREARM 2.2 WIRING \u00b6 2.2.1 Preparation \u00b6 The minimum requirement to start re-cabling distal joints is: IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 2.2.2 Knot Creation \u00b6 STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391. Make a knot at one extremity. Use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. Cut the excess of cable. FINISHED!!! 2.2.3 Wiring Explanation \u00b6 THUMB \u00b6 We will proceed by showing you how to re-cable the distal thumb on the LEFT Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained. pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the thumb 5. Wire this way 6. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) - PLEASE DO NOT USE GLUE ON THE FINAL KNOT 7. Just use a screwdriver to make the thumb start closing YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones. INDEX or MIDDLE: \u00b6 We will proceed by showing you how to re-cable both Index distal and Middle finger from the LEFT Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained. Pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the Middle or Index (view from the palm side) 5. Wire this way. 6. Please remove the screw holding the nail onto the fingertip - move the fingertip sensor away from the base of the fingertip (1cm away max) 7. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) 7. Just use a screwdriver to make the thumb start closing. Just recall to do not force with the screwdriver if the movement looks like stuck, do some rotation clock/counter-clock wise in order to unstuck it. YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones. RING AND PINKIE: \u00b6 Note Those fingers need to be done together in order to make sure that both cables close simultaneously. WHERE step by step guide 1. Prepare 2 cables of about 40 cm of IITCODE 2391 and make sure you make the knot as taught above. !!!watch out!!! the 2 holes are a bit off one to another: make sure, with a fat screwdriver, that the pulley is NOT 180 degrees rotated or else the cables could jump one on another during the closing phase. 2. Insert both cables into their respective holes and start wiring as follow. 3. Push the 2 cables in the sheath until they get out from the 2 holes circled. 4. Cable routing. To be able to pass the cable at the base of the nail it is important to remove the nail and move forward the fingertip for 1 cm from its base. picture if possible 5. Please write with a marker at the base of the nails where the knot should be in order to have a perfect simultaneous closing for both fingers. 6. finally make the knot - - PLEASE DO NOT USE GLUE Tip The insertion of the cables into their holes, passing through the pulleys, is tricky. If you are struggling, cut the cable extremity with a 45 deg angle , so it will be easier for it to get in position. 3 Proximal Joints \u00b6 3.1 location \u00b6 LEFT FOREARM RIGHT FOREARM If you ever realize that one of the following cable is broken bear in mind: Tip The start of the wiring for each proximal is identical (wiring around the motor pulley). The index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier. 3.2 WIRING \u00b6 3.2.1 Preparation \u00b6 The minimum requirement to start re-cabling the proximal joints is: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 3.2.2 Cabling the Motor Pulley \u00b6 LOCATION step by step guide Take 1 meter of IITCODE 1815. Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. Insert the cable inside the pulley and equitably half the cable on both sides of the pulley. In order to differentiate the two cable parts, we will call them red and blue. !!!TIP!!! In order to keep in position the cable split in two halves, pull it like shown in the last pic Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part that will go into the hole the closest from the motor (red cable). In order to keep the cable in position after the turns, you can push it with a screwdriver like shown in this last picture Tip YOU may need to glue the cable at the tip (2cm long) on both sides. With a plier make 2 times 90 degree angles on the cable at about 3-4mm from one another, in order to create a hook. Extract the cable once it passes between the thread and the neck of the frame. Tip When inserting the cable in the pulley, make sure that the pulley holes are in phase with the frame holes. In other words, the pulley threads need to be aligned with the 2 holes in the frame. LOCATION step by step guide !!!!WARNING!!! the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle. After wrapping the cable on the pulley, insert the 2 cable extremities inside the frame holes. For the thumb, the frame holes are designed inclined by 45 deg. Push the 2 sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the THUMB only: the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle, as shown below. For all the proximal joints the final cabling starts at the base of their respective finger. Cable as follow and block each side of the cable with the nut screw M1.6x3 Tense each side of the cable by releasing the nut screw and pinch and rotate. Close the nut screw. Make a knot at the base of the cable exit, a little further away from it (\u00b15 mm) AND keep in mind that the knot will have to remain in the slot . FINISHED!!! Danger PLEASE DO NOT USE GLUE ON THE FINAL KNOT","title":"Lower Arm V2"},{"location":"icub_tendons/lower_arm_V2/#howto-repair-any-cable-from-a-forearm-or-hand-version-2","text":"","title":"HOWTO REPAIR ANY CABLE FROM A FOREARM or HAND - VERSION 2"},{"location":"icub_tendons/lower_arm_V2/#1-lower-arm-version-2","text":"Let's have an overview of the mechanical CAD from different view angles. Left Forearm V2 Right Forearm V2","title":"1    LOWER ARM VERSION 2"},{"location":"icub_tendons/lower_arm_V2/#11-rules-of-thumb-for-a-good-start","text":"1 - Visual inspection (remove the covers - around the forearm and above the hand - and look for broken cables) 2 - Identification (which part needs to be repaired) 3 - Cleaning and Removing the broken cable 4 - Follow the instructions below to repair","title":"1.1 Rules of Thumb for a good start:"},{"location":"icub_tendons/lower_arm_V2/#12-disconnection","text":"A good question on which people may have when first try to repair the Forearm is: \"Do I need to disconnect the Lower Arm?\" The answer is as follow: What is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal, fingers abduction and Thumb oppose ) MANDATORY Please refer to this following link to get know HOWTO disconnect the Lower Arm V2.","title":"1.2 Disconnection"},{"location":"icub_tendons/lower_arm_V2/#2-distal-joints","text":"If ever you realize that one of the following cable is broken bear in mind: There are 2 types of distal Joint on this version of the forearm: The simplest ones - which go inside a motor shaft to get anchored - as soon as the motor is spinning the cable rolls around the pulley and close the joint. Those motors are perfectly identical - only the positions differ : Thumb, Index & Middle distal joints The 2 trickiest ones which are actually a double distal joint in one motor. Ring and Pinkie Fingers","title":"2    Distal Joints"},{"location":"icub_tendons/lower_arm_V2/#21-location","text":"The first question to answer will be \"Where are those cables located?\" Here is the table to locate all the distal joints on a forearm ( left in this case) LOCATION JOINT POSITION Index and Middle they are located ATOP the forearm when it lies palm face DOWN Thumb distal AND Ring and Pinkie They are located ATOP when the forearm lies palm face UP WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the left ones. RIGHT FOREARM LEFT FOREARM","title":"2.1 Location"},{"location":"icub_tendons/lower_arm_V2/#22-wiring","text":"","title":"2.2 WIRING"},{"location":"icub_tendons/lower_arm_V2/#221-preparation","text":"The minimum requirement to start re-cabling distal joints is: IITCODE Alias Description 2391 U7194561 Stainless steel micro-cable, cable construction 7x19mm, nom. diameter 0.45mm, outer diameter 0.61mm, Polyamide coated, AISI 316 - CARL STAHL GMBH","title":"2.2.1   Preparation"},{"location":"icub_tendons/lower_arm_V2/#222-knot-creation","text":"STEP BY STEP GUIDE FOR A GOOD KNOT Start by cutting one piece of 40cm from the cable IITCODE 2391. Make a knot at one extremity. Use 2 pliers to close it hard. The plier closest to the knot is just opened-free to let the cable to run over it but is here to block the knot, the second one pull the cable to tighten the knot. Drop a tear of glue on the knot and dry it. REMOVE the excess with a tissue - double check that the knot is perfectly dry before to proceed. Cut the excess of cable. FINISHED!!!","title":"2.2.2   Knot Creation"},{"location":"icub_tendons/lower_arm_V2/#223-wiring-explanation","text":"","title":"2.2.3   Wiring Explanation"},{"location":"icub_tendons/lower_arm_V2/#thumb","text":"We will proceed by showing you how to re-cable the distal thumb on the LEFT Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained. pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the thumb 5. Wire this way 6. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) - PLEASE DO NOT USE GLUE ON THE FINAL KNOT 7. Just use a screwdriver to make the thumb start closing YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones.","title":"             THUMB"},{"location":"icub_tendons/lower_arm_V2/#index-or-middle","text":"We will proceed by showing you how to re-cable both Index distal and Middle finger from the LEFT Forearm - Just be aware that the motors for the RIGHT Forearm are mirrored as per the WATCH OUT above explained. Pictures step by step guide 1. Insert the knot until it remains inside the socket of the pulley 2. Just insert the cable inside the hole (red circle) 3. The cable should get OUT from here - BE PATIENT!!! 4. The cable will then run inside the sheath until it reaches the base of the Middle or Index (view from the palm side) 5. Wire this way. 6. Please remove the screw holding the nail onto the fingertip - move the fingertip sensor away from the base of the fingertip (1cm away max) 7. Make the final knot - you need to make it very close to the finger nail hole (1-2cm away max) 7. Just use a screwdriver to make the thumb start closing. Just recall to do not force with the screwdriver if the movement looks like stuck, do some rotation clock/counter-clock wise in order to unstuck it. YOU ARE DONE!!! CONGRATULATIONS!!! Please close the fingertip and its nail and put back in place the lateral bar WATCH OUT FOR the Right forearm : the motor positions are \"mirrored\" respect to the Left ones.","title":"         INDEX or MIDDLE:"},{"location":"icub_tendons/lower_arm_V2/#ring-and-pinkie","text":"Note Those fingers need to be done together in order to make sure that both cables close simultaneously. WHERE step by step guide 1. Prepare 2 cables of about 40 cm of IITCODE 2391 and make sure you make the knot as taught above. !!!watch out!!! the 2 holes are a bit off one to another: make sure, with a fat screwdriver, that the pulley is NOT 180 degrees rotated or else the cables could jump one on another during the closing phase. 2. Insert both cables into their respective holes and start wiring as follow. 3. Push the 2 cables in the sheath until they get out from the 2 holes circled. 4. Cable routing. To be able to pass the cable at the base of the nail it is important to remove the nail and move forward the fingertip for 1 cm from its base. picture if possible 5. Please write with a marker at the base of the nails where the knot should be in order to have a perfect simultaneous closing for both fingers. 6. finally make the knot - - PLEASE DO NOT USE GLUE Tip The insertion of the cables into their holes, passing through the pulleys, is tricky. If you are struggling, cut the cable extremity with a 45 deg angle , so it will be easier for it to get in position.","title":"         RING AND PINKIE:"},{"location":"icub_tendons/lower_arm_V2/#3-proximal-joints","text":"","title":"3    Proximal Joints"},{"location":"icub_tendons/lower_arm_V2/#31-location","text":"LEFT FOREARM RIGHT FOREARM If you ever realize that one of the following cable is broken bear in mind: Tip The start of the wiring for each proximal is identical (wiring around the motor pulley). The index and middle proximal joints are cabled exactly the same way, just the thumb is a bit trickier.","title":"3.1 location"},{"location":"icub_tendons/lower_arm_V2/#32-wiring","text":"","title":"3.2 WIRING"},{"location":"icub_tendons/lower_arm_V2/#321-preparation","text":"The minimum requirement to start re-cabling the proximal joints is: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316","title":"3.2.1   Preparation"},{"location":"icub_tendons/lower_arm_V2/#322-cabling-the-motor-pulley","text":"LOCATION step by step guide Take 1 meter of IITCODE 1815. Turn the pulley in order to have the threads already facing (pointing toward) the holes inside the pink frame and the hole inside the pulley itself lying at horizontal. Insert the cable inside the pulley and equitably half the cable on both sides of the pulley. In order to differentiate the two cable parts, we will call them red and blue. !!!TIP!!! In order to keep in position the cable split in two halves, pull it like shown in the last pic Respect the only one rule: 2 full turns around the pulley for the hole close to the ball bearing (blue cable) and 1 full turn for the part that will go into the hole the closest from the motor (red cable). In order to keep the cable in position after the turns, you can push it with a screwdriver like shown in this last picture Tip YOU may need to glue the cable at the tip (2cm long) on both sides. With a plier make 2 times 90 degree angles on the cable at about 3-4mm from one another, in order to create a hook. Extract the cable once it passes between the thread and the neck of the frame. Tip When inserting the cable in the pulley, make sure that the pulley holes are in phase with the frame holes. In other words, the pulley threads need to be aligned with the 2 holes in the frame. LOCATION step by step guide !!!!WARNING!!! the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle. After wrapping the cable on the pulley, insert the 2 cable extremities inside the frame holes. For the thumb, the frame holes are designed inclined by 45 deg. Push the 2 sides of the cable inside the sheath (+) and (-) for each finger. The 2 sides of the cables should get out: For the THUMB only: the cabling for the thumb passes first by a pair of pulleys before returning to a perfectly identical cabling as Index and Middle, as shown below. For all the proximal joints the final cabling starts at the base of their respective finger. Cable as follow and block each side of the cable with the nut screw M1.6x3 Tense each side of the cable by releasing the nut screw and pinch and rotate. Close the nut screw. Make a knot at the base of the cable exit, a little further away from it (\u00b15 mm) AND keep in mind that the knot will have to remain in the slot . FINISHED!!! Danger PLEASE DO NOT USE GLUE ON THE FINAL KNOT","title":"3.2.2   Cabling the Motor Pulley"},{"location":"icub_tendons/neck/","text":"NECK V2 \u00b6 Here is the table showing the visual differences in between the First version of the iCub neck and the updated version 2 neck (NECK V2) Neck V1 - First 2 DOFs Neck V2 - First 2 DOFs The second release of the neck has 2 tendons and two differential joints to actuate the first 2 DoFs of the neck compared to the 2 serial joints of the previous version of the neck (V1). It makes it more robust, powerful and reliable. 1 Mechanical assembly of the 2 tendons: \u00b6 Fast Forward If you already have a spare tendon from your maintenance kit please jump to 2 Prepare 2 cables with the components and specifics described below: IITCODE Alias Descption 1001 U0778110 Stainless steel microcable, cable construction 7x7mm - (Coated ext 1.0 mm / core 0.81 mm) - CARL STAHL GMBH 2714 RC_IIT_010_P_064 D ext/int = 2.4 mm/0.85 mm - length 3.5 mm -- material X5CrNiMo1712-AIS1316 Head CABLE \u201cA\u201d : IITCODE: 5965 -- Alias: RC_IIT_019_G_018. Head CABLE \u201cB\u201d : IITCODE: 5964 -- Alias : RC_IIT_019_G_017. Note that the \u201cX\u201d marks in the picture above is the area where the Teflon coating needs to be peeled off. All dimensions are in mm . 2 Mounting Procedure \u00b6 2.1 Block version identification \u00b6 Where yields the difference Cable Block 1 Cable Block 2 Tightening System 2 nut screws M2.5x2.5 + Plate 2 screws M2x3 2.2 Rules of Thumb (RoT) for a Perfect START: \u00b6 Blocking Always block the cable in the peeled off Teflon section. Positioning The longest part of the cable should be facing toward the front of the robot and vice-versa the shortest part should be pointing toward the rear of the robot. Releasing Make sure that all tensioners are fully opened. Tip To block the cable with Cable Block 1 do the following: 1- Insert the little plate by the front of the neck and push it with any little tool in order to put it in the middle of the throat 2- Make sure the nut screws are already placed in their hole for one turn in their thread. 3- Use a magnet to lift it up in the excavation in the middle of the throat. (see picture below).In this way the throat is free to receive the cable. 4- Insert the cable and use the 2 nut screws (M2.5x2.5) to press the metallic plate above the cable. 5- Check that the cable firmly remains in position even if pulling the cable out. 2.3 Route Cable \u201dA\u201d \u00b6 Start with the longest part of the cable which rolls around the main pulley and turn around the pulley (2) to finally rolls around pulley (3). Use pulley Y to both tense and give more slack to the cable to put the crimp the head of the crimp into the lower tensioner. once tense on side of the cable simply turn around pulley (1) the other side of the cable for a \u00be turn and finally insert the crimp onto the lower tensioner of the pulley (4). 2.4 Route Cable \u201cB\u201d \u00b6 Follow the diagram above to rewire cable B in the same way as cable A but using the pulley X . 2.5 Final Tensioning \u00b6 Adjust the tension of both cables with the 4 tensioners. 1 and 2 for Cable A , 3 and 4 for Cable B","title":"Neck"},{"location":"icub_tendons/neck/#neck-v2","text":"Here is the table showing the visual differences in between the First version of the iCub neck and the updated version 2 neck (NECK V2) Neck V1 - First 2 DOFs Neck V2 - First 2 DOFs The second release of the neck has 2 tendons and two differential joints to actuate the first 2 DoFs of the neck compared to the 2 serial joints of the previous version of the neck (V1). It makes it more robust, powerful and reliable.","title":"NECK V2"},{"location":"icub_tendons/neck/#1-mechanical-assembly-of-the-2-tendons","text":"Fast Forward If you already have a spare tendon from your maintenance kit please jump to 2 Prepare 2 cables with the components and specifics described below: IITCODE Alias Descption 1001 U0778110 Stainless steel microcable, cable construction 7x7mm - (Coated ext 1.0 mm / core 0.81 mm) - CARL STAHL GMBH 2714 RC_IIT_010_P_064 D ext/int = 2.4 mm/0.85 mm - length 3.5 mm -- material X5CrNiMo1712-AIS1316 Head CABLE \u201cA\u201d : IITCODE: 5965 -- Alias: RC_IIT_019_G_018. Head CABLE \u201cB\u201d : IITCODE: 5964 -- Alias : RC_IIT_019_G_017. Note that the \u201cX\u201d marks in the picture above is the area where the Teflon coating needs to be peeled off. All dimensions are in mm .","title":"1    Mechanical assembly of the 2 tendons:"},{"location":"icub_tendons/neck/#2-mounting-procedure","text":"","title":"2    Mounting Procedure"},{"location":"icub_tendons/neck/#21-block-version-identification","text":"Where yields the difference Cable Block 1 Cable Block 2 Tightening System 2 nut screws M2.5x2.5 + Plate 2 screws M2x3","title":"2.1 Block version identification"},{"location":"icub_tendons/neck/#22-rules-of-thumb-rot-for-a-perfect-start","text":"Blocking Always block the cable in the peeled off Teflon section. Positioning The longest part of the cable should be facing toward the front of the robot and vice-versa the shortest part should be pointing toward the rear of the robot. Releasing Make sure that all tensioners are fully opened. Tip To block the cable with Cable Block 1 do the following: 1- Insert the little plate by the front of the neck and push it with any little tool in order to put it in the middle of the throat 2- Make sure the nut screws are already placed in their hole for one turn in their thread. 3- Use a magnet to lift it up in the excavation in the middle of the throat. (see picture below).In this way the throat is free to receive the cable. 4- Insert the cable and use the 2 nut screws (M2.5x2.5) to press the metallic plate above the cable. 5- Check that the cable firmly remains in position even if pulling the cable out.","title":"2.2 Rules of Thumb (RoT) for a Perfect START:"},{"location":"icub_tendons/neck/#23-route-cable-a","text":"Start with the longest part of the cable which rolls around the main pulley and turn around the pulley (2) to finally rolls around pulley (3). Use pulley Y to both tense and give more slack to the cable to put the crimp the head of the crimp into the lower tensioner. once tense on side of the cable simply turn around pulley (1) the other side of the cable for a \u00be turn and finally insert the crimp onto the lower tensioner of the pulley (4).","title":"2.3 Route Cable \u201dA\u201d"},{"location":"icub_tendons/neck/#24-route-cable-b","text":"Follow the diagram above to rewire cable B in the same way as cable A but using the pulley X .","title":"2.4 Route Cable \u201cB\u201d"},{"location":"icub_tendons/neck/#25-final-tensioning","text":"Adjust the tension of both cables with the 4 tensioners. 1 and 2 for Cable A , 3 and 4 for Cable B","title":"2.5 Final Tensioning"},{"location":"icub_tendons/remove/","text":"DISCONNECTION V1 AND V2 \u00b6 1 LOWER ARM V1 \u00b6 1.1 DO I NEED TO DISCONNECT THE LOWER ARM VERSION 1? \u00b6 The answer is : It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie distal joints) NOT necessary every other joint (all proximal joints, fingers abduction, Thumb oppose and Ring and Pinkie finger motor joint) MANDATORY 1.2 HOW DO I OPERATE 4 LOWER ARM V1? \u00b6 Skin biceps removal - leave the 3 lateral internal screws so the skin can hang on Biceps back cover removal - lateral screws and 3 triceps screws Disconnect skin Disconnect the MC4 connections remove the 3 screws holding the Lower ARM to the elbow Pictures Skin biceps removal 1 Skin biceps removal 2 Skin biceps removal 3 Biceps back cover removal 1 Biceps back cover removal 2 - skin is hanging Biceps back cover removal 3 Disconnect skin 1 Disconnect MC4 connections 1 Disconnect MC4 connections 2 Disconnect MC4 connections 3 Remove final 3 screws 2 LOWER ARM V2 \u00b6 2.1 DO I NEED TO DISCONNECT THE LOWER_ARM V2? \u00b6 The answer is : It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal joints, fingers abduction and Thumb oppose ) MANDATORY 2.2 HOW DO I OPERATE FOR LOWER ARM V2? \u00b6 Front skin biceps removal Biceps front cover removal - lateral screws and 4 screws Back skin biceps removal Biceps back cover removal Disconnect skin Lower part of the upper arm cover removal - remove lateral screws and disconnect skin Remove the 4 screws holding the L shape MC4-PLUS pack of boards Disconnect the MC4-PLUS connections Remove the 3 screws holding the Lower ARM to the elbow Pictures Front skin biceps removal 1 Front skin biceps removal 2 Biceps front cover removal 1 Biceps front cover removal 2 Biceps front cover removal 3 Back skin biceps removal Biceps back cover removal Disconnect skin 1 Disconnect skin 2 Remove 4 screws holding the L-shape piece Disconnect MC4-PLUS connections Remove final 3 screws","title":"Disconnection V2"},{"location":"icub_tendons/remove/#disconnection-v1-and-v2","text":"","title":"DISCONNECTION V1 AND V2"},{"location":"icub_tendons/remove/#1-lower-arm-v1","text":"","title":"1 LOWER ARM V1"},{"location":"icub_tendons/remove/#11-do-i-need-to-disconnect-the-lower-arm-version-1","text":"The answer is : It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie distal joints) NOT necessary every other joint (all proximal joints, fingers abduction, Thumb oppose and Ring and Pinkie finger motor joint) MANDATORY","title":"1.1 DO I NEED TO DISCONNECT THE LOWER ARM VERSION 1?"},{"location":"icub_tendons/remove/#12-how-do-i-operate-4-lower-arm-v1","text":"Skin biceps removal - leave the 3 lateral internal screws so the skin can hang on Biceps back cover removal - lateral screws and 3 triceps screws Disconnect skin Disconnect the MC4 connections remove the 3 screws holding the Lower ARM to the elbow Pictures Skin biceps removal 1 Skin biceps removal 2 Skin biceps removal 3 Biceps back cover removal 1 Biceps back cover removal 2 - skin is hanging Biceps back cover removal 3 Disconnect skin 1 Disconnect MC4 connections 1 Disconnect MC4 connections 2 Disconnect MC4 connections 3 Remove final 3 screws","title":"1.2 HOW DO I OPERATE 4 LOWER ARM V1?"},{"location":"icub_tendons/remove/#2-lower-arm-v2","text":"","title":"2 LOWER ARM V2"},{"location":"icub_tendons/remove/#21-do-i-need-to-disconnect-the-lower_arm-v2","text":"The answer is : It depends the problem you encounter, Please refer to the table below to find out either you need or not to disconnect the lower arm what is broken? REMOVING OR NOT distal joint (Thumb, Index, Middle, Ring or Pinkie) NOT necessary every other joint (all proximal joints, fingers abduction and Thumb oppose ) MANDATORY","title":"2.1 DO I NEED TO DISCONNECT THE LOWER_ARM V2?"},{"location":"icub_tendons/remove/#22-how-do-i-operate-for-lower-arm-v2","text":"Front skin biceps removal Biceps front cover removal - lateral screws and 4 screws Back skin biceps removal Biceps back cover removal Disconnect skin Lower part of the upper arm cover removal - remove lateral screws and disconnect skin Remove the 4 screws holding the L shape MC4-PLUS pack of boards Disconnect the MC4-PLUS connections Remove the 3 screws holding the Lower ARM to the elbow Pictures Front skin biceps removal 1 Front skin biceps removal 2 Biceps front cover removal 1 Biceps front cover removal 2 Biceps front cover removal 3 Back skin biceps removal Biceps back cover removal Disconnect skin 1 Disconnect skin 2 Remove 4 screws holding the L-shape piece Disconnect MC4-PLUS connections Remove final 3 screws","title":"2.2 HOW DO I OPERATE FOR LOWER ARM V2?"},{"location":"icub_tendons/shoulder_elbow/","text":"Shoulder & Elbow \u00b6 This chapter describes the wiring procedure for the cables of the shoulders and elbows, for every version of iCub made from version 1 to version 2.5, either in mounting phase or during a maintenance. 1 Cable Construction \u00b6 1 : length 272 mm - Diam. 1.5/1.75 2 : length 256 mm - Diam. 1.5/1.75 3 : length 279 mm - Diam. 1.5/1.75 4 : length 250 mm - Diam. 1.5/1.75 5 : length 235 mm - Diam. 1.5/1.75 6 : length 136 mm - Diam. 1.5/1.75 7 : length 163 mm - Diam. 1.2/1.50 8 : length 121 mm - Diam. 1.2/1.50 9 : length 110 mm - Diam. 1.2/1.50 10: length 154 mm - Diam. 1.2/1.50 Cables from 1 to 6 are RC_IIT_019_G_00X - X from 1 to 6 - each made of U7191517 (IITCODE 2390) with different lengths (see the list above) and 2 crimps RC_TLR_003_P_101 (IITCODE 3492). The assembly resulting cable can be purchased from with IITCODE from 4758 to 4763. IITCODE Alias Description 4758 RC_IIT_019_G_001 SHOULDER ROTATION CABLE 1 4759 RC_IIT_019_G_002 SHOULDER ROTATION CABLE 2 4760 RC_IIT_019_G_003 SHOULDER ROTATION CABLE 3 4761 RC_IIT_019_G_004 SHOULDER ROTATION CABLE 4 4762 RC_IIT_019_G_005 SHOULDER ROTATION CABLE 5 4763 RC_IIT_019_G_006 SHOULDER ROTATION CABLE 6 2390 U7191517 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,5mm, outer dia 1,75mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712 - AISI 316 1895 IIT_003_P_006_00 LEFT PULLEY - CRIMP COVER 1896 IIT_003_P_007_00 RIGHT PULLEY - CRIMP COVER For Cable 7-8-9-10 measures see above (respectively IITCODE from 13736 to 13739). Alternatively you could build your own, made from U7191215 (IITCODE 2389) and 2 crimps (IITCODE 3877) BUT note that it is really important to shrink down to 4mm the crimp that will be inside the tensioner holder IITCODE Alias Description 13736 RC_IIT_019_G_029 U7191215/SE000094 - 163mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13737 RC_IIT_019_G_030 U7191215/SE000094 - 121mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13738 RC_IIT_019_G_031 U7191215/SE000094 - 110mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13739 RC_IIT_019_G_032 U7191215/SE000094 - 154mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 2389 U7191215 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,2mm, outer dia 1,5mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3877 RC_TLR_005_P_101 Thimble for cable Dia 1.5mm (Inner dia 1.25mm) The cabling sequence for the shoulder is the following: (1 - 2) - (3 - 4) - (8 - 7) - (6 - 5) 2 Left Shoulder \u00b6 Rules for a good start 1.Always remove the broken cable 2.Pay attention of putting the tensionner upside down so that the crimp does not exit 3a.Keep in Mind that the shoulder is a set of 4 pairs of antagonistic cables : (1-2), (3-4), (8-7), (6-5) 3b.And by so,to put back in place one pair of cable you need to make sure that the tensioners for both cables are loose Block of pulleys Tensioner fully opened Cavity of the tensioner hidden - crimp can't escape 2.1 Left Shoulder Rotation Cable 1 and 2 \u00b6 If you have to repair cable 1 and/or cable 2, it is convenient to first: Remove the chest cover (follow this procedure ) in order to have better access to the pulleys Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&2 and thus tension them Tension cables 1 and 2, attach the other cables and finally tension them In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them: Tensioner cover Tensioner cover CAD model Let's see the cabling of tendons 1 & 2 in detail: Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the left crimp cover in ABS (IIT CODE: 1895) Crimp cover above the small pulley Left crimp cover Danger You need to remove both tensioners of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4) Route cable N2 as per the diagram above. Now you can tense both screws for tension cable 1 and 2 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown: 2.2 Left Shoulder Elevation Cable 3 and 4 \u00b6 As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the left cover crimp (IITCODE : 1895) Route cable N4 as per the diagram above. Now you can tense both screws for tension cable 3 and 4 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning IMPORTANT NOTES for Cable from 8 to 5 \u00b6 From cable 8 to 5 To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You first need to replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective tensioner. You will need later to start wiring cable 7 and 8 in their future path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS. There are 2 designs for the shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE VERSION 1 Remove the beige pulley (remove the 4 screws M2x12) until you don't remount cable 5 Reach the 2 screws M4x12 on the green pulley and just untighten them until you can pass both crimp 8 and 7 following the routing explain below. Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12 Start wiring VERSION 2 Loose the the 2 screws M4x12 to slide a bit the block of 2 pulleys (grey and yellow) to give space until you can pass both crimp 8 and 7 following the routing explain below. Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12 Start wiring 2.3 Left Shoulder Elevation Cable 8 and 7 \u00b6 In order to insert these cables, you need to turn the 2 pulleys and align the teeth as shown in the picture above. Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8. 2.4 Left Shoulder Elevation Cable 6 and 5 \u00b6 Those 2 cables are quite straight forward to mount, just follow the 2 following pictures. Once both crimps jumped over the 2 teeth holding the crimp in position you can start tightening the screws of the tensioners 6 and 5. 3 Left Elbow cabling \u00b6 Those 2 cables are not specifically difficult to route but unfortunately you need to operate cautiously to do NOT damage the electronical boards located beneath the upper arm. Warning EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2 OR You are helped by someone else to hold the Lower Arm (Forearm + Hand). Rules of routing Remove the lower part of the upper arm cover if NOT done yet Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it. Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below of the elbow) Replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner. Pass both heads of crimp before reattaching the Lateral Plate. Position the head of crimp in their socket start tightening the screws of both tensioner. 4 Right Shoulder \u00b6 Advice Take look at the beginning of this web page to have all the information related to the dimensions of cables and how to get or build them. The cabling sequence for the shoulder is the following: (1 - 2) - (3 - 4) - (8 - 7) - (6 - 5) Rules for a good start 1.Always remove the broken cable 2.Pay attention of putting the tensionner upside down so that the crimp dont exit 3a.Keep in Mind that the shoulder is a set of 4 pairs of antagonistic cables : (1-2), (3-4), (8-7), (6-5) 3b.And by so,to put back in place one pair of cable you need to make sure that the tensionner for both cables are loose Block of pulleys Tensionner fully opened Cavity of the tensionner hidden - crimp can't escape 4.1 Right Shoulder Rotation Cable 1 and 2 \u00b6 If you have to repair cable 1 and/or cable 2, it is convenient to first: Remove the chest cover (follow this procedure ) in order to have better access to the pulleys Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&2 and thus tension them Tension cables 1 and 2, attach the other cables and finally tension them In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them: Tensioner cover Tensioner cover Let's see the cabling of tendons 1 & 2 in detail: Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the right crimp cover in ABS (IIT CODE: 1896) Crimp cover above the small pulley Right crimp cover Danger You need to remove both tensioner of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4) Route cable N2 as per the diagram above. Now you can tense both screws for tension cable 1 and 2 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown: 4.2 Right Shoulder Elevation Cable 3 and 4 \u00b6 As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the right cover crimp (IITCODE : 1896) Route cable N4 as per the diagram above. Now you can tense both screws for tension cable 3 and 4 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning IMPORTANT NOTES for Cable from 8 to 5 \u00b6 From cable 8 to 5 To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You first need to replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective tensioner. You will need later to start wiring cable 7 and 8 in their future path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS. There are 2 designs for the shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE VERSION 1 Remove the beige pulley (remove the 4 screws M2x12) until you don't remount cable 5 Reach the 2 screws M4x12 on the green pulley and just untighten them until you can pass both crimp 8 and 7 following the routing explain below. Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12 Start wiring VERSION 2 Loose the the 2 screws M4x12 to slide a bit the block of 2 pulleys (grey and yellow) to give space until you can pass both crimp 8 and 7 following the routing explain below. Close the gap in order to prevent the cables 8 and 7 to exit - tighten the 2 screws M4x12 Start wiring 4.3 Right Shoulder Elevation Cable 8 and 7 \u00b6 Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8. 4.4 Right Shoulder Elevation Cable 6 and 5 \u00b6 Those 2 cables are quite straight forward to mount, just follow the 2 following pictures. Once both crimps jumped over the 2 teeth holding the in position you can start tightening the screws of the tensioners 6 and 5 5 Right Elbow cabling \u00b6 Those 2 cables are not specifically difficult to route but unfortunately you need to be cautious to proceed undamaging the electronical board located beneath the upper arm. Warning EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2 OR You are helped by someone else to hold the Lower Arm. Rules of routing Remove the lower part of the upper arm cover if NOT done yet Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it. Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below the elbow) Replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner. Pass both heads of crimp before reattaching the Lateral Plate. Position the head of crimp in their socket start tightening the screws of both tensioner.","title":"Shoulder and Elbow"},{"location":"icub_tendons/shoulder_elbow/#shoulder-elbow","text":"This chapter describes the wiring procedure for the cables of the shoulders and elbows, for every version of iCub made from version 1 to version 2.5, either in mounting phase or during a maintenance.","title":"Shoulder &amp; Elbow"},{"location":"icub_tendons/shoulder_elbow/#1-cable-construction","text":"1 : length 272 mm - Diam. 1.5/1.75 2 : length 256 mm - Diam. 1.5/1.75 3 : length 279 mm - Diam. 1.5/1.75 4 : length 250 mm - Diam. 1.5/1.75 5 : length 235 mm - Diam. 1.5/1.75 6 : length 136 mm - Diam. 1.5/1.75 7 : length 163 mm - Diam. 1.2/1.50 8 : length 121 mm - Diam. 1.2/1.50 9 : length 110 mm - Diam. 1.2/1.50 10: length 154 mm - Diam. 1.2/1.50 Cables from 1 to 6 are RC_IIT_019_G_00X - X from 1 to 6 - each made of U7191517 (IITCODE 2390) with different lengths (see the list above) and 2 crimps RC_TLR_003_P_101 (IITCODE 3492). The assembly resulting cable can be purchased from with IITCODE from 4758 to 4763. IITCODE Alias Description 4758 RC_IIT_019_G_001 SHOULDER ROTATION CABLE 1 4759 RC_IIT_019_G_002 SHOULDER ROTATION CABLE 2 4760 RC_IIT_019_G_003 SHOULDER ROTATION CABLE 3 4761 RC_IIT_019_G_004 SHOULDER ROTATION CABLE 4 4762 RC_IIT_019_G_005 SHOULDER ROTATION CABLE 5 4763 RC_IIT_019_G_006 SHOULDER ROTATION CABLE 6 2390 U7191517 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,5mm, outer dia 1,75mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712 - AISI 316 1895 IIT_003_P_006_00 LEFT PULLEY - CRIMP COVER 1896 IIT_003_P_007_00 RIGHT PULLEY - CRIMP COVER For Cable 7-8-9-10 measures see above (respectively IITCODE from 13736 to 13739). Alternatively you could build your own, made from U7191215 (IITCODE 2389) and 2 crimps (IITCODE 3877) BUT note that it is really important to shrink down to 4mm the crimp that will be inside the tensioner holder IITCODE Alias Description 13736 RC_IIT_019_G_029 U7191215/SE000094 - 163mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13737 RC_IIT_019_G_030 U7191215/SE000094 - 121mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13738 RC_IIT_019_G_031 U7191215/SE000094 - 110mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 13739 RC_IIT_019_G_032 U7191215/SE000094 - 154mm - cyl. nipple AM420716/NI000007 - ball nipple KU000012 - CARL STAHL GMBH 2389 U7191215 Stainless steel microcable, cable construction 7x19mm, nom. dia 1,2mm, outer dia 1,5mm, Polyamide coated, AISI 316 - CARL STAHL GMBH 3877 RC_TLR_005_P_101 Thimble for cable Dia 1.5mm (Inner dia 1.25mm) The cabling sequence for the shoulder is the following:","title":"1    Cable Construction"},{"location":"icub_tendons/shoulder_elbow/#2-left-shoulder","text":"Rules for a good start 1.Always remove the broken cable 2.Pay attention of putting the tensionner upside down so that the crimp does not exit 3a.Keep in Mind that the shoulder is a set of 4 pairs of antagonistic cables : (1-2), (3-4), (8-7), (6-5) 3b.And by so,to put back in place one pair of cable you need to make sure that the tensioners for both cables are loose Block of pulleys Tensioner fully opened Cavity of the tensioner hidden - crimp can't escape","title":"2    Left Shoulder"},{"location":"icub_tendons/shoulder_elbow/#21-left-shoulder-rotation-cable-1-and-2","text":"If you have to repair cable 1 and/or cable 2, it is convenient to first: Remove the chest cover (follow this procedure ) in order to have better access to the pulleys Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&2 and thus tension them Tension cables 1 and 2, attach the other cables and finally tension them In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them: Tensioner cover Tensioner cover CAD model Let's see the cabling of tendons 1 & 2 in detail: Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the left crimp cover in ABS (IIT CODE: 1895) Crimp cover above the small pulley Left crimp cover Danger You need to remove both tensioners of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4) Route cable N2 as per the diagram above. Now you can tense both screws for tension cable 1 and 2 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown:","title":"2.1 Left Shoulder Rotation Cable 1 and 2"},{"location":"icub_tendons/shoulder_elbow/#22-left-shoulder-elevation-cable-3-and-4","text":"As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the left cover crimp (IITCODE : 1895) Route cable N4 as per the diagram above. Now you can tense both screws for tension cable 3 and 4 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning","title":"2.2 Left Shoulder Elevation Cable 3 and 4"},{"location":"icub_tendons/shoulder_elbow/#important-notes-for-cable-from-8-to-5","text":"From cable 8 to 5 To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You first need to replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective tensioner. You will need later to start wiring cable 7 and 8 in their future path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS. There are 2 designs for the shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE","title":"IMPORTANT NOTES for Cable from 8 to 5"},{"location":"icub_tendons/shoulder_elbow/#23-left-shoulder-elevation-cable-8-and-7","text":"In order to insert these cables, you need to turn the 2 pulleys and align the teeth as shown in the picture above. Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8.","title":"2.3 Left Shoulder Elevation Cable 8 and 7"},{"location":"icub_tendons/shoulder_elbow/#24-left-shoulder-elevation-cable-6-and-5","text":"Those 2 cables are quite straight forward to mount, just follow the 2 following pictures. Once both crimps jumped over the 2 teeth holding the crimp in position you can start tightening the screws of the tensioners 6 and 5.","title":"2.4 Left Shoulder Elevation Cable 6 and 5"},{"location":"icub_tendons/shoulder_elbow/#3-left-elbow-cabling","text":"Those 2 cables are not specifically difficult to route but unfortunately you need to operate cautiously to do NOT damage the electronical boards located beneath the upper arm. Warning EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2 OR You are helped by someone else to hold the Lower Arm (Forearm + Hand). Rules of routing Remove the lower part of the upper arm cover if NOT done yet Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it. Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below of the elbow) Replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner. Pass both heads of crimp before reattaching the Lateral Plate. Position the head of crimp in their socket start tightening the screws of both tensioner.","title":"3    Left Elbow cabling"},{"location":"icub_tendons/shoulder_elbow/#4-right-shoulder","text":"Advice Take look at the beginning of this web page to have all the information related to the dimensions of cables and how to get or build them. The cabling sequence for the shoulder is the following:","title":"4    Right Shoulder"},{"location":"icub_tendons/shoulder_elbow/#41-right-shoulder-rotation-cable-1-and-2","text":"If you have to repair cable 1 and/or cable 2, it is convenient to first: Remove the chest cover (follow this procedure ) in order to have better access to the pulleys Loose also the cables 5-6-7-8 in order to easily turn the pulleys of cables 1&2 and thus tension them Tension cables 1 and 2, attach the other cables and finally tension them In order to access the tensioners of cables 1 and 2, you have to remove the small metal cover on both pulleys, as shown below, by unscrewing the M2x5 screw holding them: Tensioner cover Tensioner cover Let's see the cabling of tendons 1 & 2 in detail: Follow the diagram above to route the cable N1. Once the head of the crimp reach the small pulley. Add atop of it the right crimp cover in ABS (IIT CODE: 1896) Crimp cover above the small pulley Right crimp cover Danger You need to remove both tensioner of cable 2 and 3 in order to change one of them - meaning re-cabling pairs (1-2) and (3-4) Route cable N2 as per the diagram above. Now you can tense both screws for tension cable 1 and 2 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning Make sure you face the crimps as shown below before tensioning, in order to have access to them. The down pulley should be rotated like shown:","title":"4.1 Right Shoulder Rotation Cable 1 and 2"},{"location":"icub_tendons/shoulder_elbow/#42-right-shoulder-elevation-cable-3-and-4","text":"As per cable N1, just route cable N3 following the diagram above and prevent the crimp from escaping by adding the right cover crimp (IITCODE : 1896) Route cable N4 as per the diagram above. Now you can tense both screws for tension cable 3 and 4 Tip Do cycles of 5 turns for each screws in order to find an equal tensioning","title":"4.2 Right Shoulder Elevation Cable 3 and 4"},{"location":"icub_tendons/shoulder_elbow/#important-notes-for-cable-from-8-to-5_1","text":"From cable 8 to 5 To mount the cables 8 - 7 - 6 - 5, it is important to start with all of them already disconnected. You first need to replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 7 and 8 inside their respective tensioner. You will need later to start wiring cable 7 and 8 in their future path BUT to do so it is necessary to create SPACE FOR THE CRIMPS TO PASS. There are 2 designs for the shoulder so it is necessary to see the difference in between both of them to know how to untighten the good pieces and screws to create that SPACE","title":"IMPORTANT NOTES for Cable from 8 to 5"},{"location":"icub_tendons/shoulder_elbow/#43-right-shoulder-elevation-cable-8-and-7","text":"Once both crimps jumped over the 2 teeth holding the crimp in position - you can start tightening the screws of the tensioners 7 and 8.","title":"4.3 Right Shoulder Elevation Cable 8 and 7"},{"location":"icub_tendons/shoulder_elbow/#44-right-shoulder-elevation-cable-6-and-5","text":"Those 2 cables are quite straight forward to mount, just follow the 2 following pictures. Once both crimps jumped over the 2 teeth holding the in position you can start tightening the screws of the tensioners 6 and 5","title":"4.4 Right Shoulder Elevation Cable 6 and 5"},{"location":"icub_tendons/shoulder_elbow/#5-right-elbow-cabling","text":"Those 2 cables are not specifically difficult to route but unfortunately you need to be cautious to proceed undamaging the electronical board located beneath the upper arm. Warning EITHER you remove the Lower Arm by Following the instructions for Lower Arm V1 or Lower Arm V2 OR You are helped by someone else to hold the Lower Arm. Rules of routing Remove the lower part of the upper arm cover if NOT done yet Remove the lateral plate (the ONE with NO sensor) by unmounting the 2 screws holding it. Turn the main shaft by the help of a screw driver to apply enough torque to make it spin, until you reach the same situation as the pictures above (this is the view from below the elbow) Replace the broken cable(s) by starting to enter the head crimp (4mm size \u2013 smaller one or ball crimp) of the cable 9 and 10 inside their respective tensioner. Pass both heads of crimp before reattaching the Lateral Plate. Position the head of crimp in their socket start tightening the screws of both tensioner.","title":"5    Right Elbow cabling"},{"location":"icub_tendons/waist_legs/","text":"Waist, Stand Locker and Legs Cabling Manual \u00b6 1 Cable construction \u00b6 11 : length 709 mm - Diam. 1.5/1.75 12 : length 488 mm - Diam. 1.5/1.75 13 : length 630 mm - Diam. 1.5/1.75 14 : length 729 mm - Diam. 1.5/1.75 15 : length 450 mm - Diam. 1.5/1.75 16 : length 530 mm - Diam. 1.5/1.75 29 : length 23 mm - Diam. 1.5/1.75 Each cable from the list above is made of U7191517 (IITCODE 2390) with its belonging lengths and 2 crimps RC_TLR_003_P_101 (IITCODE 3492). IITCODE Alias Description 2390 U7191517 Stainless, cable construction 7x19mm, Polyamide coated - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712-AISI316 Alternatively, each cable can be seen as an assembly with its respective IITCODE and alias taken from CAD named RC_IIT_019_G_0XX - where XX is number from 11 to 16. IITCODE Alias Revision Description 4768 RC_IIT_019_G_011 1 WAIST BACK CABLE 11 4769 RC_IIT_019_G_012 1 WAIST FRONT CABLE 12 4770 RC_IIT_019_G_013 1 WAIST TOP CABLE 13 4771 RC_IIT_019_G_014 1 HIP FLEXION CABLE 14 4772 RC_IIT_019_G_015 1 ANKLE FLEXION CABLE 15 6377 RC_IIT_019_G_016 1 ANKLE FLEXION V2 CABLE 16 Cable 29 instead is aliased RC_IIT_090_G_005. At the moment this cable is home-made. 2 WAIST \u00b6 This chapter describes the steps required for the wiring of the cables 11 - 12 - 13 which allow the movement of the waist of the robot, both during construction and in maintenance/repair phase. VERY IMPORTANT NOTE If you have only the cable 12 broken please proceed directly to 2.3 Whatever the other cases of figure you run into, the only way to substitute/replace the broken cables is to follow the next steps. 2.1 CHEST, BACK and BACK PACK COVERS DISMOUNTING \u00b6 A - CHEST cover removal pictures step by step guide STEP 1: remove the 6 screws M2x5 (red arrows) (3 on each side of the skin patch of the chest cover) If you do not have skin on torso cover go on to the next step. STEP 2: flip over the skin in order to access the 2 screws beneath it. Remove the 2 screws M3x6 STEP 3: hold the chest cover and remove the 2 crews M3x8 at the level of the shoulder (green circles) pictures of the connector STEP 4: disconnect the the electrical cable connecting the robot to the skin board inside the cover If you do not have skin on torso cover go on to the next step. depending of your version you will need to move sideways the back cover or the backpack. version without backpack B1 - NO BACKPACK VERSION pictures step by step guide STEP 1: Unscrew the power cord on the back of iCub (black circle) STEP 2: Remove the 2 ring screws (green circles) STEP 3: remove the 4 screws M3x6 to be able to move sideways the back cover B2 - BACKPACK VERSION pictures step by step guide picture of robot with connections STEP 1: disconnect the overall cables attached to the back pack -> STEP 2: remove the top cover of the back pack some version have a screw in the yellow circle some just a magnet If you have the version with the screw - remove it and just flip the cover and you are done. STEP 3: Either you use the real battery pack -> untighten the 2 lateral screws or the dummy battery pack -> remove the 2 lateral screw M2.5x10. STEP 4: slide the 2 two pieces and remove them STEP 5: remove the buttons' cache by unmounting the screw M2x6 STEP 6: loose the 2 screws M2.5x8 holding the switches/ethernet board and push it inwards !!!NEED PICTURE TO SHOW THAT!!! STEP 7: On the previous mention board, try to pop out the stand-off above the 2 push buttons. they will be in the way when we will try to remove the backpack cover later on, we may break them if remove wrongly STEP 8: remove the 4 screws (red circles) holding the back pack in place. NECK : 2 screws M3x8 bottom back pack cover : 2 screws M3x12 Theoretically, you should already have removed the 2 ring screws but if you forget, please do it now!! STEP 9: remove the backpack watch out!!! STEP 10: disconnect the 3 connectors (2 on switch board - to drive the 2 fans atop the backpack- and 1 on power board to drive the fans on the right side of the backpack) STEP 11: cut the tie wrap -> the back cover can be left away until we will need to remount it STEP 12: remove the 4 screws holding the battery pack holder. 2 screws M3x8 (yellow circle) 2 screws M3x6 (red circle) !!! the battery pack holder can move almost freely from now on !!! YOU would probably asking me why did we need to remove all of this for? And the answer is that unfortunately the cover are preventing us for either tense the cables or access to some pieces. IF YOU HAVE ** ONLY **CABLE 13 BROKEN JUST GO DIRECTLY HERE C - remove the back pulley Watch once the pulley or one side of the cable 13 is removed the rotation of the torso is totally free, someone else help is more than appreciated to hold it firmly the robot in this process. what we have what we want pictures step by step guide STEP 1: loose the screws inside of the tensioners to get some slack on the cable. You should be able to make he cable jump around the STEP 2: You should be able to make the cable jump over the pulley STEP 3: Remove the central screw of this pulley RC_TLR_001_P_243 STEP 4: Use 2 fat flat screwdrivers to make the pulley popping up. -> photo needed D- create the require space pictures step by step guide In order to change the cable 11, it is necessary, when you still have the upper body attached to the robot to create some space in between those 2 pieces to be able to fit the cable that you need to replace. STEP 1: Remove the central piece which will hold the cable 11. 4 screws M2.5v5 STEP 2: Untighten just enough to have 2mm gap in between the head screw and the plate STEP 3: Untighten just enough to have 2mm gap in between the head screw and the plate STEP 4: You should be able to move slightly the upper body from the torso and create some space (2mm max - just the minimum required to pass the body of the cable in between the 2 pieces). 2.2 WAIST BACK - Cable 11 \u00b6 Warning routing cable 11 is quite simple in process of construction because you don't have yet the upper body mounted atop of the waist BUT become particularly tedious in phase of repair due to the presence of this latter. If you haven't removed the cover above the torso and the back (or backpack cover), please follow this link How to lock securedly the crimp: when you finalize your wiring it is important to realize that the tensioners are actually designed to prevent the crimp from escaping. As most of the cable inside the robot use the property of antagonism cabling it is important to have them both firmly tighten. Rule The crimp is always rotated upside down in order to prevent the crimp cable from popping out. The drawback of this positioning is that you always need to remove both tensioner and the screw to leave the crimp getting in the through and put back the tensioner above it to finalize the wiring. Procedure: Take the cable and draw with a marker the middle of it. Place the cable onto the slot of the pulley (Photo 1). Put the squared plate above the cable and secure it with 4 screws with hexagonal head size M2.5x5 (Photo 2) Warning For people having the upper body still hanging CLOSE the gap Turn the cable around the pulley taking care to cross it at the opposite side of the plate (Photo 3 - 4). Each side of the cable go up and pass into the little side pulley (Photo 5 - 6) Tip Use a 2mm hexagonal screwdriver to spin the motor shaft (Photo N.9) - on both sides of iCub hips - allowing you to rotate the internal pulley (where yield the tensioners) and have it in a proper angle. To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 7 - 8). Please use the rule for a proper locking of the crimp link To bring the joint a proper position to start correctly the routing of cable 12, please use the head screw inside the hips (Photo 9) simultaneously or one hip at a time by few degree every now and then. To arrive on the position (Photo 10) 2.3 WAIST FRONT \u2013 Cable 12 \u00b6 Procedure: Take the cable and draw with a marker the middle of it. Place the cable into the slot of the pulley (Photo 12) Put the rectangular plate above the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 13). Turn the cable around the pulley taking care to cross the cable above the pulley (Photo 14). To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 15 - 16). Please use the rule for a proper locking of the crimp link Finally, To put an end to the wiring of cable 11 and 12, just tense the 4 tensioners on which the crimps are located. Take care of tensing every one of them little by little in order to share the tension inside the tensioners in the same way. At this point, the cables of the wiring of the waist 11 and 12 is terminated and therefore it is possible to proceed with the positioning of the upper body above the latter. 2.4 WAIST TOP \u2013 Cable 13 \u00b6 Procedure: Take the cable and draw with a marker the middle of it. Place it in the slot on the piece RC_TLR_001_P_243 (Photo 18).Put the plate RC_USAL_001_P_219 on the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 19). Turn the cable around the RC_TLR_001_P_243 piece taking care to cross it around the pulley, the opposite side to the plate (Photo 20).Then pass the cable through the grooves of the pulleys RC_USAL_001_P_119 (Photo 21) To Finish the wiring, draw the cable along the pulley RC_USAL_001_P_124, and place the crimp in the appropriate tensioner RC_USAL_001_P_131 (Photo 22). Do the same for the other side of the cable and cross the cable before reaching the tensioner (Photo 23). 3 LEG CABLING \u00b6 This chapter describes the steps required both during construction and in maintenance phase to route of the cables 14 of the hip of the robot and cables 15 or 16 of the ankle present on robot with lower body version 1. 3.1 HIP FLEXION \u2013 Cable 14 \u00b6 Preparation: The cable has to be previously peeled off, at a distance of 435 mm from crimp, for a total of 50 mm. (see below) Tip the latter version of iCub have a cover, you may need to remove it before proceeding(see picture below). To do that remove the 2 screws of the cover. To unscrew them it is important to see them, use a hexagonal screw driver 2mm and turn the motor shaft from the other side of the motor(see picture below). Procedure: Take the cable and place the part stripped in the slot on the piece RC_IIT_001_P_314, then center and block it with the help of the plate RC_IIT_001_P_328 (Photo 24). The shortest part of the cable is the one going outside of the robot. Take the inner part of the cable (the right one so to speak \u2013 or the longest) and make one turn around the pulley RC_IIT_001_P_314 (Photo 25). If done correctly you should have the 2 crimps reunited down below the hip (photo N.26). At this point proceed route the cables by making an 8 shape, by crossing the cables and follow the wiring (photo N.28) (shortest part - yellow cable) and insert both crimp inside their respective tensioner - piece RC_USAL_001_P_131 (Photo 27). 4.1 ANKLE FLEXION - Cable 15 or Cable 16 \u00b6 Those 2 cables are only on some previous iCub design V1. Follow the following diagram in order to rewire correctly. ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16 Tip remove the blocker-cover to adjust the cable - when finally wired and the foot 90 degree respect to leg, put it back and tighten firmly the screws holding it in place. ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16 5 STAND \u2013 FAST ROBOT LOCKER \u00b6 This chapter describes the construction of fast locker to connect the robot to the stand seat 5.1 STAND - Cable 29 \u00b6 Procedure: Take the cable and put it so that the crimp goes into the slot of the piece RC_IIT_090_P_009 (Photo 29-30). Attach the hook, or the piece PKWS4SLIDER with two screws 3x5 TSV, to RC_IIT_090_P_009 piece (Photo 31).Place on the part of the cable RC_IIT_090_P_007 piece and then the adjustment mechanism for proper closure piece RC_IIT_090_P_007 (Photo 31-32) At this point, proceed by entering what has been previously mounted into the slot of the support RC_IIT_090_P_005 (Photo 33).Complete the installation by screwing the threaded part of the piece RC_IIT_090_P_006 with the piece RC_IIT_090_P_008 (Photo 34)","title":"Waist, Leg and Ankle"},{"location":"icub_tendons/waist_legs/#waist-stand-locker-and-legs-cabling-manual","text":"","title":"Waist, Stand Locker and Legs Cabling Manual"},{"location":"icub_tendons/waist_legs/#1-cable-construction","text":"11 : length 709 mm - Diam. 1.5/1.75 12 : length 488 mm - Diam. 1.5/1.75 13 : length 630 mm - Diam. 1.5/1.75 14 : length 729 mm - Diam. 1.5/1.75 15 : length 450 mm - Diam. 1.5/1.75 16 : length 530 mm - Diam. 1.5/1.75 29 : length 23 mm - Diam. 1.5/1.75 Each cable from the list above is made of U7191517 (IITCODE 2390) with its belonging lengths and 2 crimps RC_TLR_003_P_101 (IITCODE 3492). IITCODE Alias Description 2390 U7191517 Stainless, cable construction 7x19mm, Polyamide coated - CARL STAHL GMBH 3492 RC_TLR_003_P_101 Thimble for cable 1.75mm (Diam int/ext/L 1.6/4.6/6 mm) - material X5CrNiMo1712-AISI316 Alternatively, each cable can be seen as an assembly with its respective IITCODE and alias taken from CAD named RC_IIT_019_G_0XX - where XX is number from 11 to 16. IITCODE Alias Revision Description 4768 RC_IIT_019_G_011 1 WAIST BACK CABLE 11 4769 RC_IIT_019_G_012 1 WAIST FRONT CABLE 12 4770 RC_IIT_019_G_013 1 WAIST TOP CABLE 13 4771 RC_IIT_019_G_014 1 HIP FLEXION CABLE 14 4772 RC_IIT_019_G_015 1 ANKLE FLEXION CABLE 15 6377 RC_IIT_019_G_016 1 ANKLE FLEXION V2 CABLE 16 Cable 29 instead is aliased RC_IIT_090_G_005. At the moment this cable is home-made.","title":"1    Cable construction"},{"location":"icub_tendons/waist_legs/#2-waist","text":"This chapter describes the steps required for the wiring of the cables 11 - 12 - 13 which allow the movement of the waist of the robot, both during construction and in maintenance/repair phase. VERY IMPORTANT NOTE If you have only the cable 12 broken please proceed directly to 2.3 Whatever the other cases of figure you run into, the only way to substitute/replace the broken cables is to follow the next steps.","title":"2    WAIST"},{"location":"icub_tendons/waist_legs/#21-chest-back-and-back-pack-covers-dismounting","text":"A - CHEST cover removal pictures step by step guide STEP 1: remove the 6 screws M2x5 (red arrows) (3 on each side of the skin patch of the chest cover) If you do not have skin on torso cover go on to the next step. STEP 2: flip over the skin in order to access the 2 screws beneath it. Remove the 2 screws M3x6 STEP 3: hold the chest cover and remove the 2 crews M3x8 at the level of the shoulder (green circles) pictures of the connector STEP 4: disconnect the the electrical cable connecting the robot to the skin board inside the cover If you do not have skin on torso cover go on to the next step. depending of your version you will need to move sideways the back cover or the backpack. version without backpack B1 - NO BACKPACK VERSION pictures step by step guide STEP 1: Unscrew the power cord on the back of iCub (black circle) STEP 2: Remove the 2 ring screws (green circles) STEP 3: remove the 4 screws M3x6 to be able to move sideways the back cover B2 - BACKPACK VERSION pictures step by step guide picture of robot with connections STEP 1: disconnect the overall cables attached to the back pack -> STEP 2: remove the top cover of the back pack some version have a screw in the yellow circle some just a magnet If you have the version with the screw - remove it and just flip the cover and you are done. STEP 3: Either you use the real battery pack -> untighten the 2 lateral screws or the dummy battery pack -> remove the 2 lateral screw M2.5x10. STEP 4: slide the 2 two pieces and remove them STEP 5: remove the buttons' cache by unmounting the screw M2x6 STEP 6: loose the 2 screws M2.5x8 holding the switches/ethernet board and push it inwards !!!NEED PICTURE TO SHOW THAT!!! STEP 7: On the previous mention board, try to pop out the stand-off above the 2 push buttons. they will be in the way when we will try to remove the backpack cover later on, we may break them if remove wrongly STEP 8: remove the 4 screws (red circles) holding the back pack in place. NECK : 2 screws M3x8 bottom back pack cover : 2 screws M3x12 Theoretically, you should already have removed the 2 ring screws but if you forget, please do it now!! STEP 9: remove the backpack watch out!!! STEP 10: disconnect the 3 connectors (2 on switch board - to drive the 2 fans atop the backpack- and 1 on power board to drive the fans on the right side of the backpack) STEP 11: cut the tie wrap -> the back cover can be left away until we will need to remount it STEP 12: remove the 4 screws holding the battery pack holder. 2 screws M3x8 (yellow circle) 2 screws M3x6 (red circle) !!! the battery pack holder can move almost freely from now on !!! YOU would probably asking me why did we need to remove all of this for? And the answer is that unfortunately the cover are preventing us for either tense the cables or access to some pieces. IF YOU HAVE ** ONLY **CABLE 13 BROKEN JUST GO DIRECTLY HERE C - remove the back pulley Watch once the pulley or one side of the cable 13 is removed the rotation of the torso is totally free, someone else help is more than appreciated to hold it firmly the robot in this process. what we have what we want pictures step by step guide STEP 1: loose the screws inside of the tensioners to get some slack on the cable. You should be able to make he cable jump around the STEP 2: You should be able to make the cable jump over the pulley STEP 3: Remove the central screw of this pulley RC_TLR_001_P_243 STEP 4: Use 2 fat flat screwdrivers to make the pulley popping up. -> photo needed D- create the require space pictures step by step guide In order to change the cable 11, it is necessary, when you still have the upper body attached to the robot to create some space in between those 2 pieces to be able to fit the cable that you need to replace. STEP 1: Remove the central piece which will hold the cable 11. 4 screws M2.5v5 STEP 2: Untighten just enough to have 2mm gap in between the head screw and the plate STEP 3: Untighten just enough to have 2mm gap in between the head screw and the plate STEP 4: You should be able to move slightly the upper body from the torso and create some space (2mm max - just the minimum required to pass the body of the cable in between the 2 pieces).","title":"2.1 CHEST, BACK and BACK PACK COVERS DISMOUNTING"},{"location":"icub_tendons/waist_legs/#22-waist-back-cable-11","text":"Warning routing cable 11 is quite simple in process of construction because you don't have yet the upper body mounted atop of the waist BUT become particularly tedious in phase of repair due to the presence of this latter. If you haven't removed the cover above the torso and the back (or backpack cover), please follow this link How to lock securedly the crimp: when you finalize your wiring it is important to realize that the tensioners are actually designed to prevent the crimp from escaping. As most of the cable inside the robot use the property of antagonism cabling it is important to have them both firmly tighten. Rule The crimp is always rotated upside down in order to prevent the crimp cable from popping out. The drawback of this positioning is that you always need to remove both tensioner and the screw to leave the crimp getting in the through and put back the tensioner above it to finalize the wiring. Procedure: Take the cable and draw with a marker the middle of it. Place the cable onto the slot of the pulley (Photo 1). Put the squared plate above the cable and secure it with 4 screws with hexagonal head size M2.5x5 (Photo 2) Warning For people having the upper body still hanging CLOSE the gap Turn the cable around the pulley taking care to cross it at the opposite side of the plate (Photo 3 - 4). Each side of the cable go up and pass into the little side pulley (Photo 5 - 6) Tip Use a 2mm hexagonal screwdriver to spin the motor shaft (Photo N.9) - on both sides of iCub hips - allowing you to rotate the internal pulley (where yield the tensioners) and have it in a proper angle. To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 7 - 8). Please use the rule for a proper locking of the crimp link To bring the joint a proper position to start correctly the routing of cable 12, please use the head screw inside the hips (Photo 9) simultaneously or one hip at a time by few degree every now and then. To arrive on the position (Photo 10)","title":"2.2 WAIST BACK - Cable 11"},{"location":"icub_tendons/waist_legs/#23-waist-front-cable-12","text":"Procedure: Take the cable and draw with a marker the middle of it. Place the cable into the slot of the pulley (Photo 12) Put the rectangular plate above the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 13). Turn the cable around the pulley taking care to cross the cable above the pulley (Photo 14). To finish the wiring, position the head of the crimps inside their respective tensioners on both side of the inner part of the hips (Photo 15 - 16). Please use the rule for a proper locking of the crimp link Finally, To put an end to the wiring of cable 11 and 12, just tense the 4 tensioners on which the crimps are located. Take care of tensing every one of them little by little in order to share the tension inside the tensioners in the same way. At this point, the cables of the wiring of the waist 11 and 12 is terminated and therefore it is possible to proceed with the positioning of the upper body above the latter.","title":"2.3 WAIST FRONT \u2013 Cable 12"},{"location":"icub_tendons/waist_legs/#24-waist-top-cable-13","text":"Procedure: Take the cable and draw with a marker the middle of it. Place it in the slot on the piece RC_TLR_001_P_243 (Photo 18).Put the plate RC_USAL_001_P_219 on the cable and secure it with 4 screws M2.5x5 hexagonal head (Photo 19). Turn the cable around the RC_TLR_001_P_243 piece taking care to cross it around the pulley, the opposite side to the plate (Photo 20).Then pass the cable through the grooves of the pulleys RC_USAL_001_P_119 (Photo 21) To Finish the wiring, draw the cable along the pulley RC_USAL_001_P_124, and place the crimp in the appropriate tensioner RC_USAL_001_P_131 (Photo 22). Do the same for the other side of the cable and cross the cable before reaching the tensioner (Photo 23).","title":"2.4 WAIST TOP \u2013 Cable 13"},{"location":"icub_tendons/waist_legs/#3-leg-cabling","text":"This chapter describes the steps required both during construction and in maintenance phase to route of the cables 14 of the hip of the robot and cables 15 or 16 of the ankle present on robot with lower body version 1.","title":"3    LEG CABLING"},{"location":"icub_tendons/waist_legs/#31-hip-flexion-cable-14","text":"Preparation: The cable has to be previously peeled off, at a distance of 435 mm from crimp, for a total of 50 mm. (see below) Tip the latter version of iCub have a cover, you may need to remove it before proceeding(see picture below). To do that remove the 2 screws of the cover. To unscrew them it is important to see them, use a hexagonal screw driver 2mm and turn the motor shaft from the other side of the motor(see picture below). Procedure: Take the cable and place the part stripped in the slot on the piece RC_IIT_001_P_314, then center and block it with the help of the plate RC_IIT_001_P_328 (Photo 24). The shortest part of the cable is the one going outside of the robot. Take the inner part of the cable (the right one so to speak \u2013 or the longest) and make one turn around the pulley RC_IIT_001_P_314 (Photo 25). If done correctly you should have the 2 crimps reunited down below the hip (photo N.26). At this point proceed route the cables by making an 8 shape, by crossing the cables and follow the wiring (photo N.28) (shortest part - yellow cable) and insert both crimp inside their respective tensioner - piece RC_USAL_001_P_131 (Photo 27).","title":"3.1 HIP FLEXION \u2013 Cable 14"},{"location":"icub_tendons/waist_legs/#41-ankle-flexion-cable-15-or-cable-16","text":"Those 2 cables are only on some previous iCub design V1. Follow the following diagram in order to rewire correctly. ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16 Tip remove the blocker-cover to adjust the cable - when finally wired and the foot 90 degree respect to leg, put it back and tighten firmly the screws holding it in place. ANKLE FLEXION - cable 15 ANKLE FLEXION - cable 16","title":"4.1 ANKLE FLEXION - Cable 15 or Cable 16"},{"location":"icub_tendons/waist_legs/#5-stand-fast-robot-locker","text":"This chapter describes the construction of fast locker to connect the robot to the stand seat","title":"5    STAND \u2013 FAST ROBOT LOCKER"},{"location":"icub_tendons/waist_legs/#51-stand-cable-29","text":"Procedure: Take the cable and put it so that the crimp goes into the slot of the piece RC_IIT_090_P_009 (Photo 29-30). Attach the hook, or the piece PKWS4SLIDER with two screws 3x5 TSV, to RC_IIT_090_P_009 piece (Photo 31).Place on the part of the cable RC_IIT_090_P_007 piece and then the adjustment mechanism for proper closure piece RC_IIT_090_P_007 (Photo 31-32) At this point, proceed by entering what has been previously mounted into the slot of the support RC_IIT_090_P_005 (Photo 33).Complete the installation by screwing the threaded part of the piece RC_IIT_090_P_006 with the piece RC_IIT_090_P_008 (Photo 34)","title":"5.1 STAND  - Cable 29"},{"location":"icub_tendons/wrist_hand_cabling_V1/","text":"1 WRIST \u00b6 1.1 Wrist motor tendons \u00b6 1.1.1 Location & identification \u00b6 From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons. Note Note that the cabling of (1,2) & (5,6) and (3,4) & (7,8) is identical for symmetry. Note Note also that cable E1 & E2 are indeed a one cable with two different labels at its extremities, as we will see below. 1.1.2 Cabling \u00b6 First of all, in order to increase the cable tension it is useful to unscrew the 2 couples of screws located as shown in the pictures below, depending on which cables we are working on. After having completed all the described operations the cable tension can be increased by tightening the screws again. Left arm palm down Right arm palm down In the case you found out that one of the 8 cables of the wrist broken, here the sequence you need to follow to restore it. pictures step by step guide FIRST THING: which side of the wrist is broken? The internal (refer to cables 1 to 4) or the external one (refers to cables 5 to 8)? Can you see the differences? YOU may have guessed on your own but the answer is only that the external one is beneath the 3 proximal motors which makes it more complicated to reach and repair; apart from that it is exactly identical - so to proceed we will first see how to move the proximal motor, if you need to repair the external wrist motor, and follow up with the explanation of the tendon in a more generical way, as both motors are wired in the same way. If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually beneath them. STEP 2: remove or loose the 2 screws M2.5x8 holding the motor. From now on you can work freely. STEP 3: remove the broken part of the cable still inside the tensioner. !!!WARNING!!! once removed, either you put back the brand new cable inside or else just simply gather the part removed from the tensioner assembly and re-screw it back in until further notice in order to DO NOT LOSE PIECES!!! We can now start wiring!!! STEP 4: Let's begin with the motor pulley. Take a piece of uncoated cable (more or less 20 cm). Let its extremities be E1 and E2. Pass the cable trough the hole (H) in the pulley. Block the cable on the hole H with some cyanoacrylic glue. STEP 5: Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit pulleys: the cable should be tangential to the pulleys. Block the cable on the motor with some tape. This will allow you to maintain the cable positioned on the pulley. This wiring is identical for the cables E5-E6. STEP 6: Wrist pulley (E3-E7): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E3) and pass it trough the hole H3 on the pulley on the wrist side. Exit the pulley trough the hole H4. STEP 7: Wrap the cable as shown. The wiring of E7 is identical. STEP 8: Wrist pulley (E4-E8): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E4) and pass it trough the hole H1 on the pulley on the wrist side. Exit the pulley trough the hole H2. STEP 9: Wrap the cable as shown. The wiring of E8 is identical. We are finally getting to an end. Now that you know how to re-wire every single cable of the wrist you need to insert the tensioners. STEP 10: Pass E3 through the tensioner (LHS1) and tie a knot (KN3). This knot should be positioned taking into account the length of the tensioner. Remove E1 from the tape that blocks it on the motor and pass it trough the tensioner (RHS1). Tie in a knot (KN1) on E1. This knot should be positioned so as to have the tensioner in the middle of the admissible range of movements. Repeat for cables E2 &E4. STEP 11: Tight the tensioners by screwing in the extremities. 1.2 Wrist passive tendons \u00b6 1.2.1 Location & identification \u00b6 From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. The pink cable is cable 9 and the red one is cable 10 . Left wrist Right wrist 1.2.2 Cabling \u00b6 Here the sequence you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations. Which is the length of each cable? (Need measurements in lab) pictures step by step procedure !!!KEEP IN MIND - whenever you need to replace one of the 2 cables you FIRST need to release the tensioners . Just put one side of the crimp of each cable inside its tensioner and follow the path until its blue stopper. The X (cross) in the pictures represents a knot at the end of the cable. Cable 9 needs to be inserted inside the hole H1, while cable 10 in the hole H2. To block the cable ends you first need to unscrew the stopper (red circles), then insert the cable and screw it back. Tie in a knot in order to prevent any cable slippage. Once done: tighten the screws of both tensioners until you reach a strict tensing on the cables. 2 HAND \u00b6 2.1 Location \u00b6 The Hand wiring consists of the Thumb Oppose and the Fingers Abduction. In the picture below you can see where the cables and their respective motors are located (Left hand palm down). The minimum requirement to start recabling those 2 joints is: IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316 2.2 Thumb Oppose \u00b6 Here are the instructions for rewiring the Thumb Oppose Joint at the base of the Left Hand. pictures step by step guide STEP 1: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue). STEP 2: we will now focus on the wiring along the pulley. Cut ~ 40cm of cable. Move with a screwdriver the pulley in order to have the hole (red circle) flat horizontally. Insert the cable, equilibrate evenly the cable on both sides of the pulley. The cable exits are S0 and S2 (blue circles). STEP 3: Make 1 turn around the pulley CCW to go into S2 ball bearing side 2 turns around the pulley CW to reach S0 motor side. !!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4: Insert both side of the cable inside S2 and S0 until they sprout out from the palm side STEP 5: Insert the cables in the central pulley at the base of the thumb as shown. STEP 6: Use a 0.7mm hexagonal key (or screwdriver) to block the cables with the set screws. !!!!CONGRATULATIONS YOU ARE DONE!!! 2.3 Fingers Abduction \u00b6 Sheaths Length Label T1 38(mm) T0 T2 27(mm) T2 T3 38(mm) T3 T4 44(mm) T4 Here are the instructions for recabling the Fingers Abduction joint of the Left Hand. For the right one the procedure is mirrored. pictures step by step guide First we need to remove the hand dorsum: remove the screw M2x6 holding the dorsum cover and turn upside down the cover from the external part. Now it is necessary to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue). Once removed the palm, remove the overall 4 set screws. Use a 0.7mm hexagonal - screwdriver or key. Remove the overall remaining pieces of the broken cable before starting to restore it and inspect inside the cage. Remove every single board above the knuckles - the MAIS board (green) and the fingertips Hall sensors (white). In details: 1. Unplug every single chipset from the main board. !!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it is sometimes messy when remounting everything to find out which chipset is for which finger 2. Remove the power connector 4. With caution please remove the MAIS Board (by removing its tape) - on the bottom side of the board there is an inductor that sometimes got broken when remove carelessly. Let's get to business and Let's start wiring! Let's start from the back of the hand. Take a piece of cable (more or less 40cm) and pass it trough the central hole in the pulley (red circle). Optionally you can block the cable on the pulley putting a drop of cyanoacrylic glue into the hole. Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit holes: the cable should enter the holes tangentially. Thus, insert the cable extremities, into the two holes H1 and H2 (red circles). Pass one cable extremity trough the sheath T1 and the other one trough T2. Position the extremities of the sheaths on the sockets of the 2 exit holes in the motor support. Note: the sheath extremity should be inserted correctly in its socket. Focusing on the side of the cable inserted in the sheath T1, pass it through the tensioner and insert the sheath extremity in the tensioner socket. Then, continue the path inserting the cable through the sheath T3 until reaching a hole H3 in the hand frame (blue circle). Finally, insert the cable in the hole and position the extremity of T3 on the socket in correspondence of the hole. Twine the cable around the pulley at the base of the index finger. Pass the cable ending trough the hole H7 and exit from H8. Block the cable on the pulley with the screw S9. Tie a knot about 1 cm away from the pulley. Going back to the other cable extremity inserted in the sheath T2, position the extremity of T2 on the socket in correspondence of the hole H4. Finally, insert the cable in the hole. Twine the cable around the pulley at the base of the pinkie finger. Pass the cable ending trough the hole H9 and exit from H10. Block the cable on the pulley with the screw S10. Twine the cable around the little pulley and then around the pulley at the base of the ring finger. Pass the cable ending trough the hole H11 and exit from H12. Block the cable on the pulley with the screw S11. Pass the cable trough the hole H5 and the sheath T4. Position the extremity of the sheath on the socket of H5. Note: the tube extremity should be inserted correctly in its socket. Pass the cable trough the hole H6 and position the extremity of T4 on the socket of H6. At this point we close the loop, reaching again the first pulley located at the base of the index. Twine the cable around the pulley and pass the cable ending trough the hole H13 and exit from H14. Block the cable on the pulley with the screw S12. Tie a knot about 1cm away from the pulley. Now unscrew all the screws blocking the cable on the pulleys (S9, S10, S11 and S12). Note that this operation can be done only at a specific configuration of the fingers. At this configuration the screws are accessible thanks to suitable holes on the palm. In the picture you can see the final cable configuration on the first pulley at the base of the Index. The 2 parts of the cabled are represented by different colors. Now tension the cable: 1) Pull the blue cable from its ending. Check that the sheath is inside its sockets at H1 and H3 and block the cable extremity with the screw S9. 2) Pull the red cable from its ending. Check that the sheath is inside its sockets at H4, H5 and H6. Block the cable with the screw S10, S11 and S12. Final test: Use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. !!!!CONGRATULATIONS YOU ARE DONE!!! Use every unmounting step to put back in place every part of the hand. Tip Tensioning the cable is very important. Even when all the screws are not tight, it may result difficult to tension the cable in all of its parts. This is due to the sharp edges of the pulley which do not allow a uniform distribution of the tension. Tip For the Fingers Abduction always start from the index as previously shown. Tip Each pulley at the base at the fingers has a Pin . If passing trough the holes is complicated, you can remove the finger from the palm. After this operation the pulley can be made more accessible by rotating it around its Pin. In the picture below you can see the pin of the Index pulley.","title":"Wrist and Hand Cabling V1"},{"location":"icub_tendons/wrist_hand_cabling_V1/#1-wrist","text":"","title":"1 WRIST"},{"location":"icub_tendons/wrist_hand_cabling_V1/#11-wrist-motor-tendons","text":"","title":"1.1 Wrist motor tendons"},{"location":"icub_tendons/wrist_hand_cabling_V1/#111-location-identification","text":"From the pictures below you will be able to locate and identify the tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the tendons inside the Left Forearm building the active part of the wrist tendons. Note Note that the cabling of (1,2) & (5,6) and (3,4) & (7,8) is identical for symmetry. Note Note also that cable E1 & E2 are indeed a one cable with two different labels at its extremities, as we will see below.","title":"1.1.1 Location &amp; identification"},{"location":"icub_tendons/wrist_hand_cabling_V1/#112-cabling","text":"First of all, in order to increase the cable tension it is useful to unscrew the 2 couples of screws located as shown in the pictures below, depending on which cables we are working on. After having completed all the described operations the cable tension can be increased by tightening the screws again. Left arm palm down Right arm palm down In the case you found out that one of the 8 cables of the wrist broken, here the sequence you need to follow to restore it. pictures step by step guide FIRST THING: which side of the wrist is broken? The internal (refer to cables 1 to 4) or the external one (refers to cables 5 to 8)? Can you see the differences? YOU may have guessed on your own but the answer is only that the external one is beneath the 3 proximal motors which makes it more complicated to reach and repair; apart from that it is exactly identical - so to proceed we will first see how to move the proximal motor, if you need to repair the external wrist motor, and follow up with the explanation of the tendon in a more generical way, as both motors are wired in the same way. If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually beneath them. STEP 2: remove or loose the 2 screws M2.5x8 holding the motor. From now on you can work freely. STEP 3: remove the broken part of the cable still inside the tensioner. !!!WARNING!!! once removed, either you put back the brand new cable inside or else just simply gather the part removed from the tensioner assembly and re-screw it back in until further notice in order to DO NOT LOSE PIECES!!! We can now start wiring!!! STEP 4: Let's begin with the motor pulley. Take a piece of uncoated cable (more or less 20 cm). Let its extremities be E1 and E2. Pass the cable trough the hole (H) in the pulley. Block the cable on the hole H with some cyanoacrylic glue. STEP 5: Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit pulleys: the cable should be tangential to the pulleys. Block the cable on the motor with some tape. This will allow you to maintain the cable positioned on the pulley. This wiring is identical for the cables E5-E6. STEP 6: Wrist pulley (E3-E7): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E3) and pass it trough the hole H3 on the pulley on the wrist side. Exit the pulley trough the hole H4. STEP 7: Wrap the cable as shown. The wiring of E7 is identical. STEP 8: Wrist pulley (E4-E8): take a piece of cable. Tie in a knot at one extremity. Take the other extremity (E4) and pass it trough the hole H1 on the pulley on the wrist side. Exit the pulley trough the hole H2. STEP 9: Wrap the cable as shown. The wiring of E8 is identical. We are finally getting to an end. Now that you know how to re-wire every single cable of the wrist you need to insert the tensioners. STEP 10: Pass E3 through the tensioner (LHS1) and tie a knot (KN3). This knot should be positioned taking into account the length of the tensioner. Remove E1 from the tape that blocks it on the motor and pass it trough the tensioner (RHS1). Tie in a knot (KN1) on E1. This knot should be positioned so as to have the tensioner in the middle of the admissible range of movements. Repeat for cables E2 &E4. STEP 11: Tight the tensioners by screwing in the extremities.","title":"1.1.2 Cabling"},{"location":"icub_tendons/wrist_hand_cabling_V1/#12-wrist-passive-tendons","text":"","title":"1.2 Wrist passive tendons"},{"location":"icub_tendons/wrist_hand_cabling_V1/#121-location-identification","text":"From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. The pink cable is cable 9 and the red one is cable 10 . Left wrist Right wrist","title":"1.2.1 Location &amp; identification"},{"location":"icub_tendons/wrist_hand_cabling_V1/#122-cabling","text":"Here the sequence you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations. Which is the length of each cable? (Need measurements in lab) pictures step by step procedure !!!KEEP IN MIND - whenever you need to replace one of the 2 cables you FIRST need to release the tensioners . Just put one side of the crimp of each cable inside its tensioner and follow the path until its blue stopper. The X (cross) in the pictures represents a knot at the end of the cable. Cable 9 needs to be inserted inside the hole H1, while cable 10 in the hole H2. To block the cable ends you first need to unscrew the stopper (red circles), then insert the cable and screw it back. Tie in a knot in order to prevent any cable slippage. Once done: tighten the screws of both tensioners until you reach a strict tensing on the cables.","title":"1.2.2 Cabling"},{"location":"icub_tendons/wrist_hand_cabling_V1/#2-hand","text":"","title":"2 HAND"},{"location":"icub_tendons/wrist_hand_cabling_V1/#21-location","text":"The Hand wiring consists of the Thumb Oppose and the Fingers Abduction. In the picture below you can see where the cables and their respective motors are located (Left hand palm down). The minimum requirement to start recabling those 2 joints is: IITCODE Alias Description 1815 CG077063 Stainless steel microcable, cable construction 7x7mm, nom. dia 0,63mm, not coated, AISI 316","title":"2.1 Location"},{"location":"icub_tendons/wrist_hand_cabling_V1/#22-thumb-oppose","text":"Here are the instructions for rewiring the Thumb Oppose Joint at the base of the Left Hand. pictures step by step guide STEP 1: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue). STEP 2: we will now focus on the wiring along the pulley. Cut ~ 40cm of cable. Move with a screwdriver the pulley in order to have the hole (red circle) flat horizontally. Insert the cable, equilibrate evenly the cable on both sides of the pulley. The cable exits are S0 and S2 (blue circles). STEP 3: Make 1 turn around the pulley CCW to go into S2 ball bearing side 2 turns around the pulley CW to reach S0 motor side. !!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4: Insert both side of the cable inside S2 and S0 until they sprout out from the palm side STEP 5: Insert the cables in the central pulley at the base of the thumb as shown. STEP 6: Use a 0.7mm hexagonal key (or screwdriver) to block the cables with the set screws. !!!!CONGRATULATIONS YOU ARE DONE!!!","title":"2.2 Thumb Oppose"},{"location":"icub_tendons/wrist_hand_cabling_V1/#23-fingers-abduction","text":"Sheaths Length Label T1 38(mm) T0 T2 27(mm) T2 T3 38(mm) T3 T4 44(mm) T4 Here are the instructions for recabling the Fingers Abduction joint of the Left Hand. For the right one the procedure is mirrored. pictures step by step guide First we need to remove the hand dorsum: remove the screw M2x6 holding the dorsum cover and turn upside down the cover from the external part. Now it is necessary to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 at the base of the wrist M1.6x4 (blue). Once removed the palm, remove the overall 4 set screws. Use a 0.7mm hexagonal - screwdriver or key. Remove the overall remaining pieces of the broken cable before starting to restore it and inspect inside the cage. Remove every single board above the knuckles - the MAIS board (green) and the fingertips Hall sensors (white). In details: 1. Unplug every single chipset from the main board. !!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it is sometimes messy when remounting everything to find out which chipset is for which finger 2. Remove the power connector 4. With caution please remove the MAIS Board (by removing its tape) - on the bottom side of the board there is an inductor that sometimes got broken when remove carelessly. Let's get to business and Let's start wiring! Let's start from the back of the hand. Take a piece of cable (more or less 40cm) and pass it trough the central hole in the pulley (red circle). Optionally you can block the cable on the pulley putting a drop of cyanoacrylic glue into the hole. Twine the cable on the pulley. The number of turns around the pulley has to be decided on the basis of the entrance and exit holes: the cable should enter the holes tangentially. Thus, insert the cable extremities, into the two holes H1 and H2 (red circles). Pass one cable extremity trough the sheath T1 and the other one trough T2. Position the extremities of the sheaths on the sockets of the 2 exit holes in the motor support. Note: the sheath extremity should be inserted correctly in its socket. Focusing on the side of the cable inserted in the sheath T1, pass it through the tensioner and insert the sheath extremity in the tensioner socket. Then, continue the path inserting the cable through the sheath T3 until reaching a hole H3 in the hand frame (blue circle). Finally, insert the cable in the hole and position the extremity of T3 on the socket in correspondence of the hole. Twine the cable around the pulley at the base of the index finger. Pass the cable ending trough the hole H7 and exit from H8. Block the cable on the pulley with the screw S9. Tie a knot about 1 cm away from the pulley. Going back to the other cable extremity inserted in the sheath T2, position the extremity of T2 on the socket in correspondence of the hole H4. Finally, insert the cable in the hole. Twine the cable around the pulley at the base of the pinkie finger. Pass the cable ending trough the hole H9 and exit from H10. Block the cable on the pulley with the screw S10. Twine the cable around the little pulley and then around the pulley at the base of the ring finger. Pass the cable ending trough the hole H11 and exit from H12. Block the cable on the pulley with the screw S11. Pass the cable trough the hole H5 and the sheath T4. Position the extremity of the sheath on the socket of H5. Note: the tube extremity should be inserted correctly in its socket. Pass the cable trough the hole H6 and position the extremity of T4 on the socket of H6. At this point we close the loop, reaching again the first pulley located at the base of the index. Twine the cable around the pulley and pass the cable ending trough the hole H13 and exit from H14. Block the cable on the pulley with the screw S12. Tie a knot about 1cm away from the pulley. Now unscrew all the screws blocking the cable on the pulleys (S9, S10, S11 and S12). Note that this operation can be done only at a specific configuration of the fingers. At this configuration the screws are accessible thanks to suitable holes on the palm. In the picture you can see the final cable configuration on the first pulley at the base of the Index. The 2 parts of the cabled are represented by different colors. Now tension the cable: 1) Pull the blue cable from its ending. Check that the sheath is inside its sockets at H1 and H3 and block the cable extremity with the screw S9. 2) Pull the red cable from its ending. Check that the sheath is inside its sockets at H4, H5 and H6. Block the cable with the screw S10, S11 and S12. Final test: Use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. !!!!CONGRATULATIONS YOU ARE DONE!!! Use every unmounting step to put back in place every part of the hand. Tip Tensioning the cable is very important. Even when all the screws are not tight, it may result difficult to tension the cable in all of its parts. This is due to the sharp edges of the pulley which do not allow a uniform distribution of the tension. Tip For the Fingers Abduction always start from the index as previously shown. Tip Each pulley at the base at the fingers has a Pin . If passing trough the holes is complicated, you can remove the finger from the palm. After this operation the pulley can be made more accessible by rotating it around its Pin. In the picture below you can see the pin of the Index pulley.","title":"2.3 Fingers Abduction"},{"location":"icub_tendons/wrist_hand_cabling_V2/","text":"1 WRIST \u00b6 1.1 Wrist tendons' Lengths \u00b6 Here is the list of the 10 tendons needed to build the wrist movements. Tendon IITCODE Length Alias 1 6400 72 mm RC_IIT_019_G_019 2 6402 84 mm RC_IIT_019_G_020 3 6404 101 mm RC_IIT_019_G_021 4 6413 124 mm RC_IIT_019_G_022 5 6414 107 mm RC_IIT_019_G_023 6 6415 113 mm RC_IIT_019_G_024 7 6416 112 mm RC_IIT_019_G_025 8 6417 107mm RC_IIT_019_G_026 9 6418 51 mm RC_IIT_019_G_027 10 6419 43 mm RC_IIT_019_G_028 1.2 WRIST MOTOR TENDONS \u00b6 1.2.1 Location and Identification \u00b6 From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons. 1.2.2 Cabling \u00b6 In the case you found out 1 of the 8 first cables of the wrist broken, here is the sequence you need to follow to restore it. Pictures step by step guide FIRST THING FIRST: Which side of the wrist is broken? The internal (refers to cables 1 to 4) or the external one (refers to cables 5 to 8)? Can you see some visual differences? YOU may have guessed on your own, but the answer is only that the external motor is beneath the 3 proximal motors, which makes it more complicated to reach and repair. Apart from that, it is exactly identical - so to proceed we will first see how to move the proximal motors and follow up with the explanation of the tendon repair in a more generical way. If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: Remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually the motor beneath them. STEP 2: Remove the 2 screws M2.5x10 holding the motor. From now on, you can work freely. STEP 3: Remove the broken part of the cable still inside the tensioner. !!!WARNING!!! It is the utmost importance that you DO NOT MIX the 3 parts of the tensioner. ALWAYS KEEP THEM TOGETHER the main part and its 2 screwing side STEP 4: At the level of the wrist pulley, just remove the broken cable and replace it : EASY for cable 5 and 6 BUT LESS EASY for cable 1 and 2, because you need to remove the mechanical part preventing you from inserting and removing the head crimp. To do so, just remove the 2 screws M2x6 and slide the block to retrieve and replace the head crimp. Once done, put back on place the block and the 2 screws. We can now start wiring!!! STEP 5: Let's begin with the motor pulley, here is the way to wire them both (as they are perfectly identical). LEFT ARM The BLUE cables for the Left Forearm are: 4 and 7 The RED cables for the Left Forearm are: 3 and 8 RIGHT ARM The BLUE cables for the Right Forearm are: 3 and 8 The RED cables for the Right Forearm are: 4 and 7 STEP 6: Put a 2 tie wraps one for each side (or cable) in order to prevent them from getting untwisted. picture motor almost closed on support STEP 7: Put back in place the motor with its 2 screws M2.5x10. Leave 1mm in between the motor and the support. We will cover this aspect later. STEP 8: Let's wire the wrist pulleys (either for 1,2 or 5,6) Here is the detailed wiring for the left arm, please mirror it for the right arm. The wiring is quite simple. We are finally getting to an end. Now that you know how to rewire every single one of the wrist cables you need to insert the tensioners. Let's make the example of the 4 cables 1 to 4. STEP 9: Remove the tie wrap at the level of the motor wrist, for let's say cable 3. Open one side of the tensioner and start putting the ring, then the threaded piece of the tensioner, finish by screwing the ring onto the threaded piece. Do the exact same for the cable 1. STEP 10: Screw both pieces into the main tensioner part - Let's say just 2 threads on both sides, just to make it hold until we tense it. STEP 11: Repeat STEP 9 and STEP 10 with cables 2 and 4. STEP 12: Use 2 pliers to hold on the tips of the threaded pieces' tensioner and use with any tool fitting the hole inside the main part of the tensioner AND finally screw them. !!! TIP !!! depending on how you are facing the cables just screw CW or CCW for half a turn to understand if the 2 threaded pieces are going inside the main piece or if they get out - THEY NEED TO GET IN OBVIOUSLY. Repeat the above step on both tensioners until you get a quite nice tensing (but not super tense, this will be done right next). FINAL STEP: Tense the 2 screws that we left a bit opened on STEP 7. 1.3 WRIST - PASSIVE TENDONS \u00b6 1.3.1 Location and Identification \u00b6 From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. RIGHT WRIST LEFT WRIST 1.3.2 Cabling \u00b6 Here the sequence you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations. Pictures step by step procedure !!!KEEP IN MIND!!! whenever you need to replace one of the 2 cables you FIRST need to release the tensioners . CABLE 10: it is really straight forward - just put one side of the crimp of cable 10 inside the tensioner (blue circle) and put the other side inside the holding tooth. CABLE 9: it is just a bit more complicated because you need to first remove the screw to be able to lodge the crimp inside the tensioner and put back in place the tensioner in the throat and insert the screw. Once done: tighten the screws of both tensioners until you reach a strict tensing on the cables. 2 HAND \u00b6 2.1 Location \u00b6 The minimum requirement to start re-cabling those 2 joints is: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316 2.2 THUMB OPPOSE \u00b6 As usual, you will find here after the instructions for rewiring the Thump oppose joint at base of the Left Hand. Pictures step by step guide STEP 1: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 (circled in red) inside the palm and the 2 screws M2x4 (circled in blue) at the base of the wrist. STEP 2 : We will now focus on the wiring along the pulley. Cut 50 to 60cm of ITTCODE 1815. Move with a screwdriver the pulley in order to have the hole flat horizontally. Insert the cable, divide equally the cable from part to part of the pulley. STEP 3: DO 1 turn around the pulley CCW to go into S2 ball-bearing side 2 turns around the pulley CW to reach S0 motor side !!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4: Insert both sides of the cable inside S2 and S0 until they sprout out from the palm side. Remember that S0 is the shorter sheath and S2 is the longer one. BE CAREFUL! The right hand is not symmetrical. !!!!TIP: once both sides of the cables are out at the base of the palm, you may find convenient to verify the turns around the pulley ( you could use 2 pieces of foam hear plugs to prevent the cable from unwired itself) - Make sure the plate is screwed back into normal state. STEP 5: The cable from S0 goes directly into hole T1. The cable from S2 makes 1 FULL TURN around the pulley before going into T2. STEP 6: Use a 0.7mm hexagonal key (or screwdriver) to block the cables. !!!TIP: you may find useful to first block one side and afterwards use a plier to exert a strong pulling of the wire to tense this other side of the cable and block it. Repeat the the same process on the other side. FINAL CHECK: If the cabling is correct, when rotating the motor CW the finger should open (hand wide open) !!!!CONGRATULATIONS YOU ARE DONE!!! 2.3 FINGERS ABDUCTION \u00b6 PREFACE: This cable is THE most complicated to replace - rewire, mainly because you need to unmount a lot of parts BUT on the other hand it is also the most reliable - You may never need to replace it. Pictures step by step guide STEP 1: remove the screw M2x6 holding the dorsum cover and turn upside down the cover from the external part. The dorsum cover should get removed. STEP 2: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 screws M2x4 (circled in blue) at base of the wrist. STEP 3: remove the overall set screws. Use a 0.7mm hexagonal - screwdriver or key. STEP 4: remove the overall remaining pieces of the broken cable before starting to restore it. Inspect inside the cage - remove the 2 screws M1.6x5. Let's get to business and Let's start wiring! STEP 5: start wiring: 2 Full Turns (blue) CCW around the pulley and it gets out into tube T2 1 Full Turn (red) CW around the pulley and it gets out into tube T0. !!!TIP!!! It could be a good idea to block the wiring around the pulley thx to some foam earplug or some paper. Here is a picture of the overall path of the cable inside the 3 tubes constituting the path of the cable. STEP 6: remove every single board above the knuckle. STEP 6a: remove the screw and flip over the board with the little chipsets. STEP 6b: 1. Unplug every single chipset from the main board !!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it sometimes a bit messy when remounting everything to find out which chipset is for which finger. 2. remove the power connector 3. remove the 3 screws (2 M1x5 and 1 M1.6x6) 4. With caution please remove the MAIS Board - on the bottom side of the board there is an inductor that sometimes got broken when removed carelessly. STEP 6c: remove the 2 screws M1.6x6 Let's start with wiring the cable from T2 STEP 7: Here is the picture of the routing of the cable you need to realize. To do that, it is necessary to allow the pulleys to rotate around their pin. STEP 7a: PINKIE FINGER 1. you need to untighten ENTIRELY the axes screws on both sides of the finger (on the palm side it can be removed - pay attention that the ball bearing may fall as well, just remember to replace it when remounting - BUT REFRAIN TO REMOVE on top side - or else you will lose the center of the finger) 2. try to move the pulley along its pin until you succeed to insert the cable into it. 3. Put back on the axes screws and retighten them. STEP 7b: RING FINGER Same 3 first steps as the Pinkie finger. 4. Finally insert the cable into the hole leading to T4. STEP 8: Before starting to wire the base of the index finger it is really important to block the cable at the base of the pinkie finger - in this way we wont unintentionally untwine the wiring at the level of the motor pulley. 1. Insert the set-screw onto the pinkie finger and tighten it.. Let's start wiring the index base pulley STEP 9: As for pinkie and ring fingers: 1. untighten the 2 axes screws in order to be able to move the pink (color) pulley sideways around its PIN 2. Pass the cable coming from T4 (red) inside the pulley hole. STEP 10: 1. wire the cable from T0 (blue) 2. re-center the pinky pulley 3. put the axes screw back on. Let's start tensing the cable STEP 11: 1. take one plier - pinch at the exit of the cable from the pinky pulley and twist it to retrieve the excess of cable which will have for consequence to tense this part of the cable - the overall fingers should get closer to each other 2. put the set-screw A and B 3. Tense the other side of the cable (blue part) the same way 4. put the set-screw C STEP 12: Final test: 1. remove the 2 blocks (foam ear plug or paper jamming) from the pulley motor 2. use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. IF YES -YOU ARE DONE - USE every unmounting step to put back in place every part of the hand","title":"Wrist and Hand Cabling V2"},{"location":"icub_tendons/wrist_hand_cabling_V2/#1-wrist","text":"","title":"1    WRIST"},{"location":"icub_tendons/wrist_hand_cabling_V2/#11-wrist-tendons-lengths","text":"Here is the list of the 10 tendons needed to build the wrist movements. Tendon IITCODE Length Alias 1 6400 72 mm RC_IIT_019_G_019 2 6402 84 mm RC_IIT_019_G_020 3 6404 101 mm RC_IIT_019_G_021 4 6413 124 mm RC_IIT_019_G_022 5 6414 107 mm RC_IIT_019_G_023 6 6415 113 mm RC_IIT_019_G_024 7 6416 112 mm RC_IIT_019_G_025 8 6417 107mm RC_IIT_019_G_026 9 6418 51 mm RC_IIT_019_G_027 10 6419 43 mm RC_IIT_019_G_028","title":"1.1 Wrist tendons' Lengths"},{"location":"icub_tendons/wrist_hand_cabling_V2/#12-wrist-motor-tendons","text":"","title":"1.2 WRIST MOTOR TENDONS"},{"location":"icub_tendons/wrist_hand_cabling_V2/#121-location-and-identification","text":"From the pictures below you will be able to locate and identify the 8 tendons inside the Right Forearm building the active part of the wrist tendons. From the pictures below you will be able to locate and identify the 8 tendons inside the Left Forearm building the active part of the wrist tendons.","title":"1.2.1   Location and Identification"},{"location":"icub_tendons/wrist_hand_cabling_V2/#122-cabling","text":"In the case you found out 1 of the 8 first cables of the wrist broken, here is the sequence you need to follow to restore it. Pictures step by step guide FIRST THING FIRST: Which side of the wrist is broken? The internal (refers to cables 1 to 4) or the external one (refers to cables 5 to 8)? Can you see some visual differences? YOU may have guessed on your own, but the answer is only that the external motor is beneath the 3 proximal motors, which makes it more complicated to reach and repair. Apart from that, it is exactly identical - so to proceed we will first see how to move the proximal motors and follow up with the explanation of the tendon repair in a more generical way. If you need to repair tendons from 1 to 4 please just proceed to STEP 2 STEP 1: Remove the 6 screws M1.6x5 and flip over the 3 motors to be able to access visually the motor beneath them. STEP 2: Remove the 2 screws M2.5x10 holding the motor. From now on, you can work freely. STEP 3: Remove the broken part of the cable still inside the tensioner. !!!WARNING!!! It is the utmost importance that you DO NOT MIX the 3 parts of the tensioner. ALWAYS KEEP THEM TOGETHER the main part and its 2 screwing side STEP 4: At the level of the wrist pulley, just remove the broken cable and replace it : EASY for cable 5 and 6 BUT LESS EASY for cable 1 and 2, because you need to remove the mechanical part preventing you from inserting and removing the head crimp. To do so, just remove the 2 screws M2x6 and slide the block to retrieve and replace the head crimp. Once done, put back on place the block and the 2 screws. We can now start wiring!!! STEP 5: Let's begin with the motor pulley, here is the way to wire them both (as they are perfectly identical). LEFT ARM The BLUE cables for the Left Forearm are: 4 and 7 The RED cables for the Left Forearm are: 3 and 8 RIGHT ARM The BLUE cables for the Right Forearm are: 3 and 8 The RED cables for the Right Forearm are: 4 and 7 STEP 6: Put a 2 tie wraps one for each side (or cable) in order to prevent them from getting untwisted. picture motor almost closed on support STEP 7: Put back in place the motor with its 2 screws M2.5x10. Leave 1mm in between the motor and the support. We will cover this aspect later. STEP 8: Let's wire the wrist pulleys (either for 1,2 or 5,6) Here is the detailed wiring for the left arm, please mirror it for the right arm. The wiring is quite simple. We are finally getting to an end. Now that you know how to rewire every single one of the wrist cables you need to insert the tensioners. Let's make the example of the 4 cables 1 to 4. STEP 9: Remove the tie wrap at the level of the motor wrist, for let's say cable 3. Open one side of the tensioner and start putting the ring, then the threaded piece of the tensioner, finish by screwing the ring onto the threaded piece. Do the exact same for the cable 1. STEP 10: Screw both pieces into the main tensioner part - Let's say just 2 threads on both sides, just to make it hold until we tense it. STEP 11: Repeat STEP 9 and STEP 10 with cables 2 and 4. STEP 12: Use 2 pliers to hold on the tips of the threaded pieces' tensioner and use with any tool fitting the hole inside the main part of the tensioner AND finally screw them. !!! TIP !!! depending on how you are facing the cables just screw CW or CCW for half a turn to understand if the 2 threaded pieces are going inside the main piece or if they get out - THEY NEED TO GET IN OBVIOUSLY. Repeat the above step on both tensioners until you get a quite nice tensing (but not super tense, this will be done right next). FINAL STEP: Tense the 2 screws that we left a bit opened on STEP 7.","title":"1.2.2   Cabling"},{"location":"icub_tendons/wrist_hand_cabling_V2/#13-wrist-passive-tendons","text":"","title":"1.3 WRIST - PASSIVE TENDONS"},{"location":"icub_tendons/wrist_hand_cabling_V2/#131-location-and-identification","text":"From the pictures below you will be able to locate and identify the 2 tendons inside both the Right Wrist and Left Wrist building the passive part of the wrist movements. RIGHT WRIST LEFT WRIST","title":"1.3.1   Location and Identification"},{"location":"icub_tendons/wrist_hand_cabling_V2/#132-cabling","text":"Here the sequence you need to follow to restore the 2 little cables from the base of the wrist - we will write down the procedure using the left arm as base pictures but use the previous pictures above to mirror the explanations. Pictures step by step procedure !!!KEEP IN MIND!!! whenever you need to replace one of the 2 cables you FIRST need to release the tensioners . CABLE 10: it is really straight forward - just put one side of the crimp of cable 10 inside the tensioner (blue circle) and put the other side inside the holding tooth. CABLE 9: it is just a bit more complicated because you need to first remove the screw to be able to lodge the crimp inside the tensioner and put back in place the tensioner in the throat and insert the screw. Once done: tighten the screws of both tensioners until you reach a strict tensing on the cables.","title":"1.3.2   Cabling"},{"location":"icub_tendons/wrist_hand_cabling_V2/#2-hand","text":"","title":"2    HAND"},{"location":"icub_tendons/wrist_hand_cabling_V2/#21-location","text":"The minimum requirement to start re-cabling those 2 joints is: IITCODE Alias Description 1815 CG077063 Stainless steel micro-cable, cable construction 7x7mm, nom. diameter 0,63mm, not coated, AISI 316","title":"2.1 Location"},{"location":"icub_tendons/wrist_hand_cabling_V2/#22-thumb-oppose","text":"As usual, you will find here after the instructions for rewiring the Thump oppose joint at base of the Left Hand. Pictures step by step guide STEP 1: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 (circled in red) inside the palm and the 2 screws M2x4 (circled in blue) at the base of the wrist. STEP 2 : We will now focus on the wiring along the pulley. Cut 50 to 60cm of ITTCODE 1815. Move with a screwdriver the pulley in order to have the hole flat horizontally. Insert the cable, divide equally the cable from part to part of the pulley. STEP 3: DO 1 turn around the pulley CCW to go into S2 ball-bearing side 2 turns around the pulley CW to reach S0 motor side !!!TIP: You may find convenient to remove the plate to round the cable around the pulley more easily. STEP 4: Insert both sides of the cable inside S2 and S0 until they sprout out from the palm side. Remember that S0 is the shorter sheath and S2 is the longer one. BE CAREFUL! The right hand is not symmetrical. !!!!TIP: once both sides of the cables are out at the base of the palm, you may find convenient to verify the turns around the pulley ( you could use 2 pieces of foam hear plugs to prevent the cable from unwired itself) - Make sure the plate is screwed back into normal state. STEP 5: The cable from S0 goes directly into hole T1. The cable from S2 makes 1 FULL TURN around the pulley before going into T2. STEP 6: Use a 0.7mm hexagonal key (or screwdriver) to block the cables. !!!TIP: you may find useful to first block one side and afterwards use a plier to exert a strong pulling of the wire to tense this other side of the cable and block it. Repeat the the same process on the other side. FINAL CHECK: If the cabling is correct, when rotating the motor CW the finger should open (hand wide open) !!!!CONGRATULATIONS YOU ARE DONE!!!","title":"2.2  THUMB OPPOSE"},{"location":"icub_tendons/wrist_hand_cabling_V2/#23-fingers-abduction","text":"PREFACE: This cable is THE most complicated to replace - rewire, mainly because you need to unmount a lot of parts BUT on the other hand it is also the most reliable - You may never need to replace it. Pictures step by step guide STEP 1: remove the screw M2x6 holding the dorsum cover and turn upside down the cover from the external part. The dorsum cover should get removed. STEP 2: The only way to start correctly this wiring is to remove the palm. Please remove the 3 screws M2x6 inside the palm (circled in red) and the 2 screws M2x4 (circled in blue) at base of the wrist. STEP 3: remove the overall set screws. Use a 0.7mm hexagonal - screwdriver or key. STEP 4: remove the overall remaining pieces of the broken cable before starting to restore it. Inspect inside the cage - remove the 2 screws M1.6x5. Let's get to business and Let's start wiring! STEP 5: start wiring: 2 Full Turns (blue) CCW around the pulley and it gets out into tube T2 1 Full Turn (red) CW around the pulley and it gets out into tube T0. !!!TIP!!! It could be a good idea to block the wiring around the pulley thx to some foam earplug or some paper. Here is a picture of the overall path of the cable inside the 3 tubes constituting the path of the cable. STEP 6: remove every single board above the knuckle. STEP 6a: remove the screw and flip over the board with the little chipsets. STEP 6b: 1. Unplug every single chipset from the main board !!!TIP: Please write down with a marker the initial of the finger chipset you unplug - it sometimes a bit messy when remounting everything to find out which chipset is for which finger. 2. remove the power connector 3. remove the 3 screws (2 M1x5 and 1 M1.6x6) 4. With caution please remove the MAIS Board - on the bottom side of the board there is an inductor that sometimes got broken when removed carelessly. STEP 6c: remove the 2 screws M1.6x6 Let's start with wiring the cable from T2 STEP 7: Here is the picture of the routing of the cable you need to realize. To do that, it is necessary to allow the pulleys to rotate around their pin. STEP 7a: PINKIE FINGER 1. you need to untighten ENTIRELY the axes screws on both sides of the finger (on the palm side it can be removed - pay attention that the ball bearing may fall as well, just remember to replace it when remounting - BUT REFRAIN TO REMOVE on top side - or else you will lose the center of the finger) 2. try to move the pulley along its pin until you succeed to insert the cable into it. 3. Put back on the axes screws and retighten them. STEP 7b: RING FINGER Same 3 first steps as the Pinkie finger. 4. Finally insert the cable into the hole leading to T4. STEP 8: Before starting to wire the base of the index finger it is really important to block the cable at the base of the pinkie finger - in this way we wont unintentionally untwine the wiring at the level of the motor pulley. 1. Insert the set-screw onto the pinkie finger and tighten it.. Let's start wiring the index base pulley STEP 9: As for pinkie and ring fingers: 1. untighten the 2 axes screws in order to be able to move the pink (color) pulley sideways around its PIN 2. Pass the cable coming from T4 (red) inside the pulley hole. STEP 10: 1. wire the cable from T0 (blue) 2. re-center the pinky pulley 3. put the axes screw back on. Let's start tensing the cable STEP 11: 1. take one plier - pinch at the exit of the cable from the pinky pulley and twist it to retrieve the excess of cable which will have for consequence to tense this part of the cable - the overall fingers should get closer to each other 2. put the set-screw A and B 3. Tense the other side of the cable (blue part) the same way 4. put the set-screw C STEP 12: Final test: 1. remove the 2 blocks (foam ear plug or paper jamming) from the pulley motor 2. use the head screw from the pulley motor to check if the fingers get opened-closed whenever you turn it CW or CCW. IF YES -YOU ARE DONE - USE every unmounting step to put back in place every part of the hand","title":"2.3 FINGERS ABDUCTION"},{"location":"icub_versions/","text":"Currently known iCub versions \u00b6 iCub version Features Notes v1.0 This version was distributed during the RobotCub open call. It has the following features: 1. Only the upper arms are covered. 2. No force sensors available. 3. No touch sensors available. v1.1 Main features are: 1. Sensorized hand joints (MAIS boards are mounted on the back of the hand). 2. Six axes force sensors at each limb. This allows impedance/compliance control as described here. 3. Fully covered (upper arm, forearm, torso, hip, legs). v1.1.1 This is an intermediate version. The only difference with the previous is that the main control board has changed from eCAN (or CFW1) to CFW2 v1.2 This version has tactile sensors. Main features are: 1. Sensorized palm. 2. Sensorized fingertips v1.3 This version has tactile sensors added on the forearms. v1.4 This version has tactile sensors added on the upper arm and chest. v2.0 This version has: 1. Incremental encoders (optical) directly mounted on the motors (fast side of the reduction gear). 2. Completely redesigned fore-arm and hands assemblies. Completely redesigned head assembly for higher performances (stronger neck motors, zero-backlash eye movement) 3. Mounts complete set of sensitive skin. v2.3 This version is a v2.0 + talking-Head (it's now obsolete, head with motors for lips and jaw) v2.5 This version has: 1. Hands v2.0 2. Stronger legs (with the possibility to mount series elastic elements on the knee and on the ankle) v2.5.5 This version is a v2.5 + a backpack for batteries v2.6 v2.5.5 with new face expression (RFE master board) v2.7 v2.6 with high-performance IMU on the waist Special Version Features Notes v1.x.1 where x > 1 This is the relative 1.x (x>1) version with a V2 head assembly mounted onto a V1 body","title":"Versions Table"},{"location":"icub_versions/#currently-known-icub-versions","text":"iCub version Features Notes v1.0 This version was distributed during the RobotCub open call. It has the following features: 1. Only the upper arms are covered. 2. No force sensors available. 3. No touch sensors available. v1.1 Main features are: 1. Sensorized hand joints (MAIS boards are mounted on the back of the hand). 2. Six axes force sensors at each limb. This allows impedance/compliance control as described here. 3. Fully covered (upper arm, forearm, torso, hip, legs). v1.1.1 This is an intermediate version. The only difference with the previous is that the main control board has changed from eCAN (or CFW1) to CFW2 v1.2 This version has tactile sensors. Main features are: 1. Sensorized palm. 2. Sensorized fingertips v1.3 This version has tactile sensors added on the forearms. v1.4 This version has tactile sensors added on the upper arm and chest. v2.0 This version has: 1. Incremental encoders (optical) directly mounted on the motors (fast side of the reduction gear). 2. Completely redesigned fore-arm and hands assemblies. Completely redesigned head assembly for higher performances (stronger neck motors, zero-backlash eye movement) 3. Mounts complete set of sensitive skin. v2.3 This version is a v2.0 + talking-Head (it's now obsolete, head with motors for lips and jaw) v2.5 This version has: 1. Hands v2.0 2. Stronger legs (with the possibility to mount series elastic elements on the knee and on the ankle) v2.5.5 This version is a v2.5 + a backpack for batteries v2.6 v2.5.5 with new face expression (RFE master board) v2.7 v2.6 with high-performance IMU on the waist Special Version Features Notes v1.x.1 where x > 1 This is the relative 1.x (x>1) version with a V2 head assembly mounted onto a V1 body","title":"Currently known iCub versions"},{"location":"icub_wiring/","text":"Scope of document \u00b6 The purpose of this document is to give detailed documentation about the wiring of the robot, board and motor placement and the board connection. The iCub wiring for each robot version \u00b6 Please click on any of the link below to go to the right page. iCub 1.x iCub 2.x iCub 3.x","title":"Summary"},{"location":"icub_wiring/#scope-of-document","text":"The purpose of this document is to give detailed documentation about the wiring of the robot, board and motor placement and the board connection.","title":"Scope of document"},{"location":"icub_wiring/#the-icub-wiring-for-each-robot-version","text":"Please click on any of the link below to go to the right page. iCub 1.x iCub 2.x iCub 3.x","title":"The iCub wiring for each robot version"},{"location":"icub_wiring/icub1_x/","text":"iCub 1.x Wiring \u00b6 Logic and Harness iCub 1 \u00b6 note The wiring schematics of iCub 1.x has been designed by using Orcad. You can find all the docs at the link below: iCub1.x Wiring Logic and Harness iCub 1.7 \u00b6 iCub 1.7.1 has iCubHead 2.0 and forearms and hands 2.0. Therefore the logic and harness are different from iCub1 iCub1.7.1 Logic iCub1.7.1 Harness iCub1.7.1 Motor&board placement","title":"iCub 1.x"},{"location":"icub_wiring/icub1_x/#icub-1x-wiring","text":"","title":"iCub 1.x Wiring"},{"location":"icub_wiring/icub1_x/#logic-and-harness-icub-1","text":"note The wiring schematics of iCub 1.x has been designed by using Orcad. You can find all the docs at the link below: iCub1.x Wiring","title":"Logic and Harness iCub 1"},{"location":"icub_wiring/icub1_x/#logic-and-harness-icub-17","text":"iCub 1.7.1 has iCubHead 2.0 and forearms and hands 2.0. Therefore the logic and harness are different from iCub1 iCub1.7.1 Logic iCub1.7.1 Harness iCub1.7.1 Motor&board placement","title":"Logic and Harness iCub 1.7"},{"location":"icub_wiring/icub2_x/","text":"iCub 2.x Wiring \u00b6 Logic schematics are logical and electrical connections between boards, sensors and motors. Harness schematics there are the drawings of all the cables and bundles. In the mage below you will find the position of all the harness that you find in the pdf. In order to find a cable in the Harness file of your robot, you should start looking at this picture to find out where you have to look at. The Motor&Board_Placement is the document where you can find the wireframe of the robot with all the electronic boards, motors and sensors labels. ETHERNET backbone \u00b6 The system architecture of iCub2.x with ETHERNET backbone is depicted in the following image: Logic and Harness iCub 2.5-E3.3 (ETH) - Full robot with COM-EXP and MC4-PLUS \u00b6 iCub 2.5 Motor Board Placement iCub2.5-E3.3.2 Logic iCub2.5_E3.3.2 Harness Logic and Harness iCub 2.7-E3.6 - Full robot with high performance IMU on the waist and new face expressions \u00b6 iCub 2.7 Motor Board Placement iCub2.7_E3.6.1 Logic iCub2.7_E3.6.0 Harness CAN backbone \u00b6 Logic and Harness iCub 2.x-E2.0.0 \u00b6 iCub 2 Logic iCub 2 Harness Motor and Board Placement Logic and Harness iCub 2.3_E2.3.0 - Full robot with Talking Head \u00b6 iCub 2.3 Talking Head Logic iCub 2.3 Talking Head Harness iCub 2.3 Talking Head Motor and Board Placement Logic and Harness iCub 2.5_E2.5.1 - Full robot with Seaslegs \u00b6 iCub 2.5 Seaslegs Logic iCub 2.5 Seaslegs Harness iCub 2.5 Seaslegs Motor and Board Placement","title":"iCub 2.x"},{"location":"icub_wiring/icub2_x/#icub-2x-wiring","text":"Logic schematics are logical and electrical connections between boards, sensors and motors. Harness schematics there are the drawings of all the cables and bundles. In the mage below you will find the position of all the harness that you find in the pdf. In order to find a cable in the Harness file of your robot, you should start looking at this picture to find out where you have to look at. The Motor&Board_Placement is the document where you can find the wireframe of the robot with all the electronic boards, motors and sensors labels.","title":"iCub 2.x Wiring"},{"location":"icub_wiring/icub2_x/#ethernet-backbone","text":"The system architecture of iCub2.x with ETHERNET backbone is depicted in the following image:","title":"ETHERNET backbone"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-25-e33-eth-full-robot-with-com-exp-and-mc4-plus","text":"iCub 2.5 Motor Board Placement iCub2.5-E3.3.2 Logic iCub2.5_E3.3.2 Harness","title":"Logic and Harness iCub 2.5-E3.3 (ETH) - Full robot with COM-EXP and MC4-PLUS"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-27-e36-full-robot-with-high-performance-imu-on-the-waist-and-new-face-expressions","text":"iCub 2.7 Motor Board Placement iCub2.7_E3.6.1 Logic iCub2.7_E3.6.0 Harness","title":"Logic and Harness iCub 2.7-E3.6 - Full robot with high performance IMU on the waist and new face expressions"},{"location":"icub_wiring/icub2_x/#can-backbone","text":"","title":"CAN backbone"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-2x-e200","text":"iCub 2 Logic iCub 2 Harness Motor and Board Placement","title":"Logic and Harness iCub 2.x-E2.0.0"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-23_e230-full-robot-with-talking-head","text":"iCub 2.3 Talking Head Logic iCub 2.3 Talking Head Harness iCub 2.3 Talking Head Motor and Board Placement","title":"Logic and Harness iCub 2.3_E2.3.0 - Full robot with Talking Head"},{"location":"icub_wiring/icub2_x/#logic-and-harness-icub-25_e251-full-robot-with-seaslegs","text":"iCub 2.5 Seaslegs Logic iCub 2.5 Seaslegs Harness iCub 2.5 Seaslegs Motor and Board Placement","title":"Logic and Harness iCub 2.5_E2.5.1 - Full robot with Seaslegs"},{"location":"icub_wiring/icub3_x/","text":"iCub 3.x Wiring \u00b6 The system architecture of iCub3 is depicted in the following image: note the documentation is still incomplete Logic and Harness iCub 3.0 E0.0 Full Robot \u00b6 iCub 3_Upperbody Logic_0.0.0 iCub 3_Upperbody Harness_0.0.0 iCub 3_LowerBody Logic 0.0.0 iCub 3_LowerBody Harness 0.0.0","title":"iCub 3.x"},{"location":"icub_wiring/icub3_x/#icub-3x-wiring","text":"The system architecture of iCub3 is depicted in the following image: note the documentation is still incomplete","title":"iCub 3.x Wiring"},{"location":"icub_wiring/icub3_x/#logic-and-harness-icub-30-e00-full-robot","text":"iCub 3_Upperbody Logic_0.0.0 iCub 3_Upperbody Harness_0.0.0 iCub 3_LowerBody Logic 0.0.0 iCub 3_LowerBody Harness 0.0.0","title":"Logic and Harness iCub 3.0 E0.0 Full Robot"},{"location":"sw_versioning_table/","text":"Software Distros \u00b6 \ud83d\ude80 Software Distros Workflow \u00b6 \ud83d\udcc5 SW Distros are delivered on a time-based workflow . 4\ufe0f\u20e3 SW Distros are released along with binaries at the following quarters: Feb, May, Aug, Nov . \ud83c\udd93 The feature-freeze lasts one month . \ud83d\udcdb Naming convention adheres therefore to YYYY.MM : e.g. 2020.02, 2020.05... \ud83d\udcdd Repositories stay on their usual release convention in order to enable proper semantic versioning . To link repos tags to SW Distro and run CI, we rely on the infrastructure provided in robotology/robotology-superbuild . \ud83d\udce6 Exceptionally, we may deliver feature-based releases (only tags/branches, no binaries) as YYYY.MM.feat-nn . \ud83d\udc1e Patches are coded as YYYY.MM.patch-nn and, like the feature-based releases, are shipped only in terms of tags/branches. \ud83d\udce2 We make announcements of the distros and their content on a dedicated channel of Robotology Community . Software Versioning Table \u00b6 The table hereinafter reports on the versions of the packages (specified in terms of Git tags/branches/commits) composing our software ecosystem that are bundled as distros. Once the versions are known, one can download the distro's source code by using Git. For example, to download the SW Distro 2020.08 do: $ git clone https://github.com/robotology/ycm.git -b v0.11.3 $ git clone https://github.com/robotology/yarp.git -b v3.4.0 $ git clone https://github.com/robotology/icub-main.git -b v1.17.0 ... Table \u00b6 This table has been generated automatically by processing data available in robotology/robotology-superbuild@master/releases . Click on the distros below to explore their package versions: \ud83d\udce6 Distro 2020.11 \ud83d\udce6 Distro 2020.08 \ud83d\udce6 Distro 2020.08.patch-01 \ud83d\udce6 Distro 2020.08.feat-01 \ud83d\udce6 Distro 2020.05 \ud83d\udce6 Distro 2020.05.feat-01 \ud83d\udce6 Distro 2020.02","title":"Software Versioning Table"},{"location":"sw_versioning_table/#software-distros","text":"","title":"Software Distros"},{"location":"sw_versioning_table/#software-distros-workflow","text":"\ud83d\udcc5 SW Distros are delivered on a time-based workflow . 4\ufe0f\u20e3 SW Distros are released along with binaries at the following quarters: Feb, May, Aug, Nov . \ud83c\udd93 The feature-freeze lasts one month . \ud83d\udcdb Naming convention adheres therefore to YYYY.MM : e.g. 2020.02, 2020.05... \ud83d\udcdd Repositories stay on their usual release convention in order to enable proper semantic versioning . To link repos tags to SW Distro and run CI, we rely on the infrastructure provided in robotology/robotology-superbuild . \ud83d\udce6 Exceptionally, we may deliver feature-based releases (only tags/branches, no binaries) as YYYY.MM.feat-nn . \ud83d\udc1e Patches are coded as YYYY.MM.patch-nn and, like the feature-based releases, are shipped only in terms of tags/branches. \ud83d\udce2 We make announcements of the distros and their content on a dedicated channel of Robotology Community .","title":"\ud83d\ude80 Software Distros Workflow"},{"location":"sw_versioning_table/#software-versioning-table","text":"The table hereinafter reports on the versions of the packages (specified in terms of Git tags/branches/commits) composing our software ecosystem that are bundled as distros. Once the versions are known, one can download the distro's source code by using Git. For example, to download the SW Distro 2020.08 do: $ git clone https://github.com/robotology/ycm.git -b v0.11.3 $ git clone https://github.com/robotology/yarp.git -b v3.4.0 $ git clone https://github.com/robotology/icub-main.git -b v1.17.0 ...","title":"Software Versioning Table"},{"location":"sw_versioning_table/#table","text":"This table has been generated automatically by processing data available in robotology/robotology-superbuild@master/releases . Click on the distros below to explore their package versions: \ud83d\udce6 Distro 2020.11 \ud83d\udce6 Distro 2020.08 \ud83d\udce6 Distro 2020.08.patch-01 \ud83d\udce6 Distro 2020.08.feat-01 \ud83d\udce6 Distro 2020.05 \ud83d\udce6 Distro 2020.05.feat-01 \ud83d\udce6 Distro 2020.02","title":"Table"},{"location":"sw_versioning_table/2020.02/","text":"\ud83d\udce6 Distro 2020.02 \u00b6 CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.15.0 robots-configuration robotology/robots-configuration.git v1.15.0 icub-firmware robotology/icub-firmware.git v1.15.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.15.0 icub-firmware-build robotology/icub-firmware-build.git v1.15.0 ICUBcontrib robotology/icub-contrib-common.git v1.15.0 icub-basic-demos robotology/icub-basic-demos.git v1.15.0 icub-tests robotology/icub-tests.git v1.15.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.3.0 icub-gazebo robotology/icub-gazebo.git v1.15.0 iDynTree robotology/idyntree.git v1.0.2 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.0 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.0 wholeBodyInterface robotology/wholebodyinterface.git v0.2.6 yarpWholeBodyInterface robotology/yarp-wholebodyinterface.git v0.3.6 codyco-modules robotology/codyco-modules.git v0.3.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.02"},{"location":"sw_versioning_table/2020.02/#distro-202002","text":"CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.15.0 robots-configuration robotology/robots-configuration.git v1.15.0 icub-firmware robotology/icub-firmware.git v1.15.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.15.0 icub-firmware-build robotology/icub-firmware-build.git v1.15.0 ICUBcontrib robotology/icub-contrib-common.git v1.15.0 icub-basic-demos robotology/icub-basic-demos.git v1.15.0 icub-tests robotology/icub-tests.git v1.15.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.3.0 icub-gazebo robotology/icub-gazebo.git v1.15.0 iDynTree robotology/idyntree.git v1.0.2 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.0 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.0 wholeBodyInterface robotology/wholebodyinterface.git v0.2.6 yarpWholeBodyInterface robotology/yarp-wholebodyinterface.git v0.3.6 codyco-modules robotology/codyco-modules.git v0.3.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.02"},{"location":"sw_versioning_table/2020.05.feat-01/","text":"\ud83d\udce6 Distro 2020.05.feat-01 \u00b6 CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.16.2 robots-configuration robotology/robots-configuration.git v1.16.1 icub-firmware robotology/icub-firmware.git v1.16.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.16.0 icub-firmware-build robotology/icub-firmware-build.git v1.16.0 ICUBcontrib robotology/icub-contrib-common.git v1.16.0 icub-basic-demos robotology/icub-basic-demos.git v1.16.1 icub-tests robotology/icub-tests.git v1.16.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.4.1 icub-gazebo robotology/icub-gazebo.git v1.16.0 iDynTree robotology/idyntree.git v1.0.7 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.05.feat 01"},{"location":"sw_versioning_table/2020.05.feat-01/#distro-202005feat-01","text":"CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.16.2 robots-configuration robotology/robots-configuration.git v1.16.1 icub-firmware robotology/icub-firmware.git v1.16.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.16.0 icub-firmware-build robotology/icub-firmware-build.git v1.16.0 ICUBcontrib robotology/icub-contrib-common.git v1.16.0 icub-basic-demos robotology/icub-basic-demos.git v1.16.1 icub-tests robotology/icub-tests.git v1.16.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.4.1 icub-gazebo robotology/icub-gazebo.git v1.16.0 iDynTree robotology/idyntree.git v1.0.7 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.05.feat-01"},{"location":"sw_versioning_table/2020.05/","text":"\ud83d\udce6 Distro 2020.05 \u00b6 CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.16.0 robots-configuration robotology/robots-configuration.git v1.16.0 icub-firmware robotology/icub-firmware.git v1.16.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.16.0 icub-firmware-build robotology/icub-firmware-build.git v1.16.0 ICUBcontrib robotology/icub-contrib-common.git v1.16.0 icub-basic-demos robotology/icub-basic-demos.git v1.16.0 icub-tests robotology/icub-tests.git v1.16.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.4.0 icub-gazebo robotology/icub-gazebo.git v1.16.0 iDynTree robotology/idyntree.git v1.0.2 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.05"},{"location":"sw_versioning_table/2020.05/#distro-202005","text":"CMake Packages Repositories Versions YARP robotology/yarp.git v3.3.2 ICUB robotology/icub-main.git v1.16.0 robots-configuration robotology/robots-configuration.git v1.16.0 icub-firmware robotology/icub-firmware.git v1.16.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.16.0 icub-firmware-build robotology/icub-firmware-build.git v1.16.0 ICUBcontrib robotology/icub-contrib-common.git v1.16.0 icub-basic-demos robotology/icub-basic-demos.git v1.16.0 icub-tests robotology/icub-tests.git v1.16.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.4.0 icub-gazebo robotology/icub-gazebo.git v1.16.0 iDynTree robotology/idyntree.git v1.0.2 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.3.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.05"},{"location":"sw_versioning_table/2020.08.feat-01/","text":"\ud83d\udce6 Distro 2020.08.feat-01 \u00b6 CMake Packages Repositories Versions YCM robotology/ycm.git v0.11.4 YARP robotology/yarp.git v3.4.1 ICUB robotology/icub-main.git v1.17.1 robots-configuration robotology/robots-configuration.git v1.17.1 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 icub-models robotology/icub-models.git v1.17.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.08.feat 01"},{"location":"sw_versioning_table/2020.08.feat-01/#distro-202008feat-01","text":"CMake Packages Repositories Versions YCM robotology/ycm.git v0.11.4 YARP robotology/yarp.git v3.4.1 ICUB robotology/icub-main.git v1.17.1 robots-configuration robotology/robots-configuration.git v1.17.1 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 icub-models robotology/icub-models.git v1.17.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.08.feat-01"},{"location":"sw_versioning_table/2020.08/","text":"\ud83d\udce6 Distro 2020.08 \u00b6 CMake Packages Repositories Versions YARP robotology/yarp.git v3.4.0 ICUB robotology/icub-main.git v1.17.0 robots-configuration robotology/robots-configuration.git v1.17.0 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.0 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.3 icub-models robotology/icub-models.git v1.17.0 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.08"},{"location":"sw_versioning_table/2020.08/#distro-202008","text":"CMake Packages Repositories Versions YARP robotology/yarp.git v3.4.0 ICUB robotology/icub-main.git v1.17.0 robots-configuration robotology/robots-configuration.git v1.17.0 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.0 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.3 icub-models robotology/icub-models.git v1.17.0 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.08"},{"location":"sw_versioning_table/2020.08.patch-01/","text":"\ud83d\udce6 Distro 2020.08.patch-01 \u00b6 CMake Packages Repositories Versions YARP robotology/yarp.git v3.4.1 ICUB robotology/icub-main.git v1.17.0 robots-configuration robotology/robots-configuration.git v1.17.0 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.4 icub-models robotology/icub-models.git v1.17.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.08.patch 01"},{"location":"sw_versioning_table/2020.08.patch-01/#distro-202008patch-01","text":"CMake Packages Repositories Versions YARP robotology/yarp.git v3.4.1 ICUB robotology/icub-main.git v1.17.0 robots-configuration robotology/robots-configuration.git v1.17.0 icub-firmware robotology/icub-firmware.git v1.17.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.17.0 icub-firmware-build robotology/icub-firmware-build.git v1.17.0 ICUBcontrib robotology/icub-contrib-common.git v1.17.0 icub-basic-demos robotology/icub-basic-demos.git v1.17.0 icub-tests robotology/icub-tests.git v1.17.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.17.0 iDynTree robotology/idyntree.git v1.1.0 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 ycm robotology/ycm.git v0.11.4 icub-models robotology/icub-models.git v1.17.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.1 OsqpEigen robotology/osqp-eigen.git v0.5.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.2.0 walking-controllers robotology/walking-controllers.git v0.2.1 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.0 whole-body-estimators robotology/whole-body-estimators.git v0.2.1 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.0.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 xsensmt-yarp-driver robotology/xsensmt-yarp-driver.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.08.patch-01"},{"location":"sw_versioning_table/2020.11/","text":"\ud83d\udce6 Distro 2020.11 \u00b6 CMake Packages Repositories Versions YCM robotology/ycm.git 0f12169a9818dde431b051ac79c3a6e13092f29f YARP robotology/yarp.git 513cf7a32c83c9c96abb51a9535cf8714e027e6b ICUB robotology/icub-main.git v1.18.0 robots-configuration robotology/robots-configuration.git v1.18.0 icub-firmware robotology/icub-firmware.git v1.18.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.18.0 icub-firmware-build robotology/icub-firmware-build.git v1.18.0 ICUBcontrib robotology/icub-contrib-common.git v1.18.0 icub-basic-demos robotology/icub-basic-demos.git v1.18.0 icub-tests robotology/icub-tests.git v1.18.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.18.0 iDynTree robotology/idyntree.git v2.0.1 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 manif artivis/manif.git 44bdfebff0fbc56cb189f680212257dc7f20ea58 qhull qhull/qhull.git v8.0.2 CppAD coin-or/CppAD.git 4aac52664de911af02cfade06131a9a6f6b48d7e casadi GiulioRomualdi/casadi.git a26cd8ffba99052b74553eec1daeff640eea7e79 icub-models robotology/icub-models.git v1.18.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.3 OsqpEigen robotology/osqp-eigen.git v0.6.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.3.0 walking-controllers robotology/walking-controllers.git v0.3.3 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.5 whole-body-estimators robotology/whole-body-estimators.git v0.3.0 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.1.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 yarp-device-xsensmt robotology/yarp-device-xsensmt.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"2020.11"},{"location":"sw_versioning_table/2020.11/#distro-202011","text":"CMake Packages Repositories Versions YCM robotology/ycm.git 0f12169a9818dde431b051ac79c3a6e13092f29f YARP robotology/yarp.git 513cf7a32c83c9c96abb51a9535cf8714e027e6b ICUB robotology/icub-main.git v1.18.0 robots-configuration robotology/robots-configuration.git v1.18.0 icub-firmware robotology/icub-firmware.git v1.18.0 icub_firmware_shared robotology/icub-firmware-shared.git v1.18.0 icub-firmware-build robotology/icub-firmware-build.git v1.18.0 ICUBcontrib robotology/icub-contrib-common.git v1.18.0 icub-basic-demos robotology/icub-basic-demos.git v1.18.0 icub-tests robotology/icub-tests.git v1.18.0 GazeboYARPPlugins robotology/gazebo-yarp-plugins.git v3.5.1 icub-gazebo robotology/icub-gazebo.git v1.18.0 iDynTree robotology/idyntree.git v2.0.1 qpOASES robotology-dependencies/qpOASES.git v3.2.0.1 osqp oxfordcontrol/osqp.git v0.6.0 manif artivis/manif.git 44bdfebff0fbc56cb189f680212257dc7f20ea58 qhull qhull/qhull.git v8.0.2 CppAD coin-or/CppAD.git 4aac52664de911af02cfade06131a9a6f6b48d7e casadi GiulioRomualdi/casadi.git a26cd8ffba99052b74553eec1daeff640eea7e79 icub-models robotology/icub-models.git v1.18.1 yarp-matlab-bindings robotology/yarp-matlab-bindings.git v3.4.0 RobotTestingFramework robotology/robot-testing-framework.git v2.0.1 blocktestcore robotology/blocktest.git v2.3.0 blocktest-yarp-plugins robotology/blocktest-yarp-plugins.git v1.1.0 BlockFactory robotology/blockfactory.git v0.8.1 WBToolbox robotology/wb-toolbox.git v5.3 OsqpEigen robotology/osqp-eigen.git v0.6.2 UnicyclePlanner robotology/unicycle-footstep-planner.git v0.3.0 walking-controllers robotology/walking-controllers.git v0.3.3 icub-gazebo-wholebody robotology/icub-gazebo-wholebody.git v0.1.0 whole-body-controllers robotology/whole-body-controllers.git v2.5 whole-body-estimators robotology/whole-body-estimators.git v0.3.0 walking-teleoperation robotology/walking-teleoperation.git v0.2.0 forcetorque-yarp-devices robotology/forcetorque-yarp-devices.git v0.2.0 wearables robotology/wearables.git v1.1.0 human-dynamics-estimation robotology/human-dynamics-estimation.git v2.1.0 human-gazebo robotology/human-gazebo.git v1.0 yarp-device-xsensmt robotology/yarp-device-xsensmt.git v0.1.0 speech robotology/speech.git v1.0.0 funny-things robotology/funny-things.git v1.0.0","title":"\ud83d\udce6 Distro 2020.11"},{"location":"upgrade_kits/","text":"Upgrade Kits \u00b6 KIT_002 iCub Upgrade Kit: torso capacitors \u00b6 iCub Torso Capacitors UpKit describes how to perform an upgrade to iCub so that the capacitors placed in its back don't get loose. KIT_003 iCub Upgrade Kit: hand \u00b6 iCub Hands Support UpKit describes how to perform an upgrade to the hands of iCub. The upgrade consists of replacing the supports of the mais board and on a new cover. KIT_004 iCub Upgrade Kit: upper arm covers \u00b6 iCub upper arm cover UpKit describes how to perform an upgrade to iCub so that the upper arm covers can be mounted. KIT_005 iCub Upgrade Kit: eyes support \u00b6 iCub Eyes Support UpKit describes how to perform an upgrade to iCub so that the supports of the eyes make them more stable. KIT_006 iCub Upgrade Kit: differential neck pulley \u00b6 iCub Differential Neck Pulley UpKit describes how to perform an upgrade of the neck of iCub so that the tendon does not easily slip away. KIT_007 iCub Upgrade Kit: ankle for climbing stairs \u00b6 iCub ankle for climbing stairs UpKit describes how to perform an upgrade on the feet in order to increase the step length and climb some stairs.","title":"Summary"},{"location":"upgrade_kits/#upgrade-kits","text":"","title":"Upgrade Kits"},{"location":"upgrade_kits/#kit_002-icub-upgrade-kit-torso-capacitors","text":"iCub Torso Capacitors UpKit describes how to perform an upgrade to iCub so that the capacitors placed in its back don't get loose.","title":"KIT_002 iCub Upgrade Kit: torso capacitors"},{"location":"upgrade_kits/#kit_003-icub-upgrade-kit-hand","text":"iCub Hands Support UpKit describes how to perform an upgrade to the hands of iCub. The upgrade consists of replacing the supports of the mais board and on a new cover.","title":"KIT_003 iCub Upgrade Kit: hand"},{"location":"upgrade_kits/#kit_004-icub-upgrade-kit-upper-arm-covers","text":"iCub upper arm cover UpKit describes how to perform an upgrade to iCub so that the upper arm covers can be mounted.","title":"KIT_004 iCub Upgrade Kit: upper arm covers"},{"location":"upgrade_kits/#kit_005-icub-upgrade-kit-eyes-support","text":"iCub Eyes Support UpKit describes how to perform an upgrade to iCub so that the supports of the eyes make them more stable.","title":"KIT_005 iCub Upgrade Kit: eyes support"},{"location":"upgrade_kits/#kit_006-icub-upgrade-kit-differential-neck-pulley","text":"iCub Differential Neck Pulley UpKit describes how to perform an upgrade of the neck of iCub so that the tendon does not easily slip away.","title":"KIT_006 iCub Upgrade Kit: differential neck pulley"},{"location":"upgrade_kits/#kit_007-icub-upgrade-kit-ankle-for-climbing-stairs","text":"iCub ankle for climbing stairs UpKit describes how to perform an upgrade on the feet in order to increase the step length and climb some stairs.","title":"KIT_007 iCub Upgrade Kit: ankle for climbing stairs"},{"location":"upgrade_kits/ankle_for_stairs/support/","text":"KIT_007 Ankle for climbing stairs \u00b6 We are going to replace iCub feet plates in order to increase the step length and climb some stairs. IIT alias (used as ordering reference) KIT_007 Applicable to iCub 2.x, x\u22655 Available onboard available as an option Content material \u00b6 Pieces Alias Description Cod. Wgst 1 RC_IIT_028_P_001 left foot shaped plate 15058 1 RC_IIT_028_P_002 right foot shaped plate 15059 12 V3-8--_-_U5933_C screw 3x8 \u2013 UNI5933 \u2013hexagon socket countersunk head 2468 Assembly instruction \u00b6 First of all we need to remove the sensorized sole from the foot loosening the screws in picture the sole and its screws Now we can separate the footplate and its cover loosening the screws green in picture the screws that tight the foot plate to the robot At this point we are going to separate cover and foot plate removing these screws how to separate foot plate from cover Now we can follow the procedure back mounting the cover on the new foot plate the new foot plate Tight it back to the robot using the screws provided in the UKIT_007. Mount back the sensorized sole using the same screws as before Software instructions \u00b6 If you mount the KIT_007 on your iCub, the kinematics of the leg limb will change, so you will need to make sure that any model that you use in your high level software (in particular anything related to walking or in any case motion of the legs) will be changed appropriately. In particular, if you rely on URDF models present in robotology/icub-models , make sure that your iCub model is correctly updated to include the changes of KIT_007 . If you do not know if your iCub model is present in robotology/icub-models or if it is updated, feel free to open an issue on robotology/icub-tech-support to ask about it.","title":"KIT_007 Ankle for climbing stairs"},{"location":"upgrade_kits/ankle_for_stairs/support/#kit_007-ankle-for-climbing-stairs","text":"We are going to replace iCub feet plates in order to increase the step length and climb some stairs. IIT alias (used as ordering reference) KIT_007 Applicable to iCub 2.x, x\u22655 Available onboard available as an option","title":"KIT_007 Ankle for climbing stairs"},{"location":"upgrade_kits/ankle_for_stairs/support/#content-material","text":"Pieces Alias Description Cod. Wgst 1 RC_IIT_028_P_001 left foot shaped plate 15058 1 RC_IIT_028_P_002 right foot shaped plate 15059 12 V3-8--_-_U5933_C screw 3x8 \u2013 UNI5933 \u2013hexagon socket countersunk head 2468","title":"Content material"},{"location":"upgrade_kits/ankle_for_stairs/support/#assembly-instruction","text":"First of all we need to remove the sensorized sole from the foot loosening the screws in picture the sole and its screws Now we can separate the footplate and its cover loosening the screws green in picture the screws that tight the foot plate to the robot At this point we are going to separate cover and foot plate removing these screws how to separate foot plate from cover Now we can follow the procedure back mounting the cover on the new foot plate the new foot plate Tight it back to the robot using the screws provided in the UKIT_007. Mount back the sensorized sole using the same screws as before","title":"Assembly instruction"},{"location":"upgrade_kits/ankle_for_stairs/support/#software-instructions","text":"If you mount the KIT_007 on your iCub, the kinematics of the leg limb will change, so you will need to make sure that any model that you use in your high level software (in particular anything related to walking or in any case motion of the legs) will be changed appropriately. In particular, if you rely on URDF models present in robotology/icub-models , make sure that your iCub model is correctly updated to include the changes of KIT_007 . If you do not know if your iCub model is present in robotology/icub-models or if it is updated, feel free to open an issue on robotology/icub-tech-support to ask about it.","title":"Software instructions"},{"location":"upgrade_kits/differential_neck_pulley/support/","text":"KIT_006 Update of differential neck pulley for iCub \u00b6 We are going to replace parts in the neck, you can either operate with the head's covers mounted or not (probably more comfortable). It is possible to work with leaving the head attached to the robot or not. IIT alias (used as ordering reference) KIT_006 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020) Content material \u00b6 Pieces Alias Description Cod. Wgst 2 RC_IIT_010_P_071 Differential neck HFUC pulley 6791 4 V2-3--_-_ISO7045_CZ M 2 x 3 \u2013 ISO7045 \u2013 SS A2 2425 Assembly instruction \u00b6 We are going to replace the part in the following picture with its new version A2, this is really similar to the previous one but the groove (red in picture) which is now smaller. The pulley part to be changed There are two of these parts in iCub's neck. Here is a picture of the neck with the parts in red. The neck with the pulleys in red Here are the instructions for replacing the left pulley. First of all you need to remove tendons from the neck. Neck's tendons replacement Remove the green highlighted assembly loosening the screws indicated by arrows tbd Untight the screw shown in left picture to extract the whole motor assembly shown on the right. The whole neck The motor assembly Gently remove pulley's assembly as on left picture and remove the flex spline from the pulley untightening the screw shown on rigth. pulley assembly the screw to remove Repeat the procedure above to extract the rigth pulley. When the two old pulleys are removed, mount back the new ones by following instructions in reverse.","title":"KIT_006 Update of differential neck pulley"},{"location":"upgrade_kits/differential_neck_pulley/support/#kit_006-update-of-differential-neck-pulley-for-icub","text":"We are going to replace parts in the neck, you can either operate with the head's covers mounted or not (probably more comfortable). It is possible to work with leaving the head attached to the robot or not. IIT alias (used as ordering reference) KIT_006 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020)","title":"KIT_006 Update of differential neck pulley for iCub"},{"location":"upgrade_kits/differential_neck_pulley/support/#content-material","text":"Pieces Alias Description Cod. Wgst 2 RC_IIT_010_P_071 Differential neck HFUC pulley 6791 4 V2-3--_-_ISO7045_CZ M 2 x 3 \u2013 ISO7045 \u2013 SS A2 2425","title":"Content material"},{"location":"upgrade_kits/differential_neck_pulley/support/#assembly-instruction","text":"We are going to replace the part in the following picture with its new version A2, this is really similar to the previous one but the groove (red in picture) which is now smaller. The pulley part to be changed There are two of these parts in iCub's neck. Here is a picture of the neck with the parts in red. The neck with the pulleys in red Here are the instructions for replacing the left pulley. First of all you need to remove tendons from the neck. Neck's tendons replacement Remove the green highlighted assembly loosening the screws indicated by arrows tbd Untight the screw shown in left picture to extract the whole motor assembly shown on the right. The whole neck The motor assembly Gently remove pulley's assembly as on left picture and remove the flex spline from the pulley untightening the screw shown on rigth. pulley assembly the screw to remove Repeat the procedure above to extract the rigth pulley. When the two old pulleys are removed, mount back the new ones by following instructions in reverse.","title":"Assembly instruction"},{"location":"upgrade_kits/eyes/support/","text":"KIT_005 Eyes motor replacement support \u00b6 IIT alias (used as ordering reference) KIT_005 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020) Content material \u00b6 Pieces Alias Description Cod. Wgst 2 RC_IIT_010_P_038 EYE_ACTUATING-JOINT_BASE 2617 1 RC_IIT_010_P_047 V2 eye tilt brace A 2626 1 RC_IIT_010_P_048 V2 eye tilt brace B 2627 2 2-10--_-_ISO7046-1_CH Screw -M 2 x 10 \u2013 ISO7046 \u2013 SS A2 2596 4 S1_5-6--_-_I2338_B Dowel pin 1.5 x 6 stainless steel A2, UNI1707 2354 Assembly instruction \u00b6 We are going to replace parts in the eyes tilt assembly, there are some preliminary actions to take: we need to turn off the head and the whole robot. we need to remove head's covers . we need to unplug and remove the whole boards' frame. without covers without boards' frame We are going to replace the 4 parts here in picture. Brackets unmounting We need to remove eye's assembly from the head unlocking two cross recessed screws the screws to remove eye's group Unmount the groupand replace the old case with the new one old one new one While mounting the motoreducer group checl if it moves at the correct amount of current, if not try to slightly release these screws motoreducer group Before mounting back the eyes on the face we need to replace the brackets. Releasing the grub screws (blue arrows) we can remove the pins (yellow arrows) and later the brackets (red arrows) mounting back the new ones - First of all you need to remove tendons from the neck, - Remove the green highlighted assembly loosening the screws indicated by arrows Brackets unmounting Mount the head back following the instruction in reverse Do not hesitate to contact iCub support for any doubt.","title":"KIT_005 Eyes Motor Replacement Support"},{"location":"upgrade_kits/eyes/support/#kit_005-eyes-motor-replacement-support","text":"IIT alias (used as ordering reference) KIT_005 Applicable to iCub, head V2 Available onboard since iCub SN 043 (August 2020)","title":"KIT_005 Eyes motor replacement support"},{"location":"upgrade_kits/eyes/support/#content-material","text":"Pieces Alias Description Cod. Wgst 2 RC_IIT_010_P_038 EYE_ACTUATING-JOINT_BASE 2617 1 RC_IIT_010_P_047 V2 eye tilt brace A 2626 1 RC_IIT_010_P_048 V2 eye tilt brace B 2627 2 2-10--_-_ISO7046-1_CH Screw -M 2 x 10 \u2013 ISO7046 \u2013 SS A2 2596 4 S1_5-6--_-_I2338_B Dowel pin 1.5 x 6 stainless steel A2, UNI1707 2354","title":"Content material"},{"location":"upgrade_kits/eyes/support/#assembly-instruction","text":"We are going to replace parts in the eyes tilt assembly, there are some preliminary actions to take: we need to turn off the head and the whole robot. we need to remove head's covers . we need to unplug and remove the whole boards' frame. without covers without boards' frame We are going to replace the 4 parts here in picture. Brackets unmounting We need to remove eye's assembly from the head unlocking two cross recessed screws the screws to remove eye's group Unmount the groupand replace the old case with the new one old one new one While mounting the motoreducer group checl if it moves at the correct amount of current, if not try to slightly release these screws motoreducer group Before mounting back the eyes on the face we need to replace the brackets. Releasing the grub screws (blue arrows) we can remove the pins (yellow arrows) and later the brackets (red arrows) mounting back the new ones - First of all you need to remove tendons from the neck, - Remove the green highlighted assembly loosening the screws indicated by arrows Brackets unmounting Mount the head back following the instruction in reverse Do not hesitate to contact iCub support for any doubt.","title":"Assembly instruction"},{"location":"upgrade_kits/hands/support/","text":"KIT_003 Update Support for iCub Right and Left hand \u00b6 IIT alias (used as ordering reference) KIT_003 Applicable to iCub Available onboard since iCub SN 043 (August 2020) Content material \u00b6 Pieces Alias Position Rev Description Cod. Wgst 1 RC_IIT_011_P_063 Left support for Mais 14357 1 RC_IIT_011_G_017 Left support for FTC 14354 1 RC_IIT_011_P_062 3 Right support for Mais 14356 1 RC_IIT_011_G_016 1 Right support for FTC 14355 4 ISO 7046 M1.6x5 2 CROSS RECESSED SCREW ISO7046-1 M1.6X5 H 11229 6 ISO 7045 M1.6x6 4 / 6 CROSS RECESSED SCREW ISO7045 M1.6X6 Z 2399 4 ISO 1207 M1x5 7 SLOTTED CHEESE HEAD SCREW DIN 84 ISO1207 M1X5 2406 2 RC_IIT_017_P_031 10 UPPERCOVER HAND RIGHT 5448 2 RC_IIT_017_P_030 UPPERCOVER HAND LEFT 5447 2 V2-6--_-_ISO7046-1_CH 9 CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440 Assembly instruction \u00b6 First of all you need to know that you will be in a situation where you will have to disassemble the components to replace and disconnect the Corn and FTC boards in order to move them and leave the workspace free as much as possible. Once this is done the first piece to be mounted will be the rc_IIT_011_g_016 or the rc_IIT_011_g_017 (right or left hand) as shown in the video. All this because you will find yourself in the condition in which you will have to pass the piece between the cables (tendons) that move the thumb. This explanation is the same for both hands Exploding: \u00b6 Reference Right hand Assemble upgrade support Mais and FTC Assembly sequence \u00b6 Mounting the cover (dorsum of the hand): pass the hook of the dorsum cover between the steel cable (tendon) and the palm of the hand (cover). See video","title":"KIT_003 Hands Support"},{"location":"upgrade_kits/hands/support/#kit_003-update-support-for-icub-right-and-left-hand","text":"IIT alias (used as ordering reference) KIT_003 Applicable to iCub Available onboard since iCub SN 043 (August 2020)","title":"KIT_003 Update Support for iCub Right and Left hand"},{"location":"upgrade_kits/hands/support/#content-material","text":"Pieces Alias Position Rev Description Cod. Wgst 1 RC_IIT_011_P_063 Left support for Mais 14357 1 RC_IIT_011_G_017 Left support for FTC 14354 1 RC_IIT_011_P_062 3 Right support for Mais 14356 1 RC_IIT_011_G_016 1 Right support for FTC 14355 4 ISO 7046 M1.6x5 2 CROSS RECESSED SCREW ISO7046-1 M1.6X5 H 11229 6 ISO 7045 M1.6x6 4 / 6 CROSS RECESSED SCREW ISO7045 M1.6X6 Z 2399 4 ISO 1207 M1x5 7 SLOTTED CHEESE HEAD SCREW DIN 84 ISO1207 M1X5 2406 2 RC_IIT_017_P_031 10 UPPERCOVER HAND RIGHT 5448 2 RC_IIT_017_P_030 UPPERCOVER HAND LEFT 5447 2 V2-6--_-_ISO7046-1_CH 9 CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440","title":"Content material"},{"location":"upgrade_kits/hands/support/#assembly-instruction","text":"First of all you need to know that you will be in a situation where you will have to disassemble the components to replace and disconnect the Corn and FTC boards in order to move them and leave the workspace free as much as possible. Once this is done the first piece to be mounted will be the rc_IIT_011_g_016 or the rc_IIT_011_g_017 (right or left hand) as shown in the video. All this because you will find yourself in the condition in which you will have to pass the piece between the cables (tendons) that move the thumb. This explanation is the same for both hands","title":"Assembly instruction"},{"location":"upgrade_kits/hands/support/#exploding","text":"Reference Right hand Assemble upgrade support Mais and FTC","title":"Exploding:"},{"location":"upgrade_kits/hands/support/#assembly-sequence","text":"Mounting the cover (dorsum of the hand): pass the hook of the dorsum cover between the steel cable (tendon) and the palm of the hand (cover). See video","title":"Assembly sequence"},{"location":"upgrade_kits/torso_capacitors/support/","text":"KIT_002 Update of capacitor support (front and rear) iCub2.5 with battery backpack \u00b6 Content material \u00b6 IIT alias (used as ordering reference) KIT_002 Applicable to iCub Available onboard since iCub SN 043 (August 2020) Pieces Alias Description Cod. Wgst 4 RC_TLR_003_P_060_00 CAPACITOR HOLDING PLATE 2035 4 V2-5--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X5 H 2430 4 Cable tie Cable tie, 100x2.5mm, nylon, black 531 Assembly instruction \u00b6 Make sure the 4 capacitors (front and back) are accessible (has a view). For the removal and subsequent reassembly of the parts that obstruct (backpack unit), refer to the specific manual . Assembly sequence : Perform the assembly sequence as indicated in the image, keep in mind that the sequence is the same for all 4 support (Front and rear).","title":"KIT_002 Update of torso capacitors"},{"location":"upgrade_kits/torso_capacitors/support/#kit_002-update-of-capacitor-support-front-and-rear-icub25-with-battery-backpack","text":"","title":"KIT_002 Update of capacitor support (front and rear) iCub2.5 with battery backpack"},{"location":"upgrade_kits/torso_capacitors/support/#content-material","text":"IIT alias (used as ordering reference) KIT_002 Applicable to iCub Available onboard since iCub SN 043 (August 2020) Pieces Alias Description Cod. Wgst 4 RC_TLR_003_P_060_00 CAPACITOR HOLDING PLATE 2035 4 V2-5--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X5 H 2430 4 Cable tie Cable tie, 100x2.5mm, nylon, black 531","title":"Content material"},{"location":"upgrade_kits/torso_capacitors/support/#assembly-instruction","text":"Make sure the 4 capacitors (front and back) are accessible (has a view). For the removal and subsequent reassembly of the parts that obstruct (backpack unit), refer to the specific manual . Assembly sequence : Perform the assembly sequence as indicated in the image, keep in mind that the sequence is the same for all 4 support (Front and rear).","title":"Assembly instruction"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/","text":"KIT_004 iCub upper arm covers preventing skin breakage \u00b6 Upgrade Kit \u00b6 Warning The 3D taxels points are not yet available for both left_arm and right_arm limbs of iCub robots mounting this UKit (iCub HW version 2.7). For this reason, skinManager may not work as expected. This information will be added in the near future. Instead, the 2D positions of the new patches have been defined such that iCubSkinGui can work just fine. IIT alias (used as ordering reference) KIT_004 Applicable to iCub Available onboard since iCub SN 043 (August 2020) # Cod Alias Rev UM Qta Description 1 14589 MKIT_004 Pieces 1 iCub, Upper arms, fix skin breaking 2 14767 WKIT_004 Pieces 1 iCub2, Upperarms, fix skin breaking (wiring parts) 3 14768 EKIT_004 Pieces 1 iCub2, Upperarms, fix skin breaking (electronics) Content material MKIT_004 \u00b6 Pieces Alias Description Cod. Wgst 1 RC_IIT_017_P_023 Right UA UPPER COVER iCub2.5 5253 1 RC_IIT_017_P_022 Left UA UPPER COVER iCub2.5 5252 4 V2-8--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X8 Z 2444 2 V2-6--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X6 Z 2439 2 V2-6--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440 4 V3-10--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M3X10 H 3461 Content material WKIT_004 \u00b6 Pieces Alias REV Description Cod. Wgst 1 10301 iCub2.5, subassembly - Right Upperarm Skin Harness, wiring materials 10301 1 10273 iCub2.5, subassembly - Left Upperarm Skin Harness, wiring materials 10273 note link to harness schematics Content material EKIT_004 \u00b6 Pieces Alias REV Description Cod. Wgst 1 13475 iCubSkin 2.5, Right Upper Arm Skin, RUGGED Electronic boards 13475 1 13476 iCubSkin 2.5, Left Upper Arm Skin, RUGGED Electronic boards 13476 note link to logic schematics Historical review: \u00b6 In previous revisions of the covers, the mini cards were organized in the shape of hexagons. This largely caused the skin patch PCB to flex and break, because the patches took the high curvature of the cover (see image). - To solve this problem, we reduced the number of PCBs by arranging a strip with 5 PCBs (skin patch) on the flat surface of the cover. (see image) - Assembly instruction. \u00b6 First of all, it must be said that the electronic part of the upper arm covers is already supplied, that is, the MTB4 cards and the hexagon shape (skin) are mounted, glued and connected together. Before starting assembly, check the orientation of the covers. - Assembly sequence : Perform the assembly sequence as shown in the image, keep in mind that the sequence is the same for both upper arms (Right and left) First step push the cover (RC_IIT_017_P_023) inwards so as to align the attachment holes, both positions (TOP and BOTTOM), as can be seen in the image. - Second and third step, fix the cover using the respective screws as shown in the image. This applies to both positions TOP and BOTTOM. - Fourth step, close the covers of the upper arm by pushing the Lover cover inwards in order to align the attachment holes. After that fix the covers with the respective lives as shown in the pictures. This applies to both positions TOP and BOTTOM. - -","title":"KIT_004 Update upper arm covers"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#kit_004-icub-upper-arm-covers-preventing-skin-breakage","text":"","title":"KIT_004 iCub upper arm covers preventing skin breakage"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#upgrade-kit","text":"Warning The 3D taxels points are not yet available for both left_arm and right_arm limbs of iCub robots mounting this UKit (iCub HW version 2.7). For this reason, skinManager may not work as expected. This information will be added in the near future. Instead, the 2D positions of the new patches have been defined such that iCubSkinGui can work just fine. IIT alias (used as ordering reference) KIT_004 Applicable to iCub Available onboard since iCub SN 043 (August 2020) # Cod Alias Rev UM Qta Description 1 14589 MKIT_004 Pieces 1 iCub, Upper arms, fix skin breaking 2 14767 WKIT_004 Pieces 1 iCub2, Upperarms, fix skin breaking (wiring parts) 3 14768 EKIT_004 Pieces 1 iCub2, Upperarms, fix skin breaking (electronics)","title":"Upgrade Kit"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-mkit_004","text":"Pieces Alias Description Cod. Wgst 1 RC_IIT_017_P_023 Right UA UPPER COVER iCub2.5 5253 1 RC_IIT_017_P_022 Left UA UPPER COVER iCub2.5 5252 4 V2-8--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X8 Z 2444 2 V2-6--_-_ISO7045_CZ CROSS RECESSED SCREW ISO7045 M2X6 Z 2439 2 V2-6--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M2X6 H 2440 4 V3-10--_-_ISO7046-1_CH CROSS RECESSED SCREW ISO7046-1 M3X10 H 3461","title":"Content material  MKIT_004"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-wkit_004","text":"Pieces Alias REV Description Cod. Wgst 1 10301 iCub2.5, subassembly - Right Upperarm Skin Harness, wiring materials 10301 1 10273 iCub2.5, subassembly - Left Upperarm Skin Harness, wiring materials 10273 note link to harness schematics","title":"Content material  WKIT_004"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#content-material-ekit_004","text":"Pieces Alias REV Description Cod. Wgst 1 13475 iCubSkin 2.5, Right Upper Arm Skin, RUGGED Electronic boards 13475 1 13476 iCubSkin 2.5, Left Upper Arm Skin, RUGGED Electronic boards 13476 note link to logic schematics","title":"Content material  EKIT_004"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#historical-review","text":"In previous revisions of the covers, the mini cards were organized in the shape of hexagons. This largely caused the skin patch PCB to flex and break, because the patches took the high curvature of the cover (see image). - To solve this problem, we reduced the number of PCBs by arranging a strip with 5 PCBs (skin patch) on the flat surface of the cover. (see image) -","title":"Historical review:"},{"location":"upgrade_kits/upperarm_cover_icub2_5/support/#assembly-instruction","text":"First of all, it must be said that the electronic part of the upper arm covers is already supplied, that is, the MTB4 cards and the hexagon shape (skin) are mounted, glued and connected together. Before starting assembly, check the orientation of the covers. - Assembly sequence : Perform the assembly sequence as shown in the image, keep in mind that the sequence is the same for both upper arms (Right and left) First step push the cover (RC_IIT_017_P_023) inwards so as to align the attachment holes, both positions (TOP and BOTTOM), as can be seen in the image. - Second and third step, fix the cover using the respective screws as shown in the image. This applies to both positions TOP and BOTTOM. - Fourth step, close the covers of the upper arm by pushing the Lover cover inwards in order to align the attachment holes. After that fix the covers with the respective lives as shown in the pictures. This applies to both positions TOP and BOTTOM. - -","title":"Assembly instruction."}]}